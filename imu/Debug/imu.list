
imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f18  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  080091b8  080091b8  0000a1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800976c  0800976c  0000a76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009774  08009774  0000a774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009778  08009778  0000a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  24000000  0800977c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000026c  240001e4  08009960  0000b1e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000450  08009960  0000b450  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016194  00000000  00000000  0000b212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b59  00000000  00000000  000213a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f38  00000000  00000000  00023f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bbf  00000000  00000000  00024e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003815f  00000000  00000000  000259f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015798  00000000  00000000  0005db56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015d1d3  00000000  00000000  000732ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d04c1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ddc  00000000  00000000  001d0504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004b  00000000  00000000  001d52e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080091a0 	.word	0x080091a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	080091a0 	.word	0x080091a0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d013      	beq.n	80006fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80006dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006e4:	e000      	b.n	80006e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006f2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f000 febb 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f819 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f000 f90d 	bl	8000934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800071a:	f000 f8bf 	bl	800089c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800071e:	f000 f87d 	bl	800081c <MX_I2C1_Init>
//  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
//  {
//    Error_Handler();
//  }

  mpu6500_init();
 8000722:	f000 f99b 	bl	8000a5c <mpu6500_init>

  /* -- Sample board code to send message over COM1 port ---- */
//  printf("Welcome to STM32 world !\n\r");

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000726:	2000      	movs	r0, #0
 8000728:	f000 fe72 	bl	8001410 <BSP_LED_On>
  BSP_LED_On(LED_BLUE);
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fe6f 	bl	8001410 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000732:	2002      	movs	r0, #2
 8000734:	f000 fe6c 	bl	8001410 <BSP_LED_On>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* -- Sample board code for User push-button in interrupt mode ---- */
	  mpu6500_read();
 8000738:	f000 fa26 	bl	8000b88 <mpu6500_read>
//	  printf("x axis acceleration: %d \n", data_imu.x_acc);
//	  printf("y axis acceleration: %d \n", data_imu.y_acc);
//	  printf("z axis acceleration: %d \n", data_imu.z_acc);
	  HAL_Delay(2000);
 800073c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000740:	f000 ff34 	bl	80015ac <HAL_Delay>
	  mpu6500_read();
 8000744:	bf00      	nop
 8000746:	e7f7      	b.n	8000738 <main+0x2e>

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09c      	sub	sp, #112	@ 0x70
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000752:	224c      	movs	r2, #76	@ 0x4c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f006 fece 	bl	80074f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2220      	movs	r2, #32
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f006 fec8 	bl	80074f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000768:	2002      	movs	r0, #2
 800076a:	f002 f957 	bl	8002a1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b28      	ldr	r3, [pc, #160]	@ (8000814 <SystemClock_Config+0xcc>)
 8000774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000776:	4a27      	ldr	r2, [pc, #156]	@ (8000814 <SystemClock_Config+0xcc>)
 8000778:	f023 0301 	bic.w	r3, r3, #1
 800077c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800077e:	4b25      	ldr	r3, [pc, #148]	@ (8000814 <SystemClock_Config+0xcc>)
 8000780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <SystemClock_Config+0xd0>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000790:	4a21      	ldr	r2, [pc, #132]	@ (8000818 <SystemClock_Config+0xd0>)
 8000792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <SystemClock_Config+0xd0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a4:	bf00      	nop
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <SystemClock_Config+0xd0>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007b2:	d1f8      	bne.n	80007a6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2340      	movs	r3, #64	@ 0x40
 80007be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 f961 	bl	8002a90 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007d4:	f000 f93c 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	233f      	movs	r3, #63	@ 0x3f
 80007da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2101      	movs	r1, #1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fda1 	bl	8003344 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000808:	f000 f922 	bl	8000a50 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3770      	adds	r7, #112	@ 0x70
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	58000400 	.word	0x58000400
 8000818:	58024800 	.word	0x58024800

0800081c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	@ (8000894 <MX_I2C1_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	@ (8000898 <MX_I2C1_Init+0x7c>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000832:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000834:	2201      	movs	r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_I2C1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000856:	480e      	ldr	r0, [pc, #56]	@ (8000890 <MX_I2C1_Init+0x74>)
 8000858:	f001 f9b6 	bl	8001bc8 <HAL_I2C_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000862:	f000 f8f5 	bl	8000a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000866:	2100      	movs	r1, #0
 8000868:	4809      	ldr	r0, [pc, #36]	@ (8000890 <MX_I2C1_Init+0x74>)
 800086a:	f002 f83f 	bl	80028ec <HAL_I2CEx_ConfigAnalogFilter>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000874:	f000 f8ec 	bl	8000a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_I2C1_Init+0x74>)
 800087c:	f002 f881 	bl	8002982 <HAL_I2CEx_ConfigDigitalFilter>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 f8e3 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	24000200 	.word	0x24000200
 8000894:	40005400 	.word	0x40005400
 8000898:	00602173 	.word	0x00602173

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008a2:	4a23      	ldr	r2, [pc, #140]	@ (8000930 <MX_USART2_UART_Init+0x94>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008de:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e4:	4811      	ldr	r0, [pc, #68]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008e6:	f004 fee5 	bl	80056b4 <HAL_UART_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008f0:	f000 f8ae 	bl	8000a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	480d      	ldr	r0, [pc, #52]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008f8:	f005 feed 	bl	80066d6 <HAL_UARTEx_SetTxFifoThreshold>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000902:	f000 f8a5 	bl	8000a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4808      	ldr	r0, [pc, #32]	@ (800092c <MX_USART2_UART_Init+0x90>)
 800090a:	f005 ff22 	bl	8006752 <HAL_UARTEx_SetRxFifoThreshold>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000914:	f000 f89c 	bl	8000a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_USART2_UART_Init+0x90>)
 800091a:	f005 fea3 	bl	8006664 <HAL_UARTEx_DisableFifoMode>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000924:	f000 f894 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	24000254 	.word	0x24000254
 8000930:	40004400 	.word	0x40004400

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000950:	4a2f      	ldr	r2, [pc, #188]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000968:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	4a28      	ldr	r2, [pc, #160]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000978:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	4a20      	ldr	r2, [pc, #128]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000996:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009aa:	4a19      	ldr	r2, [pc, #100]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	4a11      	ldr	r2, [pc, #68]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_GPIO_Init+0xdc>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <MX_GPIO_Init+0xe0>)
 80009e6:	f001 f8d5 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ea:	2302      	movs	r3, #2
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_GPIO_Init+0xe0>)
 8000a02:	f000 ff17 	bl	8001834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	@ 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	58024400 	.word	0x58024400
 8000a14:	58021000 	.word	0x58021000

08000a18 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e009      	b.n	8000a3e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	60ba      	str	r2, [r7, #8]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fe42 	bl	80006bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	dbf1      	blt.n	8000a2a <_write+0x12>
  }
  return len;
 8000a46:	687b      	ldr	r3, [r7, #4]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <mpu6500_init>:
extern I2C_HandleTypeDef hi2c1;
int8_t i2c_read_flag = 0;
float ax, ay, az;

void mpu6500_init()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af04      	add	r7, sp, #16
	 HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS <<1) + 0, 1, 100);
 8000a62:	2364      	movs	r3, #100	@ 0x64
 8000a64:	2201      	movs	r2, #1
 8000a66:	21d0      	movs	r1, #208	@ 0xd0
 8000a68:	483c      	ldr	r0, [pc, #240]	@ (8000b5c <mpu6500_init+0x100>)
 8000a6a:	f001 fb77 	bl	800215c <HAL_I2C_IsDeviceReady>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	  if (ret == HAL_OK)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d103      	bne.n	8000a80 <mpu6500_init+0x24>
	  {
		  printf("The device is ready \n");
 8000a78:	4839      	ldr	r0, [pc, #228]	@ (8000b60 <mpu6500_init+0x104>)
 8000a7a:	f006 fc5d 	bl	8007338 <puts>
 8000a7e:	e002      	b.n	8000a86 <mpu6500_init+0x2a>
	  }
	  else
	  {
		  printf("The device is not ready. CHeck cables \n ");
 8000a80:	4838      	ldr	r0, [pc, #224]	@ (8000b64 <mpu6500_init+0x108>)
 8000a82:	f006 fbe9 	bl	8007258 <iprintf>
	  }

	  uint8_t temp_data = FS_GYRO_500;
 8000a86:	2308      	movs	r3, #8
 8000a88:	71bb      	strb	r3, [r7, #6]

	  ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS <<1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 8000a8a:	2364      	movs	r3, #100	@ 0x64
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	1dbb      	adds	r3, r7, #6
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	221b      	movs	r2, #27
 8000a9a:	21d0      	movs	r1, #208	@ 0xd0
 8000a9c:	482f      	ldr	r0, [pc, #188]	@ (8000b5c <mpu6500_init+0x100>)
 8000a9e:	f001 f92f 	bl	8001d00 <HAL_I2C_Mem_Write>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]

	  if (ret == HAL_OK) {
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d103      	bne.n	8000ab4 <mpu6500_init+0x58>
		  printf( "Writing to register 27 \n");
 8000aac:	482e      	ldr	r0, [pc, #184]	@ (8000b68 <mpu6500_init+0x10c>)
 8000aae:	f006 fc43 	bl	8007338 <puts>
 8000ab2:	e002      	b.n	8000aba <mpu6500_init+0x5e>
	  }
	  else {
		  printf("No registers found");
 8000ab4:	482d      	ldr	r0, [pc, #180]	@ (8000b6c <mpu6500_init+0x110>)
 8000ab6:	f006 fbcf 	bl	8007258 <iprintf>
	  }

	  ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS <<1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 8000aba:	2364      	movs	r3, #100	@ 0x64
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	1dbb      	adds	r3, r7, #6
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	221b      	movs	r2, #27
 8000aca:	21d0      	movs	r1, #208	@ 0xd0
 8000acc:	4823      	ldr	r0, [pc, #140]	@ (8000b5c <mpu6500_init+0x100>)
 8000ace:	f001 f917 	bl	8001d00 <HAL_I2C_Mem_Write>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	  if (ret == HAL_OK)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d103      	bne.n	8000ae4 <mpu6500_init+0x88>
	    {
	  	  printf("Configuring gyroscope \n");
 8000adc:	4824      	ldr	r0, [pc, #144]	@ (8000b70 <mpu6500_init+0x114>)
 8000ade:	f006 fc2b 	bl	8007338 <puts>
 8000ae2:	e002      	b.n	8000aea <mpu6500_init+0x8e>
	    }
	    else
	    {
	  	  printf("Failed to configure gyroscope \n ");
 8000ae4:	4823      	ldr	r0, [pc, #140]	@ (8000b74 <mpu6500_init+0x118>)
 8000ae6:	f006 fbb7 	bl	8007258 <iprintf>
	    }

	  temp_data = FS_ACC_4G;
 8000aea:	2308      	movs	r3, #8
 8000aec:	71bb      	strb	r3, [r7, #6]

	  ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS <<1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, 100);
 8000aee:	2364      	movs	r3, #100	@ 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	1dbb      	adds	r3, r7, #6
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	221c      	movs	r2, #28
 8000afe:	21d0      	movs	r1, #208	@ 0xd0
 8000b00:	4816      	ldr	r0, [pc, #88]	@ (8000b5c <mpu6500_init+0x100>)
 8000b02:	f001 f8fd 	bl	8001d00 <HAL_I2C_Mem_Write>
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	  if (ret == HAL_OK)
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d103      	bne.n	8000b18 <mpu6500_init+0xbc>
		{
		  printf("Configuring accelerometer \n");
 8000b10:	4819      	ldr	r0, [pc, #100]	@ (8000b78 <mpu6500_init+0x11c>)
 8000b12:	f006 fc11 	bl	8007338 <puts>
 8000b16:	e002      	b.n	8000b1e <mpu6500_init+0xc2>
		}
		else
		{
		  printf("Failed to configure the accelerometer  \n ");
 8000b18:	4818      	ldr	r0, [pc, #96]	@ (8000b7c <mpu6500_init+0x120>)
 8000b1a:	f006 fb9d 	bl	8007258 <iprintf>
		}

	  uint8_t wake_cmd = 0x00;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	717b      	strb	r3, [r7, #5]
	  ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS <<1) + 0, REG_USR_CTRL, 1, &wake_cmd, 1, 100);
 8000b22:	2364      	movs	r3, #100	@ 0x64
 8000b24:	9302      	str	r3, [sp, #8]
 8000b26:	2301      	movs	r3, #1
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	1d7b      	adds	r3, r7, #5
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	226b      	movs	r2, #107	@ 0x6b
 8000b32:	21d0      	movs	r1, #208	@ 0xd0
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <mpu6500_init+0x100>)
 8000b36:	f001 f8e3 	bl	8001d00 <HAL_I2C_Mem_Write>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	  if (ret == HAL_OK)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d103      	bne.n	8000b4c <mpu6500_init+0xf0>
		{
		  printf("Exiting from sleep mode \n");
 8000b44:	480e      	ldr	r0, [pc, #56]	@ (8000b80 <mpu6500_init+0x124>)
 8000b46:	f006 fbf7 	bl	8007338 <puts>
		{
		  printf("Failed to exit from sleep mode \n ");
		}

//	  temp_data = 0;
}
 8000b4a:	e002      	b.n	8000b52 <mpu6500_init+0xf6>
		  printf("Failed to exit from sleep mode \n ");
 8000b4c:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <mpu6500_init+0x128>)
 8000b4e:	f006 fb83 	bl	8007258 <iprintf>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	24000200 	.word	0x24000200
 8000b60:	080091b8 	.word	0x080091b8
 8000b64:	080091d0 	.word	0x080091d0
 8000b68:	080091fc 	.word	0x080091fc
 8000b6c:	08009214 	.word	0x08009214
 8000b70:	08009228 	.word	0x08009228
 8000b74:	08009240 	.word	0x08009240
 8000b78:	08009264 	.word	0x08009264
 8000b7c:	08009280 	.word	0x08009280
 8000b80:	080092ac 	.word	0x080092ac
 8000b84:	080092c8 	.word	0x080092c8

08000b88 <mpu6500_read>:

void mpu6500_read()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b092      	sub	sp, #72	@ 0x48
 8000b8c:	af04      	add	r7, sp, #16
	uint8_t data[21];
	int16_t x_acc, y_acc, z_acc, temp, x_gyro, y_gyro, z_gyro;

	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS <<1), REG_DATA, 1, data, 22, 100);
 8000b8e:	2364      	movs	r3, #100	@ 0x64
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2316      	movs	r3, #22
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	463b      	mov	r3, r7
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	223b      	movs	r2, #59	@ 0x3b
 8000b9e:	21d0      	movs	r1, #208	@ 0xd0
 8000ba0:	487d      	ldr	r0, [pc, #500]	@ (8000d98 <mpu6500_read+0x210>)
 8000ba2:	f001 f9c1 	bl	8001f28 <HAL_I2C_Mem_Read>

	x_acc = (data[0] << 8)| data[1];
 8000ba6:	783b      	ldrb	r3, [r7, #0]
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	787b      	ldrb	r3, [r7, #1]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
	y_acc = (data[2] << 8) | data[3];
 8000bb6:	78bb      	ldrb	r3, [r7, #2]
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	86bb      	strh	r3, [r7, #52]	@ 0x34
	z_acc = (data[4] << 8) | data[5];
 8000bc6:	793b      	ldrb	r3, [r7, #4]
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	797b      	ldrb	r3, [r7, #5]
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	867b      	strh	r3, [r7, #50]	@ 0x32

	temp = (data[6] << 8) | data[7];
 8000bd6:	79bb      	ldrb	r3, [r7, #6]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	021b      	lsls	r3, r3, #8
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	863b      	strh	r3, [r7, #48]	@ 0x30
	x_gyro = (data[8] << 8) | data[9];
 8000be6:	7a3b      	ldrb	r3, [r7, #8]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	7a7b      	ldrb	r3, [r7, #9]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	y_gyro = (data[10] << 8) | data[11];
 8000bf6:	7abb      	ldrb	r3, [r7, #10]
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	b21a      	sxth	r2, r3
 8000bfe:	7afb      	ldrb	r3, [r7, #11]
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	z_gyro = (data[12] << 8) | data[13];
 8000c06:	7b3b      	ldrb	r3, [r7, #12]
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	7b7b      	ldrb	r3, [r7, #13]
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	857b      	strh	r3, [r7, #42]	@ 0x2a

	ax = x_acc / 8192.0;
 8000c16:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c22:	ed9f 5b57 	vldr	d5, [pc, #348]	@ 8000d80 <mpu6500_read+0x1f8>
 8000c26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8000d9c <mpu6500_read+0x214>)
 8000c30:	edc3 7a00 	vstr	s15, [r3]
	ay = y_acc / 8192.0;
 8000c34:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8000c38:	ee07 3a90 	vmov	s15, r3
 8000c3c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c40:	ed9f 5b4f 	vldr	d5, [pc, #316]	@ 8000d80 <mpu6500_read+0x1f8>
 8000c44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c4c:	4b54      	ldr	r3, [pc, #336]	@ (8000da0 <mpu6500_read+0x218>)
 8000c4e:	edc3 7a00 	vstr	s15, [r3]
	az = z_acc / 8192.0;
 8000c52:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000c56:	ee07 3a90 	vmov	s15, r3
 8000c5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c5e:	ed9f 5b48 	vldr	d5, [pc, #288]	@ 8000d80 <mpu6500_read+0x1f8>
 8000c62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8000da4 <mpu6500_read+0x21c>)
 8000c6c:	edc3 7a00 	vstr	s15, [r3]

	float gx = x_gyro / 65.5;
 8000c70:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000c74:	ee07 3a90 	vmov	s15, r3
 8000c78:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c7c:	ed9f 5b42 	vldr	d5, [pc, #264]	@ 8000d88 <mpu6500_read+0x200>
 8000c80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float gy = y_gyro / 65.5;
 8000c8c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c98:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000d88 <mpu6500_read+0x200>
 8000c9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ca4:	edc7 7a08 	vstr	s15, [r7, #32]
	float gz = z_gyro / 65.5;
 8000ca8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000cac:	ee07 3a90 	vmov	s15, r3
 8000cb0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cb4:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8000d88 <mpu6500_read+0x200>
 8000cb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cc0:	edc7 7a07 	vstr	s15, [r7, #28]

	float temp_data = (temp / 333.87) + 21.0;
 8000cc4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cd0:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 8000d90 <mpu6500_read+0x208>
 8000cd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cd8:	eeb3 6b05 	vmov.f64	d6, #53	@ 0x41a80000  21.0
 8000cdc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ce0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce4:	edc7 7a06 	vstr	s15, [r7, #24]

	printf("x axis acceleration: %.f g\n", ax);
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d9c <mpu6500_read+0x214>)
 8000cea:	edd3 7a00 	vldr	s15, [r3]
 8000cee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf2:	ec53 2b17 	vmov	r2, r3, d7
 8000cf6:	482c      	ldr	r0, [pc, #176]	@ (8000da8 <mpu6500_read+0x220>)
 8000cf8:	f006 faae 	bl	8007258 <iprintf>
	printf("y axis acceleration: %.2f g\n", ay);
 8000cfc:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <mpu6500_read+0x218>)
 8000cfe:	edd3 7a00 	vldr	s15, [r3]
 8000d02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d06:	ec53 2b17 	vmov	r2, r3, d7
 8000d0a:	4828      	ldr	r0, [pc, #160]	@ (8000dac <mpu6500_read+0x224>)
 8000d0c:	f006 faa4 	bl	8007258 <iprintf>
	printf("z axis acceleration: %.2f g\n", az);
 8000d10:	4b24      	ldr	r3, [pc, #144]	@ (8000da4 <mpu6500_read+0x21c>)
 8000d12:	edd3 7a00 	vldr	s15, [r3]
 8000d16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d1a:	ec53 2b17 	vmov	r2, r3, d7
 8000d1e:	4824      	ldr	r0, [pc, #144]	@ (8000db0 <mpu6500_read+0x228>)
 8000d20:	f006 fa9a 	bl	8007258 <iprintf>

	printf("Temperature: %.2f °C\n", temp_data);
 8000d24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d2c:	ec53 2b17 	vmov	r2, r3, d7
 8000d30:	4820      	ldr	r0, [pc, #128]	@ (8000db4 <mpu6500_read+0x22c>)
 8000d32:	f006 fa91 	bl	8007258 <iprintf>

	printf("x axis rotation: %.2f °/s\n", gx);
 8000d36:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d3e:	ec53 2b17 	vmov	r2, r3, d7
 8000d42:	481d      	ldr	r0, [pc, #116]	@ (8000db8 <mpu6500_read+0x230>)
 8000d44:	f006 fa88 	bl	8007258 <iprintf>
	printf("y axis rotation: %.2f °/s\n", gy);
 8000d48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d50:	ec53 2b17 	vmov	r2, r3, d7
 8000d54:	4819      	ldr	r0, [pc, #100]	@ (8000dbc <mpu6500_read+0x234>)
 8000d56:	f006 fa7f 	bl	8007258 <iprintf>
	printf("z axis rotation: %.2f °/s\n", gz);
 8000d5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d62:	ec53 2b17 	vmov	r2, r3, d7
 8000d66:	4816      	ldr	r0, [pc, #88]	@ (8000dc0 <mpu6500_read+0x238>)
 8000d68:	f006 fa76 	bl	8007258 <iprintf>

//	printf("x axis heading: %.2f °/s\n", x_mag);
//	printf("y axis heading: %.2f °/s\n", y_mag);
//	printf("z axis heading: %.2f °/s\n", z_mag);

	printf("\n");
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f006 fa85 	bl	800727c <putchar>
//
//	data_imu -> temp = ((int16_t)data2[6] << 8) + data2[7];
//	data_imu -> x_gyro = ((int16_t)data2[8] << 8) + data2[9];
//	data_imu -> y_gyro = ((int16_t)data2[10] << 8) + data2[11];
//	data_imu -> z_gyro = ((int16_t)data2[12] << 8) + data2[13];
}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	@ 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	f3af 8000 	nop.w
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40c00000 	.word	0x40c00000
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40506000 	.word	0x40506000
 8000d90:	851eb852 	.word	0x851eb852
 8000d94:	4074ddeb 	.word	0x4074ddeb
 8000d98:	24000200 	.word	0x24000200
 8000d9c:	240002e8 	.word	0x240002e8
 8000da0:	240002ec 	.word	0x240002ec
 8000da4:	240002f0 	.word	0x240002f0
 8000da8:	080092ec 	.word	0x080092ec
 8000dac:	08009308 	.word	0x08009308
 8000db0:	08009328 	.word	0x08009328
 8000db4:	08009348 	.word	0x08009348
 8000db8:	08009360 	.word	0x08009360
 8000dbc:	0800937c 	.word	0x0800937c
 8000dc0:	08009398 	.word	0x08009398

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_MspInit+0x30>)
 8000dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd0:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <HAL_MspInit+0x30>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	58024400 	.word	0x58024400

08000df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0ba      	sub	sp, #232	@ 0xe8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	22c0      	movs	r2, #192	@ 0xc0
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f006 fb6d 	bl	80074f8 <memset>
  if(hi2c->Instance==I2C1)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a27      	ldr	r2, [pc, #156]	@ (8000ec0 <HAL_I2C_MspInit+0xc8>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d146      	bne.n	8000eb6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e28:	f04f 0208 	mov.w	r2, #8
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fe0c 	bl	8003a5c <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e4a:	f7ff fe01 	bl	8000a50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <HAL_I2C_MspInit+0xcc>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e54:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec4 <HAL_I2C_MspInit+0xcc>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_I2C_MspInit+0xcc>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e74:	2312      	movs	r3, #18
 8000e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e86:	2304      	movs	r3, #4
 8000e88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <HAL_I2C_MspInit+0xd0>)
 8000e94:	f000 fcce 	bl	8001834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_I2C_MspInit+0xcc>)
 8000e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ec4 <HAL_I2C_MspInit+0xcc>)
 8000ea0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_I2C_MspInit+0xcc>)
 8000eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eb6:	bf00      	nop
 8000eb8:	37e8      	adds	r7, #232	@ 0xe8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58020400 	.word	0x58020400

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0be      	sub	sp, #248	@ 0xf8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	22c0      	movs	r2, #192	@ 0xc0
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f006 fb03 	bl	80074f8 <memset>
  if(huart->Instance==USART1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a5f      	ldr	r2, [pc, #380]	@ (8001074 <HAL_UART_MspInit+0x1a8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d16c      	bne.n	8000fd6 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000efc:	f04f 0201 	mov.w	r2, #1
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fda2 	bl	8003a5c <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f1e:	f7ff fd97 	bl	8000a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f22:	4b55      	ldr	r3, [pc, #340]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8000f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f28:	4a53      	ldr	r2, [pc, #332]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f32:	4b51      	ldr	r3, [pc, #324]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8000f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f38:	f003 0310 	and.w	r3, r3, #16
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b4d      	ldr	r3, [pc, #308]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f46:	4a4c      	ldr	r2, [pc, #304]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f50:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b46      	ldr	r3, [pc, #280]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f64:	4a44      	ldr	r2, [pc, #272]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6e:	4b42      	ldr	r3, [pc, #264]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f96:	2304      	movs	r3, #4
 8000f98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4836      	ldr	r0, [pc, #216]	@ (800107c <HAL_UART_MspInit+0x1b0>)
 8000fa4:	f000 fc46 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	482c      	ldr	r0, [pc, #176]	@ (8001080 <HAL_UART_MspInit+0x1b4>)
 8000fd0:	f000 fc30 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fd4:	e04a      	b.n	800106c <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a2a      	ldr	r2, [pc, #168]	@ (8001084 <HAL_UART_MspInit+0x1b8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d145      	bne.n	800106c <HAL_UART_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fe0:	f04f 0202 	mov.w	r2, #2
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fd30 	bl	8003a5c <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_UART_MspInit+0x13a>
      Error_Handler();
 8001002:	f7ff fd25 	bl	8000a50 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8001008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800100c:	4a1a      	ldr	r2, [pc, #104]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 800100e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001012:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001016:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8001018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800101c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102a:	4a13      	ldr	r2, [pc, #76]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001034:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <HAL_UART_MspInit+0x1ac>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001042:	230c      	movs	r3, #12
 8001044:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105a:	2307      	movs	r3, #7
 800105c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	@ (8001080 <HAL_UART_MspInit+0x1b4>)
 8001068:	f000 fbe4 	bl	8001834 <HAL_GPIO_Init>
}
 800106c:	bf00      	nop
 800106e:	37f8      	adds	r7, #248	@ 0xf8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40011000 	.word	0x40011000
 8001078:	58024400 	.word	0x58024400
 800107c:	58020400 	.word	0x58020400
 8001080:	58020000 	.word	0x58020000
 8001084:	40004400 	.word	0x40004400

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <NMI_Handler+0x4>

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <MemManage_Handler+0x4>

080010a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <UsageFault_Handler+0x4>

080010b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010de:	f000 fa45 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f9ba 	bl	8001464 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_kill>:

int _kill(int pid, int sig)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800110e:	f006 fa45 	bl	800759c <__errno>
 8001112:	4603      	mov	r3, r0
 8001114:	2216      	movs	r2, #22
 8001116:	601a      	str	r2, [r3, #0]
  return -1;
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_exit>:

void _exit (int status)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ffe7 	bl	8001104 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001136:	bf00      	nop
 8001138:	e7fd      	b.n	8001136 <_exit+0x12>

0800113a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e00a      	b.n	8001162 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800114c:	f3af 8000 	nop.w
 8001150:	4601      	mov	r1, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	60ba      	str	r2, [r7, #8]
 8001158:	b2ca      	uxtb	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	dbf0      	blt.n	800114c <_read+0x12>
  }

  return len;
 800116a:	687b      	ldr	r3, [r7, #4]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800119c:	605a      	str	r2, [r3, #4]
  return 0;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_isatty>:

int _isatty(int file)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	@ (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f006 f9c6 	bl	800759c <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	24080000 	.word	0x24080000
 800123c:	00000400 	.word	0x00000400
 8001240:	240002f4 	.word	0x240002f4
 8001244:	24000450 	.word	0x24000450

08001248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800124c:	4b43      	ldr	r3, [pc, #268]	@ (800135c <SystemInit+0x114>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001252:	4a42      	ldr	r2, [pc, #264]	@ (800135c <SystemInit+0x114>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800125c:	4b40      	ldr	r3, [pc, #256]	@ (8001360 <SystemInit+0x118>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	2b06      	cmp	r3, #6
 8001266:	d807      	bhi.n	8001278 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001268:	4b3d      	ldr	r3, [pc, #244]	@ (8001360 <SystemInit+0x118>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 030f 	bic.w	r3, r3, #15
 8001270:	4a3b      	ldr	r2, [pc, #236]	@ (8001360 <SystemInit+0x118>)
 8001272:	f043 0307 	orr.w	r3, r3, #7
 8001276:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001278:	4b3a      	ldr	r3, [pc, #232]	@ (8001364 <SystemInit+0x11c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a39      	ldr	r2, [pc, #228]	@ (8001364 <SystemInit+0x11c>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001284:	4b37      	ldr	r3, [pc, #220]	@ (8001364 <SystemInit+0x11c>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800128a:	4b36      	ldr	r3, [pc, #216]	@ (8001364 <SystemInit+0x11c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4935      	ldr	r1, [pc, #212]	@ (8001364 <SystemInit+0x11c>)
 8001290:	4b35      	ldr	r3, [pc, #212]	@ (8001368 <SystemInit+0x120>)
 8001292:	4013      	ands	r3, r2
 8001294:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001296:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <SystemInit+0x118>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001360 <SystemInit+0x118>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 030f 	bic.w	r3, r3, #15
 80012aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001360 <SystemInit+0x118>)
 80012ac:	f043 0307 	orr.w	r3, r3, #7
 80012b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <SystemInit+0x11c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001364 <SystemInit+0x11c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <SystemInit+0x11c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012c4:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <SystemInit+0x11c>)
 80012c6:	4a29      	ldr	r2, [pc, #164]	@ (800136c <SystemInit+0x124>)
 80012c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012ca:	4b26      	ldr	r3, [pc, #152]	@ (8001364 <SystemInit+0x11c>)
 80012cc:	4a28      	ldr	r2, [pc, #160]	@ (8001370 <SystemInit+0x128>)
 80012ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012d0:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <SystemInit+0x11c>)
 80012d2:	4a28      	ldr	r2, [pc, #160]	@ (8001374 <SystemInit+0x12c>)
 80012d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012d6:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <SystemInit+0x11c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012dc:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <SystemInit+0x11c>)
 80012de:	4a25      	ldr	r2, [pc, #148]	@ (8001374 <SystemInit+0x12c>)
 80012e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <SystemInit+0x11c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <SystemInit+0x11c>)
 80012ea:	4a22      	ldr	r2, [pc, #136]	@ (8001374 <SystemInit+0x12c>)
 80012ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <SystemInit+0x11c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <SystemInit+0x11c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001364 <SystemInit+0x11c>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <SystemInit+0x11c>)
 8001302:	2200      	movs	r2, #0
 8001304:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <SystemInit+0x130>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <SystemInit+0x134>)
 800130c:	4013      	ands	r3, r2
 800130e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001312:	d202      	bcs.n	800131a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001314:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <SystemInit+0x138>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <SystemInit+0x11c>)
 800131c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d113      	bne.n	8001350 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001328:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <SystemInit+0x11c>)
 800132a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800132e:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <SystemInit+0x11c>)
 8001330:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001334:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <SystemInit+0x13c>)
 800133a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800133e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <SystemInit+0x11c>)
 8001342:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001346:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <SystemInit+0x11c>)
 8001348:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800134c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	52002000 	.word	0x52002000
 8001364:	58024400 	.word	0x58024400
 8001368:	eaf6ed7f 	.word	0xeaf6ed7f
 800136c:	02020200 	.word	0x02020200
 8001370:	01ff0000 	.word	0x01ff0000
 8001374:	01010280 	.word	0x01010280
 8001378:	5c001000 	.word	0x5c001000
 800137c:	ffff0000 	.word	0xffff0000
 8001380:	51008108 	.word	0x51008108
 8001384:	52004000 	.word	0x52004000

08001388 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <ExitRun0Mode+0x2c>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4a08      	ldr	r2, [pc, #32]	@ (80013b4 <ExitRun0Mode+0x2c>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001398:	bf00      	nop
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <ExitRun0Mode+0x2c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f9      	beq.n	800139a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	58024800 	.word	0x58024800

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80013f4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80013bc:	f7ff ffe4 	bl	8001388 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013c0:	f7ff ff42 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	@ (80013fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ea:	f006 f8dd 	bl	80075a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff f98c 	bl	800070a <main>
  bx  lr
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013fc:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001400:	0800977c 	.word	0x0800977c
  ldr r2, =_sbss
 8001404:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001408:	24000450 	.word	0x24000450

0800140c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC3_IRQHandler>
	...

08001410 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d009      	beq.n	8001438 <BSP_LED_On+0x28>
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d006      	beq.n	8001438 <BSP_LED_On+0x28>
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d003      	beq.n	8001438 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001430:	f06f 0301 	mvn.w	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e00b      	b.n	8001450 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <BSP_LED_On+0x4c>)
 800143c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4a07      	ldr	r2, [pc, #28]	@ (8001460 <BSP_LED_On+0x50>)
 8001444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001448:	2201      	movs	r2, #1
 800144a:	4619      	mov	r1, r3
 800144c:	f000 fba2 	bl	8001b94 <HAL_GPIO_WritePin>
  }

  return ret;
 8001450:	68fb      	ldr	r3, [r7, #12]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000008 	.word	0x24000008
 8001460:	080093c4 	.word	0x080093c4

08001464 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <BSP_PB_IRQHandler+0x20>)
 8001474:	4413      	add	r3, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f9ac 	bl	80017d4 <HAL_EXTI_IRQHandler>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	240002f8 	.word	0x240002f8

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f96e 	bl	8001770 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001494:	f002 f90c 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_Init+0x68>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	4913      	ldr	r1, [pc, #76]	@ (80014f4 <HAL_Init+0x6c>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <HAL_Init+0x6c>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <HAL_Init+0x70>)
 80014ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014cc:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <HAL_Init+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 f814 	bl	8001500 <HAL_InitTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e002      	b.n	80014e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014e2:	f7ff fc6f 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	58024400 	.word	0x58024400
 80014f4:	080093b4 	.word	0x080093b4
 80014f8:	24000004 	.word	0x24000004
 80014fc:	24000000 	.word	0x24000000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_InitTick+0x60>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e021      	b.n	8001558 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <HAL_InitTick+0x64>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_InitTick+0x60>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f945 	bl	80017ba <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f91d 	bl	8001786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	@ (8001568 <HAL_InitTick+0x68>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	24000018 	.word	0x24000018
 8001564:	24000000 	.word	0x24000000
 8001568:	24000014 	.word	0x24000014

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	24000018 	.word	0x24000018
 8001590:	24000300 	.word	0x24000300

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	24000300 	.word	0x24000300

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	24000018 	.word	0x24000018

080015f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <HAL_GetREVID+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0c1b      	lsrs	r3, r3, #16
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	5c001000 	.word	0x5c001000

0800160c <__NVIC_SetPriorityGrouping>:
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <__NVIC_SetPriorityGrouping+0x40>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	4313      	orrs	r3, r2
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <__NVIC_SetPriorityGrouping+0x40>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00
 8001650:	05fa0000 	.word	0x05fa0000

08001654 <__NVIC_GetPriorityGrouping>:
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_SetPriority>:
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	@ (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	@ (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	@ 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <SysTick_Config>:
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800173c:	d301      	bcc.n	8001742 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800173e:	2301      	movs	r3, #1
 8001740:	e00f      	b.n	8001762 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <SysTick_Config+0x40>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174a:	210f      	movs	r1, #15
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f7ff ff8e 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001754:	4b05      	ldr	r3, [pc, #20]	@ (800176c <SysTick_Config+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175a:	4b04      	ldr	r3, [pc, #16]	@ (800176c <SysTick_Config+0x40>)
 800175c:	2207      	movs	r2, #7
 800175e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff47 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff5e 	bl	8001654 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff90 	bl	80016c4 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5f 	bl	8001670 <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffb2 	bl	800172c <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	2201      	movs	r2, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	011a      	lsls	r2, r3, #4
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <HAL_EXTI_IRQHandler+0x5c>)
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4798      	blx	r3
    }
  }
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	58000088 	.word	0x58000088

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	@ 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001842:	4b89      	ldr	r3, [pc, #548]	@ (8001a68 <HAL_GPIO_Init+0x234>)
 8001844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001846:	e194      	b.n	8001b72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8186 	beq.w	8001b6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d005      	beq.n	8001878 <HAL_GPIO_Init+0x44>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d130      	bne.n	80018da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ae:	2201      	movs	r2, #1
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 0201 	and.w	r2, r3, #1
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d017      	beq.n	8001916 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d123      	bne.n	800196a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	69b9      	ldr	r1, [r7, #24]
 8001966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0203 	and.w	r2, r3, #3
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80e0 	beq.w	8001b6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ac:	4b2f      	ldr	r3, [pc, #188]	@ (8001a6c <HAL_GPIO_Init+0x238>)
 80019ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019b2:	4a2e      	ldr	r2, [pc, #184]	@ (8001a6c <HAL_GPIO_Init+0x238>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019bc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a6c <HAL_GPIO_Init+0x238>)
 80019be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ca:	4a29      	ldr	r2, [pc, #164]	@ (8001a70 <HAL_GPIO_Init+0x23c>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a20      	ldr	r2, [pc, #128]	@ (8001a74 <HAL_GPIO_Init+0x240>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d052      	beq.n	8001a9c <HAL_GPIO_Init+0x268>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a78 <HAL_GPIO_Init+0x244>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d031      	beq.n	8001a62 <HAL_GPIO_Init+0x22e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a1e      	ldr	r2, [pc, #120]	@ (8001a7c <HAL_GPIO_Init+0x248>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d02b      	beq.n	8001a5e <HAL_GPIO_Init+0x22a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a1d      	ldr	r2, [pc, #116]	@ (8001a80 <HAL_GPIO_Init+0x24c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d025      	beq.n	8001a5a <HAL_GPIO_Init+0x226>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <HAL_GPIO_Init+0x250>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d01f      	beq.n	8001a56 <HAL_GPIO_Init+0x222>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a1b      	ldr	r2, [pc, #108]	@ (8001a88 <HAL_GPIO_Init+0x254>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d019      	beq.n	8001a52 <HAL_GPIO_Init+0x21e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a1a      	ldr	r2, [pc, #104]	@ (8001a8c <HAL_GPIO_Init+0x258>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_GPIO_Init+0x21a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a19      	ldr	r2, [pc, #100]	@ (8001a90 <HAL_GPIO_Init+0x25c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00d      	beq.n	8001a4a <HAL_GPIO_Init+0x216>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <HAL_GPIO_Init+0x260>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x212>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a17      	ldr	r2, [pc, #92]	@ (8001a98 <HAL_GPIO_Init+0x264>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_GPIO_Init+0x20e>
 8001a3e:	2309      	movs	r3, #9
 8001a40:	e02d      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a42:	230a      	movs	r3, #10
 8001a44:	e02b      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a46:	2308      	movs	r3, #8
 8001a48:	e029      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e027      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a4e:	2306      	movs	r3, #6
 8001a50:	e025      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a52:	2305      	movs	r3, #5
 8001a54:	e023      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e021      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e01f      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e01d      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e01b      	b.n	8001a9e <HAL_GPIO_Init+0x26a>
 8001a66:	bf00      	nop
 8001a68:	58000080 	.word	0x58000080
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	58000400 	.word	0x58000400
 8001a74:	58020000 	.word	0x58020000
 8001a78:	58020400 	.word	0x58020400
 8001a7c:	58020800 	.word	0x58020800
 8001a80:	58020c00 	.word	0x58020c00
 8001a84:	58021000 	.word	0x58021000
 8001a88:	58021400 	.word	0x58021400
 8001a8c:	58021800 	.word	0x58021800
 8001a90:	58021c00 	.word	0x58021c00
 8001a94:	58022000 	.word	0x58022000
 8001a98:	58022400 	.word	0x58022400
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aae:	4938      	ldr	r1, [pc, #224]	@ (8001b90 <HAL_GPIO_Init+0x35c>)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ae2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f47f ae63 	bne.w	8001848 <HAL_GPIO_Init+0x14>
  }
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3724      	adds	r7, #36	@ 0x24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	58000400 	.word	0x58000400

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e08b      	b.n	8001cf2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff f902 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2224      	movs	r2, #36	@ 0x24
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e006      	b.n	8001c50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d108      	bne.n	8001c6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	e007      	b.n	8001c7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_I2C_Init+0x134>)
 8001c86:	430b      	orrs	r3, r1
 8001c88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69d9      	ldr	r1, [r3, #28]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1a      	ldr	r2, [r3, #32]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	02008000 	.word	0x02008000

08001d00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	4608      	mov	r0, r1
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	817b      	strh	r3, [r7, #10]
 8001d12:	460b      	mov	r3, r1
 8001d14:	813b      	strh	r3, [r7, #8]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	f040 80f9 	bne.w	8001f1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_I2C_Mem_Write+0x34>
 8001d2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d3a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0ed      	b.n	8001f1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_I2C_Mem_Write+0x4e>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e0e6      	b.n	8001f1c <HAL_I2C_Mem_Write+0x21c>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d56:	f7ff fc1d 	bl	8001594 <HAL_GetTick>
 8001d5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2319      	movs	r3, #25
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 fbc9 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0d1      	b.n	8001f1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2221      	movs	r2, #33	@ 0x21
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2240      	movs	r2, #64	@ 0x40
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da0:	88f8      	ldrh	r0, [r7, #6]
 8001da2:	893a      	ldrh	r2, [r7, #8]
 8001da4:	8979      	ldrh	r1, [r7, #10]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4603      	mov	r3, r0
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fad9 	bl	8002368 <I2C_RequestMemoryWrite>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0a9      	b.n	8001f1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2bff      	cmp	r3, #255	@ 0xff
 8001dd0:	d90e      	bls.n	8001df0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	22ff      	movs	r2, #255	@ 0xff
 8001dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	8979      	ldrh	r1, [r7, #10]
 8001de0:	2300      	movs	r3, #0
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 fd4d 	bl	8002888 <I2C_TransferConfig>
 8001dee:	e00f      	b.n	8001e10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	8979      	ldrh	r1, [r7, #10]
 8001e02:	2300      	movs	r3, #0
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fd3c 	bl	8002888 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fbcc 	bl	80025b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e07b      	b.n	8001f1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d034      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x1c8>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d130      	bne.n	8001ec8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2180      	movs	r1, #128	@ 0x80
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 fb45 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e04d      	b.n	8001f1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2bff      	cmp	r3, #255	@ 0xff
 8001e88:	d90e      	bls.n	8001ea8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	22ff      	movs	r2, #255	@ 0xff
 8001e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	8979      	ldrh	r1, [r7, #10]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fcf1 	bl	8002888 <I2C_TransferConfig>
 8001ea6:	e00f      	b.n	8001ec8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	8979      	ldrh	r1, [r7, #10]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fce0 	bl	8002888 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d19e      	bne.n	8001e10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fbb2 	bl	8002640 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e01a      	b.n	8001f1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2220      	movs	r2, #32
 8001eec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_I2C_Mem_Write+0x224>)
 8001efa:	400b      	ands	r3, r1
 8001efc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
  }
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	fe00e800 	.word	0xfe00e800

08001f28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	4608      	mov	r0, r1
 8001f32:	4611      	mov	r1, r2
 8001f34:	461a      	mov	r2, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	817b      	strh	r3, [r7, #10]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	813b      	strh	r3, [r7, #8]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	f040 80fd 	bne.w	800214a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <HAL_I2C_Mem_Read+0x34>
 8001f56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f62:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0f1      	b.n	800214c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_I2C_Mem_Read+0x4e>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e0ea      	b.n	800214c <HAL_I2C_Mem_Read+0x224>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f7e:	f7ff fb09 	bl	8001594 <HAL_GetTick>
 8001f82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2319      	movs	r3, #25
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fab5 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0d5      	b.n	800214c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2222      	movs	r2, #34	@ 0x22
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2240      	movs	r2, #64	@ 0x40
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a3a      	ldr	r2, [r7, #32]
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fc8:	88f8      	ldrh	r0, [r7, #6]
 8001fca:	893a      	ldrh	r2, [r7, #8]
 8001fcc:	8979      	ldrh	r1, [r7, #10]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fa19 	bl	8002410 <I2C_RequestMemoryRead>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0ad      	b.n	800214c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2bff      	cmp	r3, #255	@ 0xff
 8001ff8:	d90e      	bls.n	8002018 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	22ff      	movs	r2, #255	@ 0xff
 8001ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002004:	b2da      	uxtb	r2, r3
 8002006:	8979      	ldrh	r1, [r7, #10]
 8002008:	4b52      	ldr	r3, [pc, #328]	@ (8002154 <HAL_I2C_Mem_Read+0x22c>)
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fc39 	bl	8002888 <I2C_TransferConfig>
 8002016:	e00f      	b.n	8002038 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002026:	b2da      	uxtb	r2, r3
 8002028:	8979      	ldrh	r1, [r7, #10]
 800202a:	4b4a      	ldr	r3, [pc, #296]	@ (8002154 <HAL_I2C_Mem_Read+0x22c>)
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fc28 	bl	8002888 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800203e:	2200      	movs	r2, #0
 8002040:	2104      	movs	r1, #4
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fa5c 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e07c      	b.n	800214c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d034      	beq.n	80020f8 <HAL_I2C_Mem_Read+0x1d0>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	d130      	bne.n	80020f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209c:	2200      	movs	r2, #0
 800209e:	2180      	movs	r1, #128	@ 0x80
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fa2d 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e04d      	b.n	800214c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2bff      	cmp	r3, #255	@ 0xff
 80020b8:	d90e      	bls.n	80020d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	22ff      	movs	r2, #255	@ 0xff
 80020be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	8979      	ldrh	r1, [r7, #10]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fbd9 	bl	8002888 <I2C_TransferConfig>
 80020d6:	e00f      	b.n	80020f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	8979      	ldrh	r1, [r7, #10]
 80020ea:	2300      	movs	r3, #0
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fbc8 	bl	8002888 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d19a      	bne.n	8002038 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fa9a 	bl	8002640 <I2C_WaitOnSTOPFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e01a      	b.n	800214c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2220      	movs	r2, #32
 800211c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_I2C_Mem_Read+0x230>)
 800212a:	400b      	ands	r3, r1
 800212c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
  }
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	80002400 	.word	0x80002400
 8002158:	fe00e800 	.word	0xfe00e800

0800215c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	@ 0x28
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	460b      	mov	r3, r1
 800216a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b20      	cmp	r3, #32
 800217e:	f040 80e9 	bne.w	8002354 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800218c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002190:	d101      	bne.n	8002196 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8002192:	2302      	movs	r3, #2
 8002194:	e0df      	b.n	8002356 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_I2C_IsDeviceReady+0x48>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0d8      	b.n	8002356 <HAL_I2C_IsDeviceReady+0x1fa>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2224      	movs	r2, #36	@ 0x24
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_I2C_IsDeviceReady+0x72>
 80021c2:	897b      	ldrh	r3, [r7, #10]
 80021c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021c8:	4b65      	ldr	r3, [pc, #404]	@ (8002360 <HAL_I2C_IsDeviceReady+0x204>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	e004      	b.n	80021d8 <HAL_I2C_IsDeviceReady+0x7c>
 80021ce:	897b      	ldrh	r3, [r7, #10]
 80021d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021d4:	4b63      	ldr	r3, [pc, #396]	@ (8002364 <HAL_I2C_IsDeviceReady+0x208>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80021de:	f7ff f9d9 	bl	8001594 <HAL_GetTick>
 80021e2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	bf0c      	ite	eq
 80021f2:	2301      	moveq	r3, #1
 80021f4:	2300      	movne	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b10      	cmp	r3, #16
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002210:	e034      	b.n	800227c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d01a      	beq.n	8002250 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7ff f9bb 	bl	8001594 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <HAL_I2C_IsDeviceReady+0xd4>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10f      	bne.n	8002250 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e082      	b.n	8002356 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b20      	cmp	r3, #32
 800225c:	bf0c      	ite	eq
 800225e:	2301      	moveq	r3, #1
 8002260:	2300      	movne	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b10      	cmp	r3, #16
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800227c:	7fbb      	ldrb	r3, [r7, #30]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_I2C_IsDeviceReady+0x12c>
 8002282:	7f7b      	ldrb	r3, [r7, #29]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0c4      	beq.n	8002212 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b10      	cmp	r3, #16
 8002294:	d027      	beq.n	80022e6 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2200      	movs	r2, #0
 800229e:	2120      	movs	r1, #32
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f92d 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d107      	bne.n	80022c4 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80022c2:	e026      	b.n	8002312 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	77fb      	strb	r3, [r7, #31]
 80022c8:	e023      	b.n	8002312 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2220      	movs	r2, #32
 80022d0:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e037      	b.n	8002356 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2210      	movs	r2, #16
 80022ec:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2200      	movs	r2, #0
 80022f6:	2120      	movs	r1, #32
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f901 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	77fb      	strb	r3, [r7, #31]
 8002308:	e003      	b.n	8002312 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2220      	movs	r2, #32
 8002310:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	d904      	bls.n	800232a <HAL_I2C_IsDeviceReady+0x1ce>
 8002320:	7ffb      	ldrb	r3, [r7, #31]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	f63f af43 	bhi.w	80021ba <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 8002354:	2302      	movs	r3, #2
  }
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	02002000 	.word	0x02002000
 8002364:	02002800 	.word	0x02002800

08002368 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	460b      	mov	r3, r1
 800237c:	813b      	strh	r3, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	8979      	ldrh	r1, [r7, #10]
 8002388:	4b20      	ldr	r3, [pc, #128]	@ (800240c <I2C_RequestMemoryWrite+0xa4>)
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fa79 	bl	8002888 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	69b9      	ldr	r1, [r7, #24]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f909 	bl	80025b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e02c      	b.n	8002404 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023b0:	893b      	ldrh	r3, [r7, #8]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80023ba:	e015      	b.n	80023e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023bc:	893b      	ldrh	r3, [r7, #8]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	69b9      	ldr	r1, [r7, #24]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f8ef 	bl	80025b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e012      	b.n	8002404 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023de:	893b      	ldrh	r3, [r7, #8]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2200      	movs	r2, #0
 80023f0:	2180      	movs	r1, #128	@ 0x80
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f884 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	80002000 	.word	0x80002000

08002410 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	4603      	mov	r3, r0
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	460b      	mov	r3, r1
 8002424:	813b      	strh	r3, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	8979      	ldrh	r1, [r7, #10]
 8002430:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <I2C_RequestMemoryRead+0xa4>)
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2300      	movs	r3, #0
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fa26 	bl	8002888 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f8b6 	bl	80025b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e02c      	b.n	80024aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002456:	893b      	ldrh	r3, [r7, #8]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002460:	e015      	b.n	800248e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002462:	893b      	ldrh	r3, [r7, #8]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	b29b      	uxth	r3, r3
 8002468:	b2da      	uxtb	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f89c 	bl	80025b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e012      	b.n	80024aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002484:	893b      	ldrh	r3, [r7, #8]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2200      	movs	r2, #0
 8002496:	2140      	movs	r1, #64	@ 0x40
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f831 	bl	8002500 <I2C_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	80002000 	.word	0x80002000

080024b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d103      	bne.n	80024d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2200      	movs	r2, #0
 80024d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d007      	beq.n	80024f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	619a      	str	r2, [r3, #24]
  }
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002510:	e03b      	b.n	800258a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	6839      	ldr	r1, [r7, #0]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f8d6 	bl	80026c8 <I2C_IsErrorOccurred>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e041      	b.n	80025aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d02d      	beq.n	800258a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252e:	f7ff f831 	bl	8001594 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d302      	bcc.n	8002544 <I2C_WaitOnFlagUntilTimeout+0x44>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d122      	bne.n	800258a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	4013      	ands	r3, r2
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	429a      	cmp	r2, r3
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	429a      	cmp	r2, r3
 8002560:	d113      	bne.n	800258a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00f      	b.n	80025aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699a      	ldr	r2, [r3, #24]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4013      	ands	r3, r2
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d0b4      	beq.n	8002512 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025be:	e033      	b.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f87f 	bl	80026c8 <I2C_IsErrorOccurred>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e031      	b.n	8002638 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025da:	d025      	beq.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025dc:	f7fe ffda 	bl	8001594 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d302      	bcc.n	80025f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d11a      	bne.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d013      	beq.n	8002628 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002604:	f043 0220 	orr.w	r2, r3, #32
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e007      	b.n	8002638 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d1c4      	bne.n	80025c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800264c:	e02f      	b.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f838 	bl	80026c8 <I2C_IsErrorOccurred>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e02d      	b.n	80026be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002662:	f7fe ff97 	bl	8001594 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11a      	bne.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b20      	cmp	r3, #32
 8002684:	d013      	beq.n	80026ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	f043 0220 	orr.w	r2, r3, #32
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e007      	b.n	80026be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d1c8      	bne.n	800264e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	@ 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d068      	beq.n	80027c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2210      	movs	r2, #16
 80026fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026fc:	e049      	b.n	8002792 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d045      	beq.n	8002792 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7fe ff45 	bl	8001594 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_IsErrorOccurred+0x54>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d13a      	bne.n	8002792 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002726:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800272e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800273a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800273e:	d121      	bne.n	8002784 <I2C_IsErrorOccurred+0xbc>
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002746:	d01d      	beq.n	8002784 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b20      	cmp	r3, #32
 800274c:	d01a      	beq.n	8002784 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800275c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800275e:	f7fe ff19 	bl	8001594 <HAL_GetTick>
 8002762:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002764:	e00e      	b.n	8002784 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002766:	f7fe ff15 	bl	8001594 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b19      	cmp	r3, #25
 8002772:	d907      	bls.n	8002784 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f043 0320 	orr.w	r3, r3, #32
 800277a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002782:	e006      	b.n	8002792 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b20      	cmp	r3, #32
 8002790:	d1e9      	bne.n	8002766 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d003      	beq.n	80027a8 <I2C_IsErrorOccurred+0xe0>
 80027a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0aa      	beq.n	80026fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2220      	movs	r2, #32
 80027b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800280a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800282c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01c      	beq.n	8002876 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7ff fe3b 	bl	80024b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <I2C_IsErrorOccurred+0x1bc>)
 800284e:	400b      	ands	r3, r1
 8002850:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800287a:	4618      	mov	r0, r3
 800287c:	3728      	adds	r7, #40	@ 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	fe00e800 	.word	0xfe00e800

08002888 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	4613      	mov	r3, r2
 8002898:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028a0:	7a7b      	ldrb	r3, [r7, #9]
 80028a2:	041b      	lsls	r3, r3, #16
 80028a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028a8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028b6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	0d5b      	lsrs	r3, r3, #21
 80028c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028c6:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <I2C_TransferConfig+0x60>)
 80028c8:	430b      	orrs	r3, r1
 80028ca:	43db      	mvns	r3, r3
 80028cc:	ea02 0103 	and.w	r1, r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	03ff63ff 	.word	0x03ff63ff

080028ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d138      	bne.n	8002974 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800290c:	2302      	movs	r3, #2
 800290e:	e032      	b.n	8002976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2224      	movs	r2, #36	@ 0x24
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800293e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b20      	cmp	r3, #32
 8002996:	d139      	bne.n	8002a0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e033      	b.n	8002a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2224      	movs	r2, #36	@ 0x24
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a24:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d00a      	beq.n	8002a46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a30:	4b16      	ldr	r3, [pc, #88]	@ (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e01f      	b.n	8002a82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e01d      	b.n	8002a82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a46:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f023 0207 	bic.w	r2, r3, #7
 8002a4e:	490f      	ldr	r1, [pc, #60]	@ (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a56:	f7fe fd9d 	bl	8001594 <HAL_GetTick>
 8002a5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a5c:	e009      	b.n	8002a72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a5e:	f7fe fd99 	bl	8001594 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a6c:	d901      	bls.n	8002a72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e007      	b.n	8002a82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a72:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <HAL_PWREx_ConfigSupply+0x70>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a7e:	d1ee      	bne.n	8002a5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	58024800 	.word	0x58024800

08002a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	@ 0x30
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f000 bc48 	b.w	8003334 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8088 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	4b99      	ldr	r3, [pc, #612]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002abc:	4b96      	ldr	r3, [pc, #600]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d007      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x48>
 8002ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aca:	2b18      	cmp	r3, #24
 8002acc:	d111      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62>
 8002ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d06d      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x130>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d169      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f000 bc21 	b.w	8003334 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x7a>
 8002afc:	4b86      	ldr	r3, [pc, #536]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a85      	ldr	r2, [pc, #532]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e02e      	b.n	8002b68 <HAL_RCC_OscConfig+0xd8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x9c>
 8002b12:	4b81      	ldr	r3, [pc, #516]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a80      	ldr	r2, [pc, #512]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7d      	ldr	r2, [pc, #500]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e01d      	b.n	8002b68 <HAL_RCC_OscConfig+0xd8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0xc0>
 8002b36:	4b78      	ldr	r3, [pc, #480]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a77      	ldr	r2, [pc, #476]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b75      	ldr	r3, [pc, #468]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a74      	ldr	r2, [pc, #464]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0xd8>
 8002b50:	4b71      	ldr	r3, [pc, #452]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a70      	ldr	r2, [pc, #448]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b6e      	ldr	r3, [pc, #440]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6d      	ldr	r2, [pc, #436]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fd10 	bl	8001594 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe fd0c 	bl	8001594 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	@ 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e3d4      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0xe8>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fcfc 	bl	8001594 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fcf8 	bl	8001594 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	@ 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e3c0      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bb2:	4b59      	ldr	r3, [pc, #356]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x110>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80ca 	beq.w	8002d64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd0:	4b51      	ldr	r3, [pc, #324]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bda:	4b4f      	ldr	r3, [pc, #316]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x166>
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	2b18      	cmp	r3, #24
 8002bea:	d156      	bne.n	8002c9a <HAL_RCC_OscConfig+0x20a>
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d151      	bne.n	8002c9a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf6:	4b48      	ldr	r3, [pc, #288]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_RCC_OscConfig+0x17e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e392      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c0e:	4b42      	ldr	r3, [pc, #264]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0219 	bic.w	r2, r3, #25
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	493f      	ldr	r1, [pc, #252]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe fcb8 	bl	8001594 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe fcb4 	bl	8001594 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e37c      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3a:	4b37      	ldr	r3, [pc, #220]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	f7fe fcd5 	bl	80015f4 <HAL_GetREVID>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d817      	bhi.n	8002c84 <HAL_RCC_OscConfig+0x1f4>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b40      	cmp	r3, #64	@ 0x40
 8002c5a:	d108      	bne.n	8002c6e <HAL_RCC_OscConfig+0x1de>
 8002c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c64:	4a2c      	ldr	r2, [pc, #176]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c6a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c6c:	e07a      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	031b      	lsls	r3, r3, #12
 8002c7c:	4926      	ldr	r1, [pc, #152]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c82:	e06f      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	4921      	ldr	r1, [pc, #132]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c98:	e064      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d047      	beq.n	8002d32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0219 	bic.w	r2, r3, #25
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	491a      	ldr	r1, [pc, #104]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fc6e 	bl	8001594 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fc6a 	bl	8001594 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e332      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cce:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	f7fe fc8b 	bl	80015f4 <HAL_GetREVID>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d819      	bhi.n	8002d1c <HAL_RCC_OscConfig+0x28c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b40      	cmp	r3, #64	@ 0x40
 8002cee:	d108      	bne.n	8002d02 <HAL_RCC_OscConfig+0x272>
 8002cf0:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002cf8:	4a07      	ldr	r2, [pc, #28]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfe:	6053      	str	r3, [r2, #4]
 8002d00:	e030      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
 8002d02:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	031b      	lsls	r3, r3, #12
 8002d10:	4901      	ldr	r1, [pc, #4]	@ (8002d18 <HAL_RCC_OscConfig+0x288>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
 8002d16:	e025      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	4997      	ldr	r1, [pc, #604]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
 8002d30:	e018      	b.n	8002d64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b95      	ldr	r3, [pc, #596]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a94      	ldr	r2, [pc, #592]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fc29 	bl	8001594 <HAL_GetTick>
 8002d42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe fc25 	bl	8001594 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e2ed      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d58:	4b8b      	ldr	r3, [pc, #556]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80a9 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	4b85      	ldr	r3, [pc, #532]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d7c:	4b82      	ldr	r3, [pc, #520]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d007      	beq.n	8002d98 <HAL_RCC_OscConfig+0x308>
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b18      	cmp	r3, #24
 8002d8c:	d13a      	bne.n	8002e04 <HAL_RCC_OscConfig+0x374>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d135      	bne.n	8002e04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d98:	4b7b      	ldr	r3, [pc, #492]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_OscConfig+0x320>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b80      	cmp	r3, #128	@ 0x80
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e2c1      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002db0:	f7fe fc20 	bl	80015f4 <HAL_GetREVID>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d817      	bhi.n	8002dee <HAL_RCC_OscConfig+0x35e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x348>
 8002dc6:	4b70      	ldr	r3, [pc, #448]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002dce:	4a6e      	ldr	r2, [pc, #440]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002dd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002dd4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dd6:	e075      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	069b      	lsls	r3, r3, #26
 8002de6:	4968      	ldr	r1, [pc, #416]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dec:	e06a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dee:	4b66      	ldr	r3, [pc, #408]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	4962      	ldr	r1, [pc, #392]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e02:	e05f      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d042      	beq.n	8002e92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5d      	ldr	r2, [pc, #372]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fbbc 	bl	8001594 <HAL_GetTick>
 8002e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e20:	f7fe fbb8 	bl	8001594 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e280      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e32:	4b55      	ldr	r3, [pc, #340]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e3e:	f7fe fbd9 	bl	80015f4 <HAL_GetREVID>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d817      	bhi.n	8002e7c <HAL_RCC_OscConfig+0x3ec>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d108      	bne.n	8002e66 <HAL_RCC_OscConfig+0x3d6>
 8002e54:	4b4c      	ldr	r3, [pc, #304]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e62:	6053      	str	r3, [r2, #4]
 8002e64:	e02e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
 8002e66:	4b48      	ldr	r3, [pc, #288]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	069b      	lsls	r3, r3, #26
 8002e74:	4944      	ldr	r1, [pc, #272]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
 8002e7a:	e023      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
 8002e7c:	4b42      	ldr	r3, [pc, #264]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	061b      	lsls	r3, r3, #24
 8002e8a:	493f      	ldr	r1, [pc, #252]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60cb      	str	r3, [r1, #12]
 8002e90:	e018      	b.n	8002ec4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e92:	4b3d      	ldr	r3, [pc, #244]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3c      	ldr	r2, [pc, #240]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fb79 	bl	8001594 <HAL_GetTick>
 8002ea2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fb75 	bl	8001594 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e23d      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002eb8:	4b33      	ldr	r3, [pc, #204]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d036      	beq.n	8002f3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d019      	beq.n	8002f0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002edc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fb56 	bl	8001594 <HAL_GetTick>
 8002ee8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fe fb52 	bl	8001594 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e21a      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002efe:	4b22      	ldr	r3, [pc, #136]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x45c>
 8002f0a:	e018      	b.n	8002f3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f10:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fe fb3c 	bl	8001594 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fe fb38 	bl	8001594 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e200      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f32:	4b15      	ldr	r3, [pc, #84]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d039      	beq.n	8002fbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a0c      	ldr	r2, [pc, #48]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fb19 	bl	8001594 <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f66:	f7fe fb15 	bl	8001594 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e1dd      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f78:	4b03      	ldr	r3, [pc, #12]	@ (8002f88 <HAL_RCC_OscConfig+0x4f8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4d6>
 8002f84:	e01b      	b.n	8002fbe <HAL_RCC_OscConfig+0x52e>
 8002f86:	bf00      	nop
 8002f88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f8c:	4b9b      	ldr	r3, [pc, #620]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a9a      	ldr	r2, [pc, #616]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8002f92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f98:	f7fe fafc 	bl	8001594 <HAL_GetTick>
 8002f9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa0:	f7fe faf8 	bl	8001594 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1c0      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fb2:	4b92      	ldr	r3, [pc, #584]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8081 	beq.w	80030ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fcc:	4b8c      	ldr	r3, [pc, #560]	@ (8003200 <HAL_RCC_OscConfig+0x770>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a8b      	ldr	r2, [pc, #556]	@ (8003200 <HAL_RCC_OscConfig+0x770>)
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd8:	f7fe fadc 	bl	8001594 <HAL_GetTick>
 8002fdc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe0:	f7fe fad8 	bl	8001594 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	@ 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1a0      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ff2:	4b83      	ldr	r3, [pc, #524]	@ (8003200 <HAL_RCC_OscConfig+0x770>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d106      	bne.n	8003014 <HAL_RCC_OscConfig+0x584>
 8003006:	4b7d      	ldr	r3, [pc, #500]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	4a7c      	ldr	r2, [pc, #496]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	@ 0x70
 8003012:	e02d      	b.n	8003070 <HAL_RCC_OscConfig+0x5e0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10c      	bne.n	8003036 <HAL_RCC_OscConfig+0x5a6>
 800301c:	4b77      	ldr	r3, [pc, #476]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003020:	4a76      	ldr	r2, [pc, #472]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	@ 0x70
 8003028:	4b74      	ldr	r3, [pc, #464]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302c:	4a73      	ldr	r2, [pc, #460]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800302e:	f023 0304 	bic.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	@ 0x70
 8003034:	e01c      	b.n	8003070 <HAL_RCC_OscConfig+0x5e0>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b05      	cmp	r3, #5
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0x5c8>
 800303e:	4b6f      	ldr	r3, [pc, #444]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003042:	4a6e      	ldr	r2, [pc, #440]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6713      	str	r3, [r2, #112]	@ 0x70
 800304a:	4b6c      	ldr	r3, [pc, #432]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	4a6b      	ldr	r2, [pc, #428]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6713      	str	r3, [r2, #112]	@ 0x70
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0x5e0>
 8003058:	4b68      	ldr	r3, [pc, #416]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305c:	4a67      	ldr	r2, [pc, #412]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	6713      	str	r3, [r2, #112]	@ 0x70
 8003064:	4b65      	ldr	r3, [pc, #404]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003068:	4a64      	ldr	r2, [pc, #400]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800306a:	f023 0304 	bic.w	r3, r3, #4
 800306e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fe fa8c 	bl	8001594 <HAL_GetTick>
 800307c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800307e:	e00a      	b.n	8003096 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe fa88 	bl	8001594 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e14e      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003096:	4b59      	ldr	r3, [pc, #356]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ee      	beq.n	8003080 <HAL_RCC_OscConfig+0x5f0>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fa76 	bl	8001594 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7fe fa72 	bl	8001594 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e138      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030c2:	4b4e      	ldr	r3, [pc, #312]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ee      	bne.n	80030ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 812d 	beq.w	8003332 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030d8:	4b48      	ldr	r3, [pc, #288]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030e0:	2b18      	cmp	r3, #24
 80030e2:	f000 80bd 	beq.w	8003260 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	f040 809e 	bne.w	800322c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f0:	4b42      	ldr	r3, [pc, #264]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a41      	ldr	r2, [pc, #260]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80030f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fa4a 	bl	8001594 <HAL_GetTick>
 8003100:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe fa46 	bl	8001594 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e10e      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003116:	4b39      	ldr	r3, [pc, #228]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003122:	4b36      	ldr	r3, [pc, #216]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003124:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003126:	4b37      	ldr	r3, [pc, #220]	@ (8003204 <HAL_RCC_OscConfig+0x774>)
 8003128:	4013      	ands	r3, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	430a      	orrs	r2, r1
 8003136:	4931      	ldr	r1, [pc, #196]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003138:	4313      	orrs	r3, r2
 800313a:	628b      	str	r3, [r1, #40]	@ 0x28
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	3b01      	subs	r3, #1
 8003142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314a:	3b01      	subs	r3, #1
 800314c:	025b      	lsls	r3, r3, #9
 800314e:	b29b      	uxth	r3, r3
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003156:	3b01      	subs	r3, #1
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003164:	3b01      	subs	r3, #1
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800316c:	4923      	ldr	r1, [pc, #140]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800316e:	4313      	orrs	r3, r2
 8003170:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003172:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	4a21      	ldr	r2, [pc, #132]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800317e:	4b1f      	ldr	r3, [pc, #124]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003182:	4b21      	ldr	r3, [pc, #132]	@ (8003208 <HAL_RCC_OscConfig+0x778>)
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800318a:	00d2      	lsls	r2, r2, #3
 800318c:	491b      	ldr	r1, [pc, #108]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 800318e:	4313      	orrs	r3, r2
 8003190:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003192:	4b1a      	ldr	r3, [pc, #104]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	f023 020c 	bic.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	4917      	ldr	r1, [pc, #92]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031a4:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	f023 0202 	bic.w	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b0:	4912      	ldr	r1, [pc, #72]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031b6:	4b11      	ldr	r3, [pc, #68]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ba:	4a10      	ldr	r2, [pc, #64]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c2:	4b0e      	ldr	r3, [pc, #56]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031ce:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80031da:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	4a07      	ldr	r2, [pc, #28]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <HAL_RCC_OscConfig+0x76c>)
 80031ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe f9cf 	bl	8001594 <HAL_GetTick>
 80031f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031f8:	e011      	b.n	800321e <HAL_RCC_OscConfig+0x78e>
 80031fa:	bf00      	nop
 80031fc:	58024400 	.word	0x58024400
 8003200:	58024800 	.word	0x58024800
 8003204:	fffffc0c 	.word	0xfffffc0c
 8003208:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe f9c2 	bl	8001594 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e08a      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800321e:	4b47      	ldr	r3, [pc, #284]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x77c>
 800322a:	e082      	b.n	8003332 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322c:	4b43      	ldr	r3, [pc, #268]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a42      	ldr	r2, [pc, #264]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe f9ac 	bl	8001594 <HAL_GetTick>
 800323c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe f9a8 	bl	8001594 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e070      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003252:	4b3a      	ldr	r3, [pc, #232]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x7b0>
 800325e:	e068      	b.n	8003332 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003260:	4b36      	ldr	r3, [pc, #216]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003266:	4b35      	ldr	r3, [pc, #212]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	2b01      	cmp	r3, #1
 8003272:	d031      	beq.n	80032d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f003 0203 	and.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d12a      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d122      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800329e:	429a      	cmp	r2, r3
 80032a0:	d11a      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	0a5b      	lsrs	r3, r3, #9
 80032a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d111      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	0c1b      	lsrs	r3, r3, #16
 80032b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d108      	bne.n	80032d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	0e1b      	lsrs	r3, r3, #24
 80032ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e02b      	b.n	8003334 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032dc:	4b17      	ldr	r3, [pc, #92]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 80032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d01f      	beq.n	8003332 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032f2:	4b12      	ldr	r3, [pc, #72]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	4a11      	ldr	r2, [pc, #68]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032fe:	f7fe f949 	bl	8001594 <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003304:	bf00      	nop
 8003306:	f7fe f945 	bl	8001594 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	4293      	cmp	r3, r2
 8003310:	d0f9      	beq.n	8003306 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003312:	4b0a      	ldr	r3, [pc, #40]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003316:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <HAL_RCC_OscConfig+0x8b0>)
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800331e:	00d2      	lsls	r2, r2, #3
 8003320:	4906      	ldr	r1, [pc, #24]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003322:	4313      	orrs	r3, r2
 8003324:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003326:	4b05      	ldr	r3, [pc, #20]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	4a04      	ldr	r2, [pc, #16]	@ (800333c <HAL_RCC_OscConfig+0x8ac>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3730      	adds	r7, #48	@ 0x30
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	58024400 	.word	0x58024400
 8003340:	ffff0007 	.word	0xffff0007

08003344 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e19c      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b8a      	ldr	r3, [pc, #552]	@ (8003584 <HAL_RCC_ClockConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d910      	bls.n	8003388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b87      	ldr	r3, [pc, #540]	@ (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 020f 	bic.w	r2, r3, #15
 800336e:	4985      	ldr	r1, [pc, #532]	@ (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b83      	ldr	r3, [pc, #524]	@ (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e184      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d010      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	4b7b      	ldr	r3, [pc, #492]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d908      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033a4:	4b78      	ldr	r3, [pc, #480]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	4975      	ldr	r1, [pc, #468]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d010      	beq.n	80033e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	4b70      	ldr	r3, [pc, #448]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d908      	bls.n	80033e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	496a      	ldr	r1, [pc, #424]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	4b64      	ldr	r3, [pc, #400]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d908      	bls.n	8003412 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003400:	4b61      	ldr	r3, [pc, #388]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	495e      	ldr	r1, [pc, #376]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 800340e:	4313      	orrs	r3, r2
 8003410:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	4b59      	ldr	r3, [pc, #356]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800342a:	429a      	cmp	r2, r3
 800342c:	d908      	bls.n	8003440 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800342e:	4b56      	ldr	r3, [pc, #344]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4953      	ldr	r1, [pc, #332]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 800343c:	4313      	orrs	r3, r2
 800343e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d010      	beq.n	800346e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	4b4d      	ldr	r3, [pc, #308]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	429a      	cmp	r2, r3
 800345a:	d908      	bls.n	800346e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345c:	4b4a      	ldr	r3, [pc, #296]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f023 020f 	bic.w	r2, r3, #15
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4947      	ldr	r1, [pc, #284]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 800346a:	4313      	orrs	r3, r2
 800346c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d055      	beq.n	8003526 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800347a:	4b43      	ldr	r3, [pc, #268]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	4940      	ldr	r1, [pc, #256]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003488:	4313      	orrs	r3, r2
 800348a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003494:	4b3c      	ldr	r3, [pc, #240]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d121      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0f6      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034ac:	4b36      	ldr	r3, [pc, #216]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0ea      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034c4:	4b30      	ldr	r3, [pc, #192]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0de      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0d6      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e4:	4b28      	ldr	r3, [pc, #160]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f023 0207 	bic.w	r2, r3, #7
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4925      	ldr	r1, [pc, #148]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f6:	f7fe f84d 	bl	8001594 <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fe:	f7fe f849 	bl	8001594 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0be      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003514:	4b1c      	ldr	r3, [pc, #112]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	429a      	cmp	r2, r3
 8003524:	d1eb      	bne.n	80034fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d010      	beq.n	8003554 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	4b14      	ldr	r3, [pc, #80]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	429a      	cmp	r2, r3
 8003540:	d208      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003542:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f023 020f 	bic.w	r2, r3, #15
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	490e      	ldr	r1, [pc, #56]	@ (8003588 <HAL_RCC_ClockConfig+0x244>)
 8003550:	4313      	orrs	r3, r2
 8003552:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003554:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d214      	bcs.n	800358c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b08      	ldr	r3, [pc, #32]	@ (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 020f 	bic.w	r2, r3, #15
 800356a:	4906      	ldr	r1, [pc, #24]	@ (8003584 <HAL_RCC_ClockConfig+0x240>)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <HAL_RCC_ClockConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e086      	b.n	8003692 <HAL_RCC_ClockConfig+0x34e>
 8003584:	52002000 	.word	0x52002000
 8003588:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	4b3f      	ldr	r3, [pc, #252]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d208      	bcs.n	80035ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035a8:	4b3c      	ldr	r3, [pc, #240]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	4939      	ldr	r1, [pc, #228]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d010      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	4b34      	ldr	r3, [pc, #208]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d208      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035d6:	4b31      	ldr	r3, [pc, #196]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	492e      	ldr	r1, [pc, #184]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	4b28      	ldr	r3, [pc, #160]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003600:	429a      	cmp	r2, r3
 8003602:	d208      	bcs.n	8003616 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003604:	4b25      	ldr	r3, [pc, #148]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	4922      	ldr	r1, [pc, #136]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 8003612:	4313      	orrs	r3, r2
 8003614:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d010      	beq.n	8003644 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	4b1d      	ldr	r3, [pc, #116]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800362e:	429a      	cmp	r2, r3
 8003630:	d208      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003632:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4917      	ldr	r1, [pc, #92]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 8003640:	4313      	orrs	r3, r2
 8003642:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003644:	f000 f834 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b14      	ldr	r3, [pc, #80]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	4912      	ldr	r1, [pc, #72]	@ (80036a0 <HAL_RCC_ClockConfig+0x35c>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003662:	4b0e      	ldr	r3, [pc, #56]	@ (800369c <HAL_RCC_ClockConfig+0x358>)
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	4a0d      	ldr	r2, [pc, #52]	@ (80036a0 <HAL_RCC_ClockConfig+0x35c>)
 800366c:	5cd3      	ldrb	r3, [r2, r3]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
 8003678:	4a0a      	ldr	r2, [pc, #40]	@ (80036a4 <HAL_RCC_ClockConfig+0x360>)
 800367a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800367c:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <HAL_RCC_ClockConfig+0x364>)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <HAL_RCC_ClockConfig+0x368>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd ff3a 	bl	8001500 <HAL_InitTick>
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	58024400 	.word	0x58024400
 80036a0:	080093b4 	.word	0x080093b4
 80036a4:	24000004 	.word	0x24000004
 80036a8:	24000000 	.word	0x24000000
 80036ac:	24000014 	.word	0x24000014

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	@ 0x24
 80036b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b6:	4bb3      	ldr	r3, [pc, #716]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036be:	2b18      	cmp	r3, #24
 80036c0:	f200 8155 	bhi.w	800396e <HAL_RCC_GetSysClockFreq+0x2be>
 80036c4:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	08003731 	.word	0x08003731
 80036d0:	0800396f 	.word	0x0800396f
 80036d4:	0800396f 	.word	0x0800396f
 80036d8:	0800396f 	.word	0x0800396f
 80036dc:	0800396f 	.word	0x0800396f
 80036e0:	0800396f 	.word	0x0800396f
 80036e4:	0800396f 	.word	0x0800396f
 80036e8:	0800396f 	.word	0x0800396f
 80036ec:	08003757 	.word	0x08003757
 80036f0:	0800396f 	.word	0x0800396f
 80036f4:	0800396f 	.word	0x0800396f
 80036f8:	0800396f 	.word	0x0800396f
 80036fc:	0800396f 	.word	0x0800396f
 8003700:	0800396f 	.word	0x0800396f
 8003704:	0800396f 	.word	0x0800396f
 8003708:	0800396f 	.word	0x0800396f
 800370c:	0800375d 	.word	0x0800375d
 8003710:	0800396f 	.word	0x0800396f
 8003714:	0800396f 	.word	0x0800396f
 8003718:	0800396f 	.word	0x0800396f
 800371c:	0800396f 	.word	0x0800396f
 8003720:	0800396f 	.word	0x0800396f
 8003724:	0800396f 	.word	0x0800396f
 8003728:	0800396f 	.word	0x0800396f
 800372c:	08003763 	.word	0x08003763
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003730:	4b94      	ldr	r3, [pc, #592]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800373c:	4b91      	ldr	r3, [pc, #580]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	4a90      	ldr	r2, [pc, #576]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
 800374c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800374e:	e111      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003750:	4b8d      	ldr	r3, [pc, #564]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003752:	61bb      	str	r3, [r7, #24]
      break;
 8003754:	e10e      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003756:	4b8d      	ldr	r3, [pc, #564]	@ (800398c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003758:	61bb      	str	r3, [r7, #24]
      break;
 800375a:	e10b      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800375c:	4b8c      	ldr	r3, [pc, #560]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800375e:	61bb      	str	r3, [r7, #24]
      break;
 8003760:	e108      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003762:	4b88      	ldr	r3, [pc, #544]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800376c:	4b85      	ldr	r3, [pc, #532]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003776:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003778:	4b82      	ldr	r3, [pc, #520]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003782:	4b80      	ldr	r3, [pc, #512]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80e1 	beq.w	8003968 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	f000 8083 	beq.w	80038b4 <HAL_RCC_GetSysClockFreq+0x204>
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	f200 80a1 	bhi.w	80038f8 <HAL_RCC_GetSysClockFreq+0x248>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x114>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d056      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037c2:	e099      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02d      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	08db      	lsrs	r3, r3, #3
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	4a6b      	ldr	r2, [pc, #428]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
 80037e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fa:	4b62      	ldr	r3, [pc, #392]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380a:	ed97 6a02 	vldr	s12, [r7, #8]
 800380e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800381e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800382a:	e087      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003998 <HAL_RCC_GetSysClockFreq+0x2e8>
 800383a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383e:	4b51      	ldr	r3, [pc, #324]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003852:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800386e:	e065      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800399c <HAL_RCC_GetSysClockFreq+0x2ec>
 800387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003882:	4b40      	ldr	r3, [pc, #256]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003892:	ed97 6a02 	vldr	s12, [r7, #8]
 8003896:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 800389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038b2:	e043      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80039a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038f6:	e021      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800399c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b1e      	ldr	r3, [pc, #120]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a02 	vldr	s12, [r7, #8]
 800391e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003994 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800393a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800393c:	4b11      	ldr	r3, [pc, #68]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	0a5b      	lsrs	r3, r3, #9
 8003942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003946:	3301      	adds	r3, #1
 8003948:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003954:	edd7 6a07 	vldr	s13, [r7, #28]
 8003958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003960:	ee17 3a90 	vmov	r3, s15
 8003964:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003966:	e005      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
      break;
 800396c:	e002      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800396e:	4b07      	ldr	r3, [pc, #28]	@ (800398c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003970:	61bb      	str	r3, [r7, #24]
      break;
 8003972:	bf00      	nop
  }

  return sysclockfreq;
 8003974:	69bb      	ldr	r3, [r7, #24]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3724      	adds	r7, #36	@ 0x24
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	58024400 	.word	0x58024400
 8003988:	03d09000 	.word	0x03d09000
 800398c:	003d0900 	.word	0x003d0900
 8003990:	007a1200 	.word	0x007a1200
 8003994:	46000000 	.word	0x46000000
 8003998:	4c742400 	.word	0x4c742400
 800399c:	4a742400 	.word	0x4a742400
 80039a0:	4af42400 	.word	0x4af42400

080039a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039aa:	f7ff fe81 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490f      	ldr	r1, [pc, #60]	@ (80039f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039c8:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	4a09      	ldr	r2, [pc, #36]	@ (80039f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a07      	ldr	r2, [pc, #28]	@ (80039fc <HAL_RCC_GetHCLKFreq+0x58>)
 80039e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039e2:	4a07      	ldr	r2, [pc, #28]	@ (8003a00 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <HAL_RCC_GetHCLKFreq+0x58>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	58024400 	.word	0x58024400
 80039f8:	080093b4 	.word	0x080093b4
 80039fc:	24000004 	.word	0x24000004
 8003a00:	24000000 	.word	0x24000000

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a08:	f7ff ffcc 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4904      	ldr	r1, [pc, #16]	@ (8003a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	080093b4 	.word	0x080093b4

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a34:	f7ff ffb6 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4904      	ldr	r1, [pc, #16]	@ (8003a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	58024400 	.word	0x58024400
 8003a58:	080093b4 	.word	0x080093b4

08003a5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a60:	b0ca      	sub	sp, #296	@ 0x128
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a80:	2500      	movs	r5, #0
 8003a82:	ea54 0305 	orrs.w	r3, r4, r5
 8003a86:	d049      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a92:	d02f      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a98:	d828      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a9e:	d01a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003aa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aa4:	d822      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003aaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aae:	d007      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ab0:	e01c      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab2:	4bb8      	ldr	r3, [pc, #736]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	4ab7      	ldr	r2, [pc, #732]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003abe:	e01a      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fc8f 	bl	80053ec <RCCEx_PLL2_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ad4:	e00f      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	3328      	adds	r3, #40	@ 0x28
 8003adc:	2102      	movs	r1, #2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 fd36 	bl	8005550 <RCCEx_PLL3_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003aea:	e004      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003afe:	4ba5      	ldr	r3, [pc, #660]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b0c:	4aa1      	ldr	r2, [pc, #644]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b12:	e003      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003b28:	f04f 0900 	mov.w	r9, #0
 8003b2c:	ea58 0309 	orrs.w	r3, r8, r9
 8003b30:	d047      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d82a      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b59 	.word	0x08003b59
 8003b48:	08003b67 	.word	0x08003b67
 8003b4c:	08003b7d 	.word	0x08003b7d
 8003b50:	08003b9b 	.word	0x08003b9b
 8003b54:	08003b9b 	.word	0x08003b9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b58:	4b8e      	ldr	r3, [pc, #568]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	4a8d      	ldr	r2, [pc, #564]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b64:	e01a      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fc3c 	bl	80053ec <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b7a:	e00f      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b80:	3328      	adds	r3, #40	@ 0x28
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 fce3 	bl	8005550 <RCCEx_PLL3_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b90:	e004      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b98:	e000      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba8:	f023 0107 	bic.w	r1, r3, #7
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	4a78      	ldr	r2, [pc, #480]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bb8:	e003      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003bce:	f04f 0b00 	mov.w	fp, #0
 8003bd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003bd6:	d04c      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be2:	d030      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003be8:	d829      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bec:	d02d      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bf0:	d825      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bf2:	2b80      	cmp	r3, #128	@ 0x80
 8003bf4:	d018      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003bf6:	2b80      	cmp	r3, #128	@ 0x80
 8003bf8:	d821      	bhi.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003bfe:	2b40      	cmp	r3, #64	@ 0x40
 8003c00:	d007      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c02:	e01c      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c04:	4b63      	ldr	r3, [pc, #396]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	4a62      	ldr	r2, [pc, #392]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c10:	e01c      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	3308      	adds	r3, #8
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 fbe6 	bl	80053ec <RCCEx_PLL2_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c26:	e011      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	3328      	adds	r3, #40	@ 0x28
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 fc8d 	bl	8005550 <RCCEx_PLL3_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c3c:	e006      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c44:	e002      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c54:	4b4f      	ldr	r3, [pc, #316]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c62:	4a4c      	ldr	r2, [pc, #304]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c68:	e003      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c7e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003c88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	d053      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c9e:	d035      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ca0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ca4:	d82e      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ca6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003caa:	d031      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cb0:	d828      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cb6:	d01a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cbc:	d822      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003cc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cc6:	d007      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003cc8:	e01c      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cca:	4b32      	ldr	r3, [pc, #200]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	4a31      	ldr	r2, [pc, #196]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cd6:	e01c      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cdc:	3308      	adds	r3, #8
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fb83 	bl	80053ec <RCCEx_PLL2_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cec:	e011      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	3328      	adds	r3, #40	@ 0x28
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 fc2a 	bl	8005550 <RCCEx_PLL3_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d02:	e006      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d0a:	e002      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d0c:	bf00      	nop
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d30:	e003      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d056      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d66:	d038      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d6c:	d831      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d72:	d034      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003d74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d78:	d82b      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d7e:	d01d      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d84:	d825      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d006      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d90:	e01f      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d92:	bf00      	nop
 8003d94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d98:	4ba2      	ldr	r3, [pc, #648]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	4aa1      	ldr	r2, [pc, #644]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003da4:	e01c      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	3308      	adds	r3, #8
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 fb1c 	bl	80053ec <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003dba:	e011      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	3328      	adds	r3, #40	@ 0x28
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 fbc3 	bl	8005550 <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dd0:	e006      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dd8:	e002      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10b      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003de8:	4b8e      	ldr	r3, [pc, #568]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003df8:	4a8a      	ldr	r2, [pc, #552]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d03a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	2b30      	cmp	r3, #48	@ 0x30
 8003e30:	d01f      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e32:	2b30      	cmp	r3, #48	@ 0x30
 8003e34:	d819      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d00c      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d815      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d019      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d111      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e46:	4b77      	ldr	r3, [pc, #476]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	4a76      	ldr	r2, [pc, #472]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e52:	e011      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	3308      	adds	r3, #8
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 fac5 	bl	80053ec <RCCEx_PLL2_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e70:	e002      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e72:	bf00      	nop
 8003e74:	e000      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e80:	4b68      	ldr	r3, [pc, #416]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8e:	4a65      	ldr	r2, [pc, #404]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e94:	e003      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003eaa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	d051      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec8:	d035      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003eca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ece:	d82e      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ed0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ed4:	d031      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ed6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003eda:	d828      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee0:	d01a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee6:	d822      	bhi.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef0:	d007      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ef2:	e01c      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f00:	e01c      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f06:	3308      	adds	r3, #8
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f001 fa6e 	bl	80053ec <RCCEx_PLL2_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f16:	e011      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	3328      	adds	r3, #40	@ 0x28
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 fb15 	bl	8005550 <RCCEx_PLL3_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f2c:	e006      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f34:	e002      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f44:	4b37      	ldr	r3, [pc, #220]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f48:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	4a34      	ldr	r2, [pc, #208]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f58:	e003      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f72:	2300      	movs	r3, #0
 8003f74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	d056      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f8c:	d033      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f92:	d82c      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f98:	d02f      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f9e:	d826      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fa0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fa4:	d02b      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003fa6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003faa:	d820      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fb0:	d012      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fb6:	d81a      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d022      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc0:	d115      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 fa0e 	bl	80053ec <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fd6:	e015      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fdc:	3328      	adds	r3, #40	@ 0x28
 8003fde:	2101      	movs	r1, #1
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 fab5 	bl	8005550 <RCCEx_PLL3_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fec:	e00a      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff4:	e006      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e004      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10d      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800400e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004010:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800401a:	4a02      	ldr	r2, [pc, #8]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800401c:	430b      	orrs	r3, r1
 800401e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004022:	bf00      	nop
 8004024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800403c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004046:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d055      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800405c:	d033      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800405e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004062:	d82c      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004068:	d02f      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406e:	d826      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004070:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004074:	d02b      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004076:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800407a:	d820      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800407c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004080:	d012      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004086:	d81a      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d022      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800408c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004090:	d115      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	3308      	adds	r3, #8
 8004098:	2101      	movs	r1, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f001 f9a6 	bl	80053ec <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040a6:	e015      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	3328      	adds	r3, #40	@ 0x28
 80040ae:	2101      	movs	r1, #1
 80040b0:	4618      	mov	r0, r3
 80040b2:	f001 fa4d 	bl	8005550 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040bc:	e00a      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c4:	e006      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040c6:	bf00      	nop
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040dc:	4ba3      	ldr	r3, [pc, #652]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040ec:	4a9f      	ldr	r2, [pc, #636]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004108:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d037      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004126:	d00e      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800412c:	d816      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d018      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004136:	d111      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	4b8c      	ldr	r3, [pc, #560]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	4a8b      	ldr	r2, [pc, #556]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004144:	e00f      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	3308      	adds	r3, #8
 800414c:	2101      	movs	r1, #1
 800414e:	4618      	mov	r0, r3
 8004150:	f001 f94c 	bl	80053ec <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800415a:	e004      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10a      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800416e:	4b7f      	ldr	r3, [pc, #508]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004172:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	4a7b      	ldr	r2, [pc, #492]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800417e:	430b      	orrs	r3, r1
 8004180:	6513      	str	r3, [r2, #80]	@ 0x50
 8004182:	e003      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d039      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d81c      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80041b6:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041f9 	.word	0x080041f9
 80041c0:	080041cd 	.word	0x080041cd
 80041c4:	080041db 	.word	0x080041db
 80041c8:	080041f9 	.word	0x080041f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041cc:	4b67      	ldr	r3, [pc, #412]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	4a66      	ldr	r2, [pc, #408]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041d8:	e00f      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	3308      	adds	r3, #8
 80041e0:	2102      	movs	r1, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 f902 	bl	80053ec <RCCEx_PLL2_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041ee:	e004      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80041f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004202:	4b5a      	ldr	r3, [pc, #360]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004206:	f023 0103 	bic.w	r1, r3, #3
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004210:	4a56      	ldr	r2, [pc, #344]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004212:	430b      	orrs	r3, r1
 8004214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004216:	e003      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800422c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004236:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800423a:	460b      	mov	r3, r1
 800423c:	4313      	orrs	r3, r2
 800423e:	f000 809f 	beq.w	8004380 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004242:	4b4b      	ldr	r3, [pc, #300]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a4a      	ldr	r2, [pc, #296]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800424e:	f7fd f9a1 	bl	8001594 <HAL_GetTick>
 8004252:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004256:	e00b      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004258:	f7fd f99c 	bl	8001594 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b64      	cmp	r3, #100	@ 0x64
 8004266:	d903      	bls.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800426e:	e005      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004270:	4b3f      	ldr	r3, [pc, #252]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ed      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800427c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004280:	2b00      	cmp	r3, #0
 8004282:	d179      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004284:	4b39      	ldr	r3, [pc, #228]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004286:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004290:	4053      	eors	r3, r2
 8004292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004296:	2b00      	cmp	r3, #0
 8004298:	d015      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800429a:	4b34      	ldr	r3, [pc, #208]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042a6:	4b31      	ldr	r3, [pc, #196]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042aa:	4a30      	ldr	r2, [pc, #192]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042b2:	4b2e      	ldr	r3, [pc, #184]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	4a2d      	ldr	r2, [pc, #180]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042be:	4a2b      	ldr	r2, [pc, #172]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042d2:	d118      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd f95e 	bl	8001594 <HAL_GetTick>
 80042d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042dc:	e00d      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fd f959 	bl	8001594 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042e8:	1ad2      	subs	r2, r2, r3
 80042ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d903      	bls.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80042f8:	e005      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042fa:	4b1c      	ldr	r3, [pc, #112]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0eb      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430a:	2b00      	cmp	r3, #0
 800430c:	d129      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800431e:	d10e      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004320:	4b12      	ldr	r3, [pc, #72]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004330:	091a      	lsrs	r2, r3, #4
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004334:	4013      	ands	r3, r2
 8004336:	4a0d      	ldr	r2, [pc, #52]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004338:	430b      	orrs	r3, r1
 800433a:	6113      	str	r3, [r2, #16]
 800433c:	e005      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800433e:	4b0b      	ldr	r3, [pc, #44]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	4a0a      	ldr	r2, [pc, #40]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004344:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004348:	6113      	str	r3, [r2, #16]
 800434a:	4b08      	ldr	r3, [pc, #32]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800434c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435a:	4a04      	ldr	r2, [pc, #16]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800435c:	430b      	orrs	r3, r1
 800435e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004360:	e00e      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800436a:	e009      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800436c:	58024400 	.word	0x58024400
 8004370:	58024800 	.word	0x58024800
 8004374:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800437c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f002 0301 	and.w	r3, r2, #1
 800438c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004396:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800439a:	460b      	mov	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	f000 8089 	beq.w	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043a8:	2b28      	cmp	r3, #40	@ 0x28
 80043aa:	d86b      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80043ac:	a201      	add	r2, pc, #4	@ (adr r2, 80043b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	0800448d 	.word	0x0800448d
 80043b8:	08004485 	.word	0x08004485
 80043bc:	08004485 	.word	0x08004485
 80043c0:	08004485 	.word	0x08004485
 80043c4:	08004485 	.word	0x08004485
 80043c8:	08004485 	.word	0x08004485
 80043cc:	08004485 	.word	0x08004485
 80043d0:	08004485 	.word	0x08004485
 80043d4:	08004459 	.word	0x08004459
 80043d8:	08004485 	.word	0x08004485
 80043dc:	08004485 	.word	0x08004485
 80043e0:	08004485 	.word	0x08004485
 80043e4:	08004485 	.word	0x08004485
 80043e8:	08004485 	.word	0x08004485
 80043ec:	08004485 	.word	0x08004485
 80043f0:	08004485 	.word	0x08004485
 80043f4:	0800446f 	.word	0x0800446f
 80043f8:	08004485 	.word	0x08004485
 80043fc:	08004485 	.word	0x08004485
 8004400:	08004485 	.word	0x08004485
 8004404:	08004485 	.word	0x08004485
 8004408:	08004485 	.word	0x08004485
 800440c:	08004485 	.word	0x08004485
 8004410:	08004485 	.word	0x08004485
 8004414:	0800448d 	.word	0x0800448d
 8004418:	08004485 	.word	0x08004485
 800441c:	08004485 	.word	0x08004485
 8004420:	08004485 	.word	0x08004485
 8004424:	08004485 	.word	0x08004485
 8004428:	08004485 	.word	0x08004485
 800442c:	08004485 	.word	0x08004485
 8004430:	08004485 	.word	0x08004485
 8004434:	0800448d 	.word	0x0800448d
 8004438:	08004485 	.word	0x08004485
 800443c:	08004485 	.word	0x08004485
 8004440:	08004485 	.word	0x08004485
 8004444:	08004485 	.word	0x08004485
 8004448:	08004485 	.word	0x08004485
 800444c:	08004485 	.word	0x08004485
 8004450:	08004485 	.word	0x08004485
 8004454:	0800448d 	.word	0x0800448d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	3308      	adds	r3, #8
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f000 ffc3 	bl	80053ec <RCCEx_PLL2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800446c:	e00f      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004472:	3328      	adds	r3, #40	@ 0x28
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f001 f86a 	bl	8005550 <RCCEx_PLL3_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004496:	4bbf      	ldr	r3, [pc, #764]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044a4:	4abb      	ldr	r2, [pc, #748]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044a6:	430b      	orrs	r3, r1
 80044a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80044aa:	e003      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f002 0302 	and.w	r3, r2, #2
 80044c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044c4:	2300      	movs	r3, #0
 80044c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044ce:	460b      	mov	r3, r1
 80044d0:	4313      	orrs	r3, r2
 80044d2:	d041      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d824      	bhi.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80044de:	a201      	add	r2, pc, #4	@ (adr r2, 80044e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	08004531 	.word	0x08004531
 80044e8:	080044fd 	.word	0x080044fd
 80044ec:	08004513 	.word	0x08004513
 80044f0:	08004531 	.word	0x08004531
 80044f4:	08004531 	.word	0x08004531
 80044f8:	08004531 	.word	0x08004531
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	3308      	adds	r3, #8
 8004502:	2101      	movs	r1, #1
 8004504:	4618      	mov	r0, r3
 8004506:	f000 ff71 	bl	80053ec <RCCEx_PLL2_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004510:	e00f      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	3328      	adds	r3, #40	@ 0x28
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f818 	bl	8005550 <RCCEx_PLL3_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004526:	e004      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800452e:	e000      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800453a:	4b96      	ldr	r3, [pc, #600]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800453c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453e:	f023 0107 	bic.w	r1, r3, #7
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004546:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004548:	4a92      	ldr	r2, [pc, #584]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800454a:	430b      	orrs	r3, r1
 800454c:	6553      	str	r3, [r2, #84]	@ 0x54
 800454e:	e003      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f002 0304 	and.w	r3, r2, #4
 8004564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004568:	2300      	movs	r3, #0
 800456a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800456e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004572:	460b      	mov	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	d044      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004580:	2b05      	cmp	r3, #5
 8004582:	d825      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004584:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	080045d9 	.word	0x080045d9
 8004590:	080045a5 	.word	0x080045a5
 8004594:	080045bb 	.word	0x080045bb
 8004598:	080045d9 	.word	0x080045d9
 800459c:	080045d9 	.word	0x080045d9
 80045a0:	080045d9 	.word	0x080045d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a8:	3308      	adds	r3, #8
 80045aa:	2101      	movs	r1, #1
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 ff1d 	bl	80053ec <RCCEx_PLL2_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045b8:	e00f      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045be:	3328      	adds	r3, #40	@ 0x28
 80045c0:	2101      	movs	r1, #1
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 ffc4 	bl	8005550 <RCCEx_PLL3_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045ce:	e004      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80045d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10b      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e6:	f023 0107 	bic.w	r1, r3, #7
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f2:	4a68      	ldr	r2, [pc, #416]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80045f8:	e003      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f002 0320 	and.w	r3, r2, #32
 800460e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004612:	2300      	movs	r3, #0
 8004614:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004618:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800461c:	460b      	mov	r3, r1
 800461e:	4313      	orrs	r3, r2
 8004620:	d055      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800462e:	d033      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004630:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004634:	d82c      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463a:	d02f      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004640:	d826      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004642:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004646:	d02b      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004648:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800464c:	d820      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800464e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004652:	d012      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004658:	d81a      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d022      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800465e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004662:	d115      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	3308      	adds	r3, #8
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f000 febd 	bl	80053ec <RCCEx_PLL2_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004678:	e015      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	3328      	adds	r3, #40	@ 0x28
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f000 ff64 	bl	8005550 <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800468e:	e00a      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004696:	e006      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004698:	bf00      	nop
 800469a:	e004      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800469c:	bf00      	nop
 800469e:	e002      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046a0:	bf00      	nop
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ae:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046be:	4a35      	ldr	r2, [pc, #212]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80046c4:	e003      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80046da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046de:	2300      	movs	r3, #0
 80046e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	d058      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046fa:	d033      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80046fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004700:	d82c      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004706:	d02f      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470c:	d826      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800470e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004712:	d02b      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004714:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004718:	d820      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800471a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800471e:	d012      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004724:	d81a      	bhi.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d022      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472e:	d115      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	3308      	adds	r3, #8
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fe57 	bl	80053ec <RCCEx_PLL2_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004744:	e015      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	3328      	adds	r3, #40	@ 0x28
 800474c:	2102      	movs	r1, #2
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fefe 	bl	8005550 <RCCEx_PLL3_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800475a:	e00a      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004762:	e006      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004764:	bf00      	nop
 8004766:	e004      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004768:	bf00      	nop
 800476a:	e002      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800476c:	bf00      	nop
 800476e:	e000      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10e      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004786:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800478a:	4a02      	ldr	r2, [pc, #8]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800478c:	430b      	orrs	r3, r1
 800478e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004790:	e006      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004792:	bf00      	nop
 8004794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d055      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047cc:	d033      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80047ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047d2:	d82c      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047d8:	d02f      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047de:	d826      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047e4:	d02b      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80047e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047ea:	d820      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047f0:	d012      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80047f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047f6:	d81a      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d022      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80047fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004800:	d115      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	3308      	adds	r3, #8
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fdee 	bl	80053ec <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004816:	e015      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481c:	3328      	adds	r3, #40	@ 0x28
 800481e:	2102      	movs	r1, #2
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fe95 	bl	8005550 <RCCEx_PLL3_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800482c:	e00a      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004834:	e006      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004836:	bf00      	nop
 8004838:	e004      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800483a:	bf00      	nop
 800483c:	e002      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800483e:	bf00      	nop
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800484c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800484e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004850:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004858:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800485c:	4a9d      	ldr	r2, [pc, #628]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800485e:	430b      	orrs	r3, r1
 8004860:	6593      	str	r3, [r2, #88]	@ 0x58
 8004862:	e003      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f002 0308 	and.w	r3, r2, #8
 8004878:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800487c:	2300      	movs	r3, #0
 800487e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004882:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004886:	460b      	mov	r3, r1
 8004888:	4313      	orrs	r3, r2
 800488a:	d01e      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	3328      	adds	r3, #40	@ 0x28
 80048a0:	2102      	movs	r1, #2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fe54 	bl	8005550 <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048b4:	4b87      	ldr	r3, [pc, #540]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c4:	4a83      	ldr	r2, [pc, #524]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048c6:	430b      	orrs	r3, r1
 80048c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f002 0310 	and.w	r3, r2, #16
 80048d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048da:	2300      	movs	r3, #0
 80048dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048e4:	460b      	mov	r3, r1
 80048e6:	4313      	orrs	r3, r2
 80048e8:	d01e      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f6:	d10c      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fc:	3328      	adds	r3, #40	@ 0x28
 80048fe:	2102      	movs	r1, #2
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fe25 	bl	8005550 <RCCEx_PLL3_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004912:	4b70      	ldr	r3, [pc, #448]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004916:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004922:	4a6c      	ldr	r2, [pc, #432]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004924:	430b      	orrs	r3, r1
 8004926:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004938:	2300      	movs	r3, #0
 800493a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800493e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004942:	460b      	mov	r3, r1
 8004944:	4313      	orrs	r3, r2
 8004946:	d03e      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004954:	d022      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800495a:	d81b      	bhi.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004964:	d00b      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004966:	e015      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496c:	3308      	adds	r3, #8
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fd3b 	bl	80053ec <RCCEx_PLL2_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800497c:	e00f      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	3328      	adds	r3, #40	@ 0x28
 8004984:	2102      	movs	r1, #2
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fde2 	bl	8005550 <RCCEx_PLL3_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004992:	e004      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800499a:	e000      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800499c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049b6:	4a47      	ldr	r2, [pc, #284]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80049bc:	e003      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80049d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049d4:	2300      	movs	r3, #0
 80049d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049dc:	460b      	mov	r3, r1
 80049de:	4313      	orrs	r3, r2
 80049e0:	d03b      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049ee:	d01f      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80049f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049f4:	d818      	bhi.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80049f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049fa:	d003      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80049fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a00:	d007      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a02:	e011      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a04:	4b33      	ldr	r3, [pc, #204]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	4a32      	ldr	r2, [pc, #200]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a10:	e00f      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a16:	3328      	adds	r3, #40	@ 0x28
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fd98 	bl	8005550 <RCCEx_PLL3_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a26:	e004      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a2e:	e000      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a3a:	4b26      	ldr	r3, [pc, #152]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4a:	4a22      	ldr	r2, [pc, #136]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a50:	e003      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a66:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a68:	2300      	movs	r3, #0
 8004a6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a70:	460b      	mov	r3, r1
 8004a72:	4313      	orrs	r3, r2
 8004a74:	d034      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a84:	d007      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004a86:	e011      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a88:	4b12      	ldr	r3, [pc, #72]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	4a11      	ldr	r2, [pc, #68]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a94:	e00e      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fca4 	bl	80053ec <RCCEx_PLL2_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004aaa:	e003      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10d      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004abc:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aca:	4a02      	ldr	r2, [pc, #8]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004acc:	430b      	orrs	r3, r1
 8004ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ad0:	e006      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004ad2:	bf00      	nop
 8004ad4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aee:	2300      	movs	r3, #0
 8004af0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004af2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004af6:	460b      	mov	r3, r1
 8004af8:	4313      	orrs	r3, r2
 8004afa:	d00c      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b00:	3328      	adds	r3, #40	@ 0x28
 8004b02:	2102      	movs	r1, #2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fd23 	bl	8005550 <RCCEx_PLL3_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b22:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b24:	2300      	movs	r3, #0
 8004b26:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d038      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b3e:	d018      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b44:	d811      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b4a:	d014      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b50:	d80b      	bhi.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d011      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b5a:	d106      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5c:	4bc3      	ldr	r3, [pc, #780]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	4ac2      	ldr	r2, [pc, #776]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b68:	e008      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b70:	e004      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b84:	4bb9      	ldr	r3, [pc, #740]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b88:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b94:	4ab5      	ldr	r2, [pc, #724]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b96:	430b      	orrs	r3, r1
 8004b98:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	d009      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bc0:	4baa      	ldr	r3, [pc, #680]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bce:	4aa7      	ldr	r2, [pc, #668]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004be0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004be2:	2300      	movs	r3, #0
 8004be4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004be6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004bea:	460b      	mov	r3, r1
 8004bec:	4313      	orrs	r3, r2
 8004bee:	d00a      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004bf0:	4b9e      	ldr	r3, [pc, #632]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c00:	4a9a      	ldr	r2, [pc, #616]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c02:	430b      	orrs	r3, r1
 8004c04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c14:	2300      	movs	r3, #0
 8004c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	d009      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c22:	4b92      	ldr	r3, [pc, #584]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c26:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c30:	4a8e      	ldr	r2, [pc, #568]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c32:	430b      	orrs	r3, r1
 8004c34:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c44:	2300      	movs	r3, #0
 8004c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c52:	4b86      	ldr	r3, [pc, #536]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	4a85      	ldr	r2, [pc, #532]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c5c:	6113      	str	r3, [r2, #16]
 8004c5e:	4b83      	ldr	r3, [pc, #524]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c60:	6919      	ldr	r1, [r3, #16]
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c6a:	4a80      	ldr	r2, [pc, #512]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c7e:	2300      	movs	r3, #0
 8004c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c86:	460b      	mov	r3, r1
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	d009      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c8c:	4b77      	ldr	r3, [pc, #476]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c90:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9a:	4a74      	ldr	r2, [pc, #464]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cae:	2300      	movs	r3, #0
 8004cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cb2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	d00a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ccc:	4a67      	ldr	r2, [pc, #412]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	2100      	movs	r1, #0
 8004cdc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4313      	orrs	r3, r2
 8004cec:	d011      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fb78 	bl	80053ec <RCCEx_PLL2_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	6239      	str	r1, [r7, #32]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	d011      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d32:	3308      	adds	r3, #8
 8004d34:	2101      	movs	r1, #1
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fb58 	bl	80053ec <RCCEx_PLL2_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	61b9      	str	r1, [r7, #24]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	d011      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	3308      	adds	r3, #8
 8004d74:	2102      	movs	r1, #2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fb38 	bl	80053ec <RCCEx_PLL2_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	6139      	str	r1, [r7, #16]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004da8:	460b      	mov	r3, r1
 8004daa:	4313      	orrs	r3, r2
 8004dac:	d011      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db2:	3328      	adds	r3, #40	@ 0x28
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fbca 	bl	8005550 <RCCEx_PLL3_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	2100      	movs	r1, #0
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004de8:	460b      	mov	r3, r1
 8004dea:	4313      	orrs	r3, r2
 8004dec:	d011      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df2:	3328      	adds	r3, #40	@ 0x28
 8004df4:	2101      	movs	r1, #1
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fbaa 	bl	8005550 <RCCEx_PLL3_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	6039      	str	r1, [r7, #0]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	607b      	str	r3, [r7, #4]
 8004e24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	d011      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e32:	3328      	adds	r3, #40	@ 0x28
 8004e34:	2102      	movs	r1, #2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fb8a 	bl	8005550 <RCCEx_PLL3_Config>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004e52:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e000      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004e66:	46bd      	mov	sp, r7
 8004e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6c:	58024400 	.word	0x58024400

08004e70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e74:	f7fe fd96 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	091b      	lsrs	r3, r3, #4
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4904      	ldr	r1, [pc, #16]	@ (8004e98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	58024400 	.word	0x58024400
 8004e98:	080093b4 	.word	0x080093b4

08004e9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b089      	sub	sp, #36	@ 0x24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ea4:	4ba1      	ldr	r3, [pc, #644]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004eae:	4b9f      	ldr	r3, [pc, #636]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	0b1b      	lsrs	r3, r3, #12
 8004eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004eba:	4b9c      	ldr	r3, [pc, #624]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ec6:	4b99      	ldr	r3, [pc, #612]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eca:	08db      	lsrs	r3, r3, #3
 8004ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8111 	beq.w	800510c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	f000 8083 	beq.w	8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	f200 80a1 	bhi.w	800503c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d056      	beq.n	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f06:	e099      	b.n	800503c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f08:	4b88      	ldr	r3, [pc, #544]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d02d      	beq.n	8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f14:	4b85      	ldr	r3, [pc, #532]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	08db      	lsrs	r3, r3, #3
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	4a84      	ldr	r2, [pc, #528]	@ (8005130 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
 8004f24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3e:	4b7b      	ldr	r3, [pc, #492]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f6e:	e087      	b.n	8005080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005138 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f82:	4b6a      	ldr	r3, [pc, #424]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb2:	e065      	b.n	8005080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800513c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc6:	4b59      	ldr	r3, [pc, #356]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ff6:	e043      	b.n	8005080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005002:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500a:	4b48      	ldr	r3, [pc, #288]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501a:	ed97 6a03 	vldr	s12, [r7, #12]
 800501e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800502e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800503a:	e021      	b.n	8005080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005046:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800513c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800504a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504e:	4b37      	ldr	r3, [pc, #220]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005062:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800507e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005080:	4b2a      	ldr	r3, [pc, #168]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	0a5b      	lsrs	r3, r3, #9
 8005086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800509a:	edd7 6a07 	vldr	s13, [r7, #28]
 800509e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a6:	ee17 2a90 	vmov	r2, s15
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050ae:	4b1f      	ldr	r3, [pc, #124]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b2:	0c1b      	lsrs	r3, r3, #16
 80050b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80050cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d4:	ee17 2a90 	vmov	r2, s15
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80050dc:	4b13      	ldr	r3, [pc, #76]	@ (800512c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e0:	0e1b      	lsrs	r3, r3, #24
 80050e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80050fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005102:	ee17 2a90 	vmov	r2, s15
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800510a:	e008      	b.n	800511e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	609a      	str	r2, [r3, #8]
}
 800511e:	bf00      	nop
 8005120:	3724      	adds	r7, #36	@ 0x24
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	58024400 	.word	0x58024400
 8005130:	03d09000 	.word	0x03d09000
 8005134:	46000000 	.word	0x46000000
 8005138:	4c742400 	.word	0x4c742400
 800513c:	4a742400 	.word	0x4a742400
 8005140:	4af42400 	.word	0x4af42400

08005144 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	@ 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800514c:	4ba1      	ldr	r3, [pc, #644]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005156:	4b9f      	ldr	r3, [pc, #636]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	0d1b      	lsrs	r3, r3, #20
 800515c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005160:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005162:	4b9c      	ldr	r3, [pc, #624]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	0a1b      	lsrs	r3, r3, #8
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800516e:	4b99      	ldr	r3, [pc, #612]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	08db      	lsrs	r3, r3, #3
 8005174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8111 	beq.w	80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b02      	cmp	r3, #2
 8005196:	f000 8083 	beq.w	80052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b02      	cmp	r3, #2
 800519e:	f200 80a1 	bhi.w	80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d056      	beq.n	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051ae:	e099      	b.n	80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051b0:	4b88      	ldr	r3, [pc, #544]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d02d      	beq.n	8005218 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051bc:	4b85      	ldr	r3, [pc, #532]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	08db      	lsrs	r3, r3, #3
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	4a84      	ldr	r2, [pc, #528]	@ (80053d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
 80051cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e6:	4b7b      	ldr	r3, [pc, #492]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800520a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005212:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005216:	e087      	b.n	8005328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522a:	4b6a      	ldr	r3, [pc, #424]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523a:	ed97 6a03 	vldr	s12, [r7, #12]
 800523e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800524e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800525a:	e065      	b.n	8005328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800526a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526e:	4b59      	ldr	r3, [pc, #356]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005282:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800529e:	e043      	b.n	8005328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b2:	4b48      	ldr	r3, [pc, #288]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052e2:	e021      	b.n	8005328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f6:	4b37      	ldr	r3, [pc, #220]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005306:	ed97 6a03 	vldr	s12, [r7, #12]
 800530a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800530e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800531a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005326:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005328:	4b2a      	ldr	r3, [pc, #168]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	0a5b      	lsrs	r3, r3, #9
 800532e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800533e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005342:	edd7 6a07 	vldr	s13, [r7, #28]
 8005346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800534a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800534e:	ee17 2a90 	vmov	r2, s15
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005356:	4b1f      	ldr	r3, [pc, #124]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005360:	ee07 3a90 	vmov	s15, r3
 8005364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005368:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800536c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005370:	edd7 6a07 	vldr	s13, [r7, #28]
 8005374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800537c:	ee17 2a90 	vmov	r2, s15
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005384:	4b13      	ldr	r3, [pc, #76]	@ (80053d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005388:	0e1b      	lsrs	r3, r3, #24
 800538a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800539a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800539e:	edd7 6a07 	vldr	s13, [r7, #28]
 80053a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053aa:	ee17 2a90 	vmov	r2, s15
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053b2:	e008      	b.n	80053c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	609a      	str	r2, [r3, #8]
}
 80053c6:	bf00      	nop
 80053c8:	3724      	adds	r7, #36	@ 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	58024400 	.word	0x58024400
 80053d8:	03d09000 	.word	0x03d09000
 80053dc:	46000000 	.word	0x46000000
 80053e0:	4c742400 	.word	0x4c742400
 80053e4:	4a742400 	.word	0x4a742400
 80053e8:	4af42400 	.word	0x4af42400

080053ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053fa:	4b53      	ldr	r3, [pc, #332]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80053fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	2b03      	cmp	r3, #3
 8005404:	d101      	bne.n	800540a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e099      	b.n	800553e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800540a:	4b4f      	ldr	r3, [pc, #316]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a4e      	ldr	r2, [pc, #312]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 8005410:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005416:	f7fc f8bd 	bl	8001594 <HAL_GetTick>
 800541a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800541c:	e008      	b.n	8005430 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800541e:	f7fc f8b9 	bl	8001594 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e086      	b.n	800553e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005430:	4b45      	ldr	r3, [pc, #276]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800543c:	4b42      	ldr	r3, [pc, #264]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 800543e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005440:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	031b      	lsls	r3, r3, #12
 800544a:	493f      	ldr	r1, [pc, #252]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 800544c:	4313      	orrs	r3, r2
 800544e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	3b01      	subs	r3, #1
 8005456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	3b01      	subs	r3, #1
 8005460:	025b      	lsls	r3, r3, #9
 8005462:	b29b      	uxth	r3, r3
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	3b01      	subs	r3, #1
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	3b01      	subs	r3, #1
 800547a:	061b      	lsls	r3, r3, #24
 800547c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005480:	4931      	ldr	r1, [pc, #196]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 8005482:	4313      	orrs	r3, r2
 8005484:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005486:	4b30      	ldr	r3, [pc, #192]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 8005488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	492d      	ldr	r1, [pc, #180]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005498:	4b2b      	ldr	r3, [pc, #172]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	f023 0220 	bic.w	r2, r3, #32
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	4928      	ldr	r1, [pc, #160]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054aa:	4b27      	ldr	r3, [pc, #156]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	4a26      	ldr	r2, [pc, #152]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054b0:	f023 0310 	bic.w	r3, r3, #16
 80054b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054b6:	4b24      	ldr	r3, [pc, #144]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ba:	4b24      	ldr	r3, [pc, #144]	@ (800554c <RCCEx_PLL2_Config+0x160>)
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	69d2      	ldr	r2, [r2, #28]
 80054c2:	00d2      	lsls	r2, r2, #3
 80054c4:	4920      	ldr	r1, [pc, #128]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054d0:	f043 0310 	orr.w	r3, r3, #16
 80054d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	4a19      	ldr	r2, [pc, #100]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054e8:	e00f      	b.n	800550a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d106      	bne.n	80054fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80054f0:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	4a14      	ldr	r2, [pc, #80]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 80054f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054fc:	e005      	b.n	800550a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80054fe:	4b12      	ldr	r3, [pc, #72]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 8005500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005502:	4a11      	ldr	r2, [pc, #68]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 8005504:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005508:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800550a:	4b0f      	ldr	r3, [pc, #60]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a0e      	ldr	r2, [pc, #56]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 8005510:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005516:	f7fc f83d 	bl	8001594 <HAL_GetTick>
 800551a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800551c:	e008      	b.n	8005530 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800551e:	f7fc f839 	bl	8001594 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e006      	b.n	800553e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005530:	4b05      	ldr	r3, [pc, #20]	@ (8005548 <RCCEx_PLL2_Config+0x15c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	58024400 	.word	0x58024400
 800554c:	ffff0007 	.word	0xffff0007

08005550 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800555e:	4b53      	ldr	r3, [pc, #332]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b03      	cmp	r3, #3
 8005568:	d101      	bne.n	800556e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e099      	b.n	80056a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800556e:	4b4f      	ldr	r3, [pc, #316]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a4e      	ldr	r2, [pc, #312]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800557a:	f7fc f80b 	bl	8001594 <HAL_GetTick>
 800557e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005580:	e008      	b.n	8005594 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005582:	f7fc f807 	bl	8001594 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e086      	b.n	80056a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005594:	4b45      	ldr	r3, [pc, #276]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f0      	bne.n	8005582 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055a0:	4b42      	ldr	r3, [pc, #264]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	051b      	lsls	r3, r3, #20
 80055ae:	493f      	ldr	r1, [pc, #252]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	025b      	lsls	r3, r3, #9
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	3b01      	subs	r3, #1
 80055de:	061b      	lsls	r3, r3, #24
 80055e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055e4:	4931      	ldr	r1, [pc, #196]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80055ea:	4b30      	ldr	r3, [pc, #192]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 80055ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	492d      	ldr	r1, [pc, #180]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80055fc:	4b2b      	ldr	r3, [pc, #172]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	4928      	ldr	r1, [pc, #160]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 800560a:	4313      	orrs	r3, r2
 800560c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800560e:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	4a26      	ldr	r2, [pc, #152]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005618:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800561a:	4b24      	ldr	r3, [pc, #144]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 800561c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800561e:	4b24      	ldr	r3, [pc, #144]	@ (80056b0 <RCCEx_PLL3_Config+0x160>)
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	69d2      	ldr	r2, [r2, #28]
 8005626:	00d2      	lsls	r2, r2, #3
 8005628:	4920      	ldr	r1, [pc, #128]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 800562a:	4313      	orrs	r3, r2
 800562c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800562e:	4b1f      	ldr	r3, [pc, #124]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	4a1e      	ldr	r2, [pc, #120]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005638:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005640:	4b1a      	ldr	r3, [pc, #104]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005644:	4a19      	ldr	r2, [pc, #100]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005646:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800564a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800564c:	e00f      	b.n	800566e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d106      	bne.n	8005662 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005654:	4b15      	ldr	r3, [pc, #84]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4a14      	ldr	r2, [pc, #80]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 800565a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800565e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005660:	e005      	b.n	800566e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005662:	4b12      	ldr	r3, [pc, #72]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005666:	4a11      	ldr	r2, [pc, #68]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005668:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800566c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800566e:	4b0f      	ldr	r3, [pc, #60]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a0e      	ldr	r2, [pc, #56]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800567a:	f7fb ff8b 	bl	8001594 <HAL_GetTick>
 800567e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005680:	e008      	b.n	8005694 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005682:	f7fb ff87 	bl	8001594 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e006      	b.n	80056a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005694:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <RCCEx_PLL3_Config+0x15c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	58024400 	.word	0x58024400
 80056b0:	ffff0007 	.word	0xffff0007

080056b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e042      	b.n	800574c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fb fbf7 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2224      	movs	r2, #36	@ 0x24
 80056e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0201 	bic.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fd90 	bl	8006224 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f825 	bl	8005754 <UART_SetConfig>
 800570a:	4603      	mov	r3, r0
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e01b      	b.n	800574c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fe0f 	bl	8006368 <UART_CheckIdleState>
 800574a:	4603      	mov	r3, r0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005758:	b092      	sub	sp, #72	@ 0x48
 800575a:	af00      	add	r7, sp, #0
 800575c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	431a      	orrs	r2, r3
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	431a      	orrs	r2, r3
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	4313      	orrs	r3, r2
 800577a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4bbe      	ldr	r3, [pc, #760]	@ (8005a7c <UART_SetConfig+0x328>)
 8005784:	4013      	ands	r3, r2
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800578c:	430b      	orrs	r3, r1
 800578e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4ab3      	ldr	r2, [pc, #716]	@ (8005a80 <UART_SetConfig+0x32c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057bc:	4313      	orrs	r3, r2
 80057be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	4baf      	ldr	r3, [pc, #700]	@ (8005a84 <UART_SetConfig+0x330>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	6812      	ldr	r2, [r2, #0]
 80057ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057d0:	430b      	orrs	r3, r1
 80057d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057da:	f023 010f 	bic.w	r1, r3, #15
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4aa6      	ldr	r2, [pc, #664]	@ (8005a88 <UART_SetConfig+0x334>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d177      	bne.n	80058e4 <UART_SetConfig+0x190>
 80057f4:	4ba5      	ldr	r3, [pc, #660]	@ (8005a8c <UART_SetConfig+0x338>)
 80057f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057fc:	2b28      	cmp	r3, #40	@ 0x28
 80057fe:	d86d      	bhi.n	80058dc <UART_SetConfig+0x188>
 8005800:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <UART_SetConfig+0xb4>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	080058ad 	.word	0x080058ad
 800580c:	080058dd 	.word	0x080058dd
 8005810:	080058dd 	.word	0x080058dd
 8005814:	080058dd 	.word	0x080058dd
 8005818:	080058dd 	.word	0x080058dd
 800581c:	080058dd 	.word	0x080058dd
 8005820:	080058dd 	.word	0x080058dd
 8005824:	080058dd 	.word	0x080058dd
 8005828:	080058b5 	.word	0x080058b5
 800582c:	080058dd 	.word	0x080058dd
 8005830:	080058dd 	.word	0x080058dd
 8005834:	080058dd 	.word	0x080058dd
 8005838:	080058dd 	.word	0x080058dd
 800583c:	080058dd 	.word	0x080058dd
 8005840:	080058dd 	.word	0x080058dd
 8005844:	080058dd 	.word	0x080058dd
 8005848:	080058bd 	.word	0x080058bd
 800584c:	080058dd 	.word	0x080058dd
 8005850:	080058dd 	.word	0x080058dd
 8005854:	080058dd 	.word	0x080058dd
 8005858:	080058dd 	.word	0x080058dd
 800585c:	080058dd 	.word	0x080058dd
 8005860:	080058dd 	.word	0x080058dd
 8005864:	080058dd 	.word	0x080058dd
 8005868:	080058c5 	.word	0x080058c5
 800586c:	080058dd 	.word	0x080058dd
 8005870:	080058dd 	.word	0x080058dd
 8005874:	080058dd 	.word	0x080058dd
 8005878:	080058dd 	.word	0x080058dd
 800587c:	080058dd 	.word	0x080058dd
 8005880:	080058dd 	.word	0x080058dd
 8005884:	080058dd 	.word	0x080058dd
 8005888:	080058cd 	.word	0x080058cd
 800588c:	080058dd 	.word	0x080058dd
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058dd 	.word	0x080058dd
 8005898:	080058dd 	.word	0x080058dd
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058dd 	.word	0x080058dd
 80058a8:	080058d5 	.word	0x080058d5
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b2:	e222      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80058b4:	2304      	movs	r3, #4
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ba:	e21e      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80058bc:	2308      	movs	r3, #8
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c2:	e21a      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e216      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80058cc:	2320      	movs	r3, #32
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e212      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80058d4:	2340      	movs	r3, #64	@ 0x40
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e20e      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e2:	e20a      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a69      	ldr	r2, [pc, #420]	@ (8005a90 <UART_SetConfig+0x33c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d130      	bne.n	8005950 <UART_SetConfig+0x1fc>
 80058ee:	4b67      	ldr	r3, [pc, #412]	@ (8005a8c <UART_SetConfig+0x338>)
 80058f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d826      	bhi.n	8005948 <UART_SetConfig+0x1f4>
 80058fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <UART_SetConfig+0x1ac>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005919 	.word	0x08005919
 8005904:	08005921 	.word	0x08005921
 8005908:	08005929 	.word	0x08005929
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e1ec      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e1e8      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e1e4      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e1e0      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005938:	2320      	movs	r3, #32
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e1dc      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005940:	2340      	movs	r3, #64	@ 0x40
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e1d8      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e1d4      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a4f      	ldr	r2, [pc, #316]	@ (8005a94 <UART_SetConfig+0x340>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d130      	bne.n	80059bc <UART_SetConfig+0x268>
 800595a:	4b4c      	ldr	r3, [pc, #304]	@ (8005a8c <UART_SetConfig+0x338>)
 800595c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	2b05      	cmp	r3, #5
 8005964:	d826      	bhi.n	80059b4 <UART_SetConfig+0x260>
 8005966:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <UART_SetConfig+0x218>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	08005985 	.word	0x08005985
 8005970:	0800598d 	.word	0x0800598d
 8005974:	08005995 	.word	0x08005995
 8005978:	0800599d 	.word	0x0800599d
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059ad 	.word	0x080059ad
 8005984:	2300      	movs	r3, #0
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e1b6      	b.n	8005cfa <UART_SetConfig+0x5a6>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005992:	e1b2      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599a:	e1ae      	b.n	8005cfa <UART_SetConfig+0x5a6>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a2:	e1aa      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80059a4:	2320      	movs	r3, #32
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e1a6      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80059ac:	2340      	movs	r3, #64	@ 0x40
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e1a2      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80059b4:	2380      	movs	r3, #128	@ 0x80
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e19e      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a35      	ldr	r2, [pc, #212]	@ (8005a98 <UART_SetConfig+0x344>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d130      	bne.n	8005a28 <UART_SetConfig+0x2d4>
 80059c6:	4b31      	ldr	r3, [pc, #196]	@ (8005a8c <UART_SetConfig+0x338>)
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d826      	bhi.n	8005a20 <UART_SetConfig+0x2cc>
 80059d2:	a201      	add	r2, pc, #4	@ (adr r2, 80059d8 <UART_SetConfig+0x284>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	080059f1 	.word	0x080059f1
 80059dc:	080059f9 	.word	0x080059f9
 80059e0:	08005a01 	.word	0x08005a01
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005a11 	.word	0x08005a11
 80059ec:	08005a19 	.word	0x08005a19
 80059f0:	2300      	movs	r3, #0
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e180      	b.n	8005cfa <UART_SetConfig+0x5a6>
 80059f8:	2304      	movs	r3, #4
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e17c      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a00:	2308      	movs	r3, #8
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e178      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	e174      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a10:	2320      	movs	r3, #32
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e170      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a18:	2340      	movs	r3, #64	@ 0x40
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1e:	e16c      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a20:	2380      	movs	r3, #128	@ 0x80
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a26:	e168      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <UART_SetConfig+0x348>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d142      	bne.n	8005ab8 <UART_SetConfig+0x364>
 8005a32:	4b16      	ldr	r3, [pc, #88]	@ (8005a8c <UART_SetConfig+0x338>)
 8005a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	d838      	bhi.n	8005ab0 <UART_SetConfig+0x35c>
 8005a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <UART_SetConfig+0x2f0>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a5d 	.word	0x08005a5d
 8005a48:	08005a65 	.word	0x08005a65
 8005a4c:	08005a6d 	.word	0x08005a6d
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa9 	.word	0x08005aa9
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e14a      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a64:	2304      	movs	r3, #4
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e146      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a72:	e142      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a74:	2310      	movs	r3, #16
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7a:	e13e      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005a7c:	cfff69f3 	.word	0xcfff69f3
 8005a80:	58000c00 	.word	0x58000c00
 8005a84:	11fff4ff 	.word	0x11fff4ff
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	58024400 	.word	0x58024400
 8005a90:	40004400 	.word	0x40004400
 8005a94:	40004800 	.word	0x40004800
 8005a98:	40004c00 	.word	0x40004c00
 8005a9c:	40005000 	.word	0x40005000
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e128      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005aa8:	2340      	movs	r3, #64	@ 0x40
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aae:	e124      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005ab0:	2380      	movs	r3, #128	@ 0x80
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e120      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4acb      	ldr	r2, [pc, #812]	@ (8005dec <UART_SetConfig+0x698>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d176      	bne.n	8005bb0 <UART_SetConfig+0x45c>
 8005ac2:	4bcb      	ldr	r3, [pc, #812]	@ (8005df0 <UART_SetConfig+0x69c>)
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aca:	2b28      	cmp	r3, #40	@ 0x28
 8005acc:	d86c      	bhi.n	8005ba8 <UART_SetConfig+0x454>
 8005ace:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <UART_SetConfig+0x380>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005b79 	.word	0x08005b79
 8005ad8:	08005ba9 	.word	0x08005ba9
 8005adc:	08005ba9 	.word	0x08005ba9
 8005ae0:	08005ba9 	.word	0x08005ba9
 8005ae4:	08005ba9 	.word	0x08005ba9
 8005ae8:	08005ba9 	.word	0x08005ba9
 8005aec:	08005ba9 	.word	0x08005ba9
 8005af0:	08005ba9 	.word	0x08005ba9
 8005af4:	08005b81 	.word	0x08005b81
 8005af8:	08005ba9 	.word	0x08005ba9
 8005afc:	08005ba9 	.word	0x08005ba9
 8005b00:	08005ba9 	.word	0x08005ba9
 8005b04:	08005ba9 	.word	0x08005ba9
 8005b08:	08005ba9 	.word	0x08005ba9
 8005b0c:	08005ba9 	.word	0x08005ba9
 8005b10:	08005ba9 	.word	0x08005ba9
 8005b14:	08005b89 	.word	0x08005b89
 8005b18:	08005ba9 	.word	0x08005ba9
 8005b1c:	08005ba9 	.word	0x08005ba9
 8005b20:	08005ba9 	.word	0x08005ba9
 8005b24:	08005ba9 	.word	0x08005ba9
 8005b28:	08005ba9 	.word	0x08005ba9
 8005b2c:	08005ba9 	.word	0x08005ba9
 8005b30:	08005ba9 	.word	0x08005ba9
 8005b34:	08005b91 	.word	0x08005b91
 8005b38:	08005ba9 	.word	0x08005ba9
 8005b3c:	08005ba9 	.word	0x08005ba9
 8005b40:	08005ba9 	.word	0x08005ba9
 8005b44:	08005ba9 	.word	0x08005ba9
 8005b48:	08005ba9 	.word	0x08005ba9
 8005b4c:	08005ba9 	.word	0x08005ba9
 8005b50:	08005ba9 	.word	0x08005ba9
 8005b54:	08005b99 	.word	0x08005b99
 8005b58:	08005ba9 	.word	0x08005ba9
 8005b5c:	08005ba9 	.word	0x08005ba9
 8005b60:	08005ba9 	.word	0x08005ba9
 8005b64:	08005ba9 	.word	0x08005ba9
 8005b68:	08005ba9 	.word	0x08005ba9
 8005b6c:	08005ba9 	.word	0x08005ba9
 8005b70:	08005ba9 	.word	0x08005ba9
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e0bc      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e0b8      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e0b4      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e0b0      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e0ac      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005ba0:	2340      	movs	r3, #64	@ 0x40
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e0a8      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005ba8:	2380      	movs	r3, #128	@ 0x80
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e0a4      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a8f      	ldr	r2, [pc, #572]	@ (8005df4 <UART_SetConfig+0x6a0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d130      	bne.n	8005c1c <UART_SetConfig+0x4c8>
 8005bba:	4b8d      	ldr	r3, [pc, #564]	@ (8005df0 <UART_SetConfig+0x69c>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d826      	bhi.n	8005c14 <UART_SetConfig+0x4c0>
 8005bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <UART_SetConfig+0x478>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005be5 	.word	0x08005be5
 8005bd0:	08005bed 	.word	0x08005bed
 8005bd4:	08005bf5 	.word	0x08005bf5
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e086      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e082      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e07e      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e07a      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c04:	2320      	movs	r3, #32
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e076      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c0c:	2340      	movs	r3, #64	@ 0x40
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e072      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e06e      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a75      	ldr	r2, [pc, #468]	@ (8005df8 <UART_SetConfig+0x6a4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d130      	bne.n	8005c88 <UART_SetConfig+0x534>
 8005c26:	4b72      	ldr	r3, [pc, #456]	@ (8005df0 <UART_SetConfig+0x69c>)
 8005c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d826      	bhi.n	8005c80 <UART_SetConfig+0x52c>
 8005c32:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <UART_SetConfig+0x4e4>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c51 	.word	0x08005c51
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c61 	.word	0x08005c61
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e050      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e04c      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e048      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e044      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c70:	2320      	movs	r3, #32
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e040      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c78:	2340      	movs	r3, #64	@ 0x40
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e03c      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c80:	2380      	movs	r3, #128	@ 0x80
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e038      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a5b      	ldr	r2, [pc, #364]	@ (8005dfc <UART_SetConfig+0x6a8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d130      	bne.n	8005cf4 <UART_SetConfig+0x5a0>
 8005c92:	4b57      	ldr	r3, [pc, #348]	@ (8005df0 <UART_SetConfig+0x69c>)
 8005c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b05      	cmp	r3, #5
 8005c9c:	d826      	bhi.n	8005cec <UART_SetConfig+0x598>
 8005c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca4 <UART_SetConfig+0x550>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cbd 	.word	0x08005cbd
 8005ca8:	08005cc5 	.word	0x08005cc5
 8005cac:	08005ccd 	.word	0x08005ccd
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e01a      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e016      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e012      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e00e      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e00a      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005ce4:	2340      	movs	r3, #64	@ 0x40
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e006      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005cec:	2380      	movs	r3, #128	@ 0x80
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e002      	b.n	8005cfa <UART_SetConfig+0x5a6>
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8005dfc <UART_SetConfig+0x6a8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	f040 80f8 	bne.w	8005ef6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	dc46      	bgt.n	8005d9c <UART_SetConfig+0x648>
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	f2c0 8082 	blt.w	8005e18 <UART_SetConfig+0x6c4>
 8005d14:	3b02      	subs	r3, #2
 8005d16:	2b1e      	cmp	r3, #30
 8005d18:	d87e      	bhi.n	8005e18 <UART_SetConfig+0x6c4>
 8005d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d20 <UART_SetConfig+0x5cc>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005da3 	.word	0x08005da3
 8005d24:	08005e19 	.word	0x08005e19
 8005d28:	08005dab 	.word	0x08005dab
 8005d2c:	08005e19 	.word	0x08005e19
 8005d30:	08005e19 	.word	0x08005e19
 8005d34:	08005e19 	.word	0x08005e19
 8005d38:	08005dbb 	.word	0x08005dbb
 8005d3c:	08005e19 	.word	0x08005e19
 8005d40:	08005e19 	.word	0x08005e19
 8005d44:	08005e19 	.word	0x08005e19
 8005d48:	08005e19 	.word	0x08005e19
 8005d4c:	08005e19 	.word	0x08005e19
 8005d50:	08005e19 	.word	0x08005e19
 8005d54:	08005e19 	.word	0x08005e19
 8005d58:	08005dcb 	.word	0x08005dcb
 8005d5c:	08005e19 	.word	0x08005e19
 8005d60:	08005e19 	.word	0x08005e19
 8005d64:	08005e19 	.word	0x08005e19
 8005d68:	08005e19 	.word	0x08005e19
 8005d6c:	08005e19 	.word	0x08005e19
 8005d70:	08005e19 	.word	0x08005e19
 8005d74:	08005e19 	.word	0x08005e19
 8005d78:	08005e19 	.word	0x08005e19
 8005d7c:	08005e19 	.word	0x08005e19
 8005d80:	08005e19 	.word	0x08005e19
 8005d84:	08005e19 	.word	0x08005e19
 8005d88:	08005e19 	.word	0x08005e19
 8005d8c:	08005e19 	.word	0x08005e19
 8005d90:	08005e19 	.word	0x08005e19
 8005d94:	08005e19 	.word	0x08005e19
 8005d98:	08005e0b 	.word	0x08005e0b
 8005d9c:	2b40      	cmp	r3, #64	@ 0x40
 8005d9e:	d037      	beq.n	8005e10 <UART_SetConfig+0x6bc>
 8005da0:	e03a      	b.n	8005e18 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005da2:	f7ff f865 	bl	8004e70 <HAL_RCCEx_GetD3PCLK1Freq>
 8005da6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005da8:	e03c      	b.n	8005e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff f874 	bl	8004e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db8:	e034      	b.n	8005e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dba:	f107 0318 	add.w	r3, r7, #24
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff f9c0 	bl	8005144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc8:	e02c      	b.n	8005e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dca:	4b09      	ldr	r3, [pc, #36]	@ (8005df0 <UART_SetConfig+0x69c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d016      	beq.n	8005e04 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dd6:	4b06      	ldr	r3, [pc, #24]	@ (8005df0 <UART_SetConfig+0x69c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	08db      	lsrs	r3, r3, #3
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	4a07      	ldr	r2, [pc, #28]	@ (8005e00 <UART_SetConfig+0x6ac>)
 8005de2:	fa22 f303 	lsr.w	r3, r2, r3
 8005de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005de8:	e01c      	b.n	8005e24 <UART_SetConfig+0x6d0>
 8005dea:	bf00      	nop
 8005dec:	40011400 	.word	0x40011400
 8005df0:	58024400 	.word	0x58024400
 8005df4:	40007800 	.word	0x40007800
 8005df8:	40007c00 	.word	0x40007c00
 8005dfc:	58000c00 	.word	0x58000c00
 8005e00:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e04:	4b9d      	ldr	r3, [pc, #628]	@ (800607c <UART_SetConfig+0x928>)
 8005e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e08:	e00c      	b.n	8005e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e0a:	4b9d      	ldr	r3, [pc, #628]	@ (8006080 <UART_SetConfig+0x92c>)
 8005e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e0e:	e009      	b.n	8005e24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e16:	e005      	b.n	8005e24 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 81de 	beq.w	80061e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	4a94      	ldr	r2, [pc, #592]	@ (8006084 <UART_SetConfig+0x930>)
 8005e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e36:	461a      	mov	r2, r3
 8005e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	4413      	add	r3, r2
 8005e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d305      	bcc.n	8005e5c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d903      	bls.n	8005e64 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005e62:	e1c1      	b.n	80061e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e66:	2200      	movs	r2, #0
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	60fa      	str	r2, [r7, #12]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	4a84      	ldr	r2, [pc, #528]	@ (8006084 <UART_SetConfig+0x930>)
 8005e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2200      	movs	r2, #0
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e86:	f7fa fa83 	bl	8000390 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	020b      	lsls	r3, r1, #8
 8005e9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ea0:	0202      	lsls	r2, r0, #8
 8005ea2:	6979      	ldr	r1, [r7, #20]
 8005ea4:	6849      	ldr	r1, [r1, #4]
 8005ea6:	0849      	lsrs	r1, r1, #1
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	4605      	mov	r5, r0
 8005eae:	eb12 0804 	adds.w	r8, r2, r4
 8005eb2:	eb43 0905 	adc.w	r9, r3, r5
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	469a      	mov	sl, r3
 8005ebe:	4693      	mov	fp, r2
 8005ec0:	4652      	mov	r2, sl
 8005ec2:	465b      	mov	r3, fp
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	f7fa fa62 	bl	8000390 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eda:	d308      	bcc.n	8005eee <UART_SetConfig+0x79a>
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ee2:	d204      	bcs.n	8005eee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eea:	60da      	str	r2, [r3, #12]
 8005eec:	e17c      	b.n	80061e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ef4:	e178      	b.n	80061e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005efe:	f040 80c5 	bne.w	800608c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	dc48      	bgt.n	8005f9c <UART_SetConfig+0x848>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	db7b      	blt.n	8006006 <UART_SetConfig+0x8b2>
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d879      	bhi.n	8006006 <UART_SetConfig+0x8b2>
 8005f12:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <UART_SetConfig+0x7c4>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005fa3 	.word	0x08005fa3
 8005f1c:	08005fab 	.word	0x08005fab
 8005f20:	08006007 	.word	0x08006007
 8005f24:	08006007 	.word	0x08006007
 8005f28:	08005fb3 	.word	0x08005fb3
 8005f2c:	08006007 	.word	0x08006007
 8005f30:	08006007 	.word	0x08006007
 8005f34:	08006007 	.word	0x08006007
 8005f38:	08005fc3 	.word	0x08005fc3
 8005f3c:	08006007 	.word	0x08006007
 8005f40:	08006007 	.word	0x08006007
 8005f44:	08006007 	.word	0x08006007
 8005f48:	08006007 	.word	0x08006007
 8005f4c:	08006007 	.word	0x08006007
 8005f50:	08006007 	.word	0x08006007
 8005f54:	08006007 	.word	0x08006007
 8005f58:	08005fd3 	.word	0x08005fd3
 8005f5c:	08006007 	.word	0x08006007
 8005f60:	08006007 	.word	0x08006007
 8005f64:	08006007 	.word	0x08006007
 8005f68:	08006007 	.word	0x08006007
 8005f6c:	08006007 	.word	0x08006007
 8005f70:	08006007 	.word	0x08006007
 8005f74:	08006007 	.word	0x08006007
 8005f78:	08006007 	.word	0x08006007
 8005f7c:	08006007 	.word	0x08006007
 8005f80:	08006007 	.word	0x08006007
 8005f84:	08006007 	.word	0x08006007
 8005f88:	08006007 	.word	0x08006007
 8005f8c:	08006007 	.word	0x08006007
 8005f90:	08006007 	.word	0x08006007
 8005f94:	08006007 	.word	0x08006007
 8005f98:	08005ff9 	.word	0x08005ff9
 8005f9c:	2b40      	cmp	r3, #64	@ 0x40
 8005f9e:	d02e      	beq.n	8005ffe <UART_SetConfig+0x8aa>
 8005fa0:	e031      	b.n	8006006 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa2:	f7fd fd2f 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8005fa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fa8:	e033      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005faa:	f7fd fd41 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8005fae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fb0:	e02f      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe ff70 	bl	8004e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fc0:	e027      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fc2:	f107 0318 	add.w	r3, r7, #24
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff f8bc 	bl	8005144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fd0:	e01f      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8006088 <UART_SetConfig+0x934>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d009      	beq.n	8005ff2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fde:	4b2a      	ldr	r3, [pc, #168]	@ (8006088 <UART_SetConfig+0x934>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	08db      	lsrs	r3, r3, #3
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	4a24      	ldr	r2, [pc, #144]	@ (800607c <UART_SetConfig+0x928>)
 8005fea:	fa22 f303 	lsr.w	r3, r2, r3
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ff0:	e00f      	b.n	8006012 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005ff2:	4b22      	ldr	r3, [pc, #136]	@ (800607c <UART_SetConfig+0x928>)
 8005ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff6:	e00c      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ff8:	4b21      	ldr	r3, [pc, #132]	@ (8006080 <UART_SetConfig+0x92c>)
 8005ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ffc:	e009      	b.n	8006012 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006004:	e005      	b.n	8006012 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 80e7 	beq.w	80061e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	4a19      	ldr	r2, [pc, #100]	@ (8006084 <UART_SetConfig+0x930>)
 8006020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006024:	461a      	mov	r2, r3
 8006026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006028:	fbb3 f3f2 	udiv	r3, r3, r2
 800602c:	005a      	lsls	r2, r3, #1
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	441a      	add	r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	fbb2 f3f3 	udiv	r3, r2, r3
 800603e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006042:	2b0f      	cmp	r3, #15
 8006044:	d916      	bls.n	8006074 <UART_SetConfig+0x920>
 8006046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800604c:	d212      	bcs.n	8006074 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800604e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006050:	b29b      	uxth	r3, r3
 8006052:	f023 030f 	bic.w	r3, r3, #15
 8006056:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	b29a      	uxth	r2, r3
 8006064:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006066:	4313      	orrs	r3, r2
 8006068:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	e0b9      	b.n	80061e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800607a:	e0b5      	b.n	80061e8 <UART_SetConfig+0xa94>
 800607c:	03d09000 	.word	0x03d09000
 8006080:	003d0900 	.word	0x003d0900
 8006084:	080093cc 	.word	0x080093cc
 8006088:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800608c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006090:	2b20      	cmp	r3, #32
 8006092:	dc49      	bgt.n	8006128 <UART_SetConfig+0x9d4>
 8006094:	2b00      	cmp	r3, #0
 8006096:	db7c      	blt.n	8006192 <UART_SetConfig+0xa3e>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d87a      	bhi.n	8006192 <UART_SetConfig+0xa3e>
 800609c:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <UART_SetConfig+0x950>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	0800612f 	.word	0x0800612f
 80060a8:	08006137 	.word	0x08006137
 80060ac:	08006193 	.word	0x08006193
 80060b0:	08006193 	.word	0x08006193
 80060b4:	0800613f 	.word	0x0800613f
 80060b8:	08006193 	.word	0x08006193
 80060bc:	08006193 	.word	0x08006193
 80060c0:	08006193 	.word	0x08006193
 80060c4:	0800614f 	.word	0x0800614f
 80060c8:	08006193 	.word	0x08006193
 80060cc:	08006193 	.word	0x08006193
 80060d0:	08006193 	.word	0x08006193
 80060d4:	08006193 	.word	0x08006193
 80060d8:	08006193 	.word	0x08006193
 80060dc:	08006193 	.word	0x08006193
 80060e0:	08006193 	.word	0x08006193
 80060e4:	0800615f 	.word	0x0800615f
 80060e8:	08006193 	.word	0x08006193
 80060ec:	08006193 	.word	0x08006193
 80060f0:	08006193 	.word	0x08006193
 80060f4:	08006193 	.word	0x08006193
 80060f8:	08006193 	.word	0x08006193
 80060fc:	08006193 	.word	0x08006193
 8006100:	08006193 	.word	0x08006193
 8006104:	08006193 	.word	0x08006193
 8006108:	08006193 	.word	0x08006193
 800610c:	08006193 	.word	0x08006193
 8006110:	08006193 	.word	0x08006193
 8006114:	08006193 	.word	0x08006193
 8006118:	08006193 	.word	0x08006193
 800611c:	08006193 	.word	0x08006193
 8006120:	08006193 	.word	0x08006193
 8006124:	08006185 	.word	0x08006185
 8006128:	2b40      	cmp	r3, #64	@ 0x40
 800612a:	d02e      	beq.n	800618a <UART_SetConfig+0xa36>
 800612c:	e031      	b.n	8006192 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800612e:	f7fd fc69 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 8006132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006134:	e033      	b.n	800619e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006136:	f7fd fc7b 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 800613a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800613c:	e02f      	b.n	800619e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800613e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe feaa 	bl	8004e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800614c:	e027      	b.n	800619e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800614e:	f107 0318 	add.w	r3, r7, #24
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fff6 	bl	8005144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800615c:	e01f      	b.n	800619e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800615e:	4b2d      	ldr	r3, [pc, #180]	@ (8006214 <UART_SetConfig+0xac0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800616a:	4b2a      	ldr	r3, [pc, #168]	@ (8006214 <UART_SetConfig+0xac0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	08db      	lsrs	r3, r3, #3
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	4a28      	ldr	r2, [pc, #160]	@ (8006218 <UART_SetConfig+0xac4>)
 8006176:	fa22 f303 	lsr.w	r3, r2, r3
 800617a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800617c:	e00f      	b.n	800619e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800617e:	4b26      	ldr	r3, [pc, #152]	@ (8006218 <UART_SetConfig+0xac4>)
 8006180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006182:	e00c      	b.n	800619e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006184:	4b25      	ldr	r3, [pc, #148]	@ (800621c <UART_SetConfig+0xac8>)
 8006186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006188:	e009      	b.n	800619e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800618a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006190:	e005      	b.n	800619e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800619c:	bf00      	nop
    }

    if (pclk != 0U)
 800619e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d021      	beq.n	80061e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006220 <UART_SetConfig+0xacc>)
 80061aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ae:	461a      	mov	r2, r3
 80061b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	441a      	add	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ca:	2b0f      	cmp	r3, #15
 80061cc:	d909      	bls.n	80061e2 <UART_SetConfig+0xa8e>
 80061ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d4:	d205      	bcs.n	80061e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	b29a      	uxth	r2, r3
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60da      	str	r2, [r3, #12]
 80061e0:	e002      	b.n	80061e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2200      	movs	r2, #0
 80061fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2200      	movs	r2, #0
 8006202:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006204:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006208:	4618      	mov	r0, r3
 800620a:	3748      	adds	r7, #72	@ 0x48
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006212:	bf00      	nop
 8006214:	58024400 	.word	0x58024400
 8006218:	03d09000 	.word	0x03d09000
 800621c:	003d0900 	.word	0x003d0900
 8006220:	080093cc 	.word	0x080093cc

08006224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01a      	beq.n	800633a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006322:	d10a      	bne.n	800633a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	605a      	str	r2, [r3, #4]
  }
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b098      	sub	sp, #96	@ 0x60
 800636c:	af02      	add	r7, sp, #8
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006378:	f7fb f90c 	bl	8001594 <HAL_GetTick>
 800637c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b08      	cmp	r3, #8
 800638a:	d12f      	bne.n	80063ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800638c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006394:	2200      	movs	r2, #0
 8006396:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f88e 	bl	80064bc <UART_WaitOnFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d022      	beq.n	80063ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80063c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e6      	bne.n	80063a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e063      	b.n	80064b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d149      	bne.n	800648e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006402:	2200      	movs	r2, #0
 8006404:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f857 	bl	80064bc <UART_WaitOnFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d03c      	beq.n	800648e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	623b      	str	r3, [r7, #32]
   return(result);
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006428:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006432:	633b      	str	r3, [r7, #48]	@ 0x30
 8006434:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e6      	bne.n	8006414 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3308      	adds	r3, #8
 800644c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	60fb      	str	r3, [r7, #12]
   return(result);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006466:	61fa      	str	r2, [r7, #28]
 8006468:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	69b9      	ldr	r1, [r7, #24]
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	617b      	str	r3, [r7, #20]
   return(result);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e5      	bne.n	8006446 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e012      	b.n	80064b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3758      	adds	r7, #88	@ 0x58
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064cc:	e04f      	b.n	800656e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d04b      	beq.n	800656e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d6:	f7fb f85d 	bl	8001594 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d302      	bcc.n	80064ec <UART_WaitOnFlagUntilTimeout+0x30>
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e04e      	b.n	800658e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d037      	beq.n	800656e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b80      	cmp	r3, #128	@ 0x80
 8006502:	d034      	beq.n	800656e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b40      	cmp	r3, #64	@ 0x40
 8006508:	d031      	beq.n	800656e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b08      	cmp	r3, #8
 8006516:	d110      	bne.n	800653a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2208      	movs	r2, #8
 800651e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f839 	bl	8006598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2208      	movs	r2, #8
 800652a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e029      	b.n	800658e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006548:	d111      	bne.n	800656e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f81f 	bl	8006598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e00f      	b.n	800658e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4013      	ands	r3, r2
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	429a      	cmp	r2, r3
 800657c:	bf0c      	ite	eq
 800657e:	2301      	moveq	r3, #1
 8006580:	2300      	movne	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	429a      	cmp	r2, r3
 800658a:	d0a0      	beq.n	80064ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b095      	sub	sp, #84	@ 0x54
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065be:	643b      	str	r3, [r7, #64]	@ 0x40
 80065c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e6      	bne.n	80065a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3308      	adds	r3, #8
 80065d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006660 <UART_EndRxTransfer+0xc8>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e5      	bne.n	80065d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800660a:	2b01      	cmp	r3, #1
 800660c:	d118      	bne.n	8006640 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	60bb      	str	r3, [r7, #8]
   return(result);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f023 0310 	bic.w	r3, r3, #16
 8006622:	647b      	str	r3, [r7, #68]	@ 0x44
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6979      	ldr	r1, [r7, #20]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	613b      	str	r3, [r7, #16]
   return(result);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e6      	bne.n	800660e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006654:	bf00      	nop
 8006656:	3754      	adds	r7, #84	@ 0x54
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	effffffe 	.word	0xeffffffe

08006664 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_UARTEx_DisableFifoMode+0x16>
 8006676:	2302      	movs	r3, #2
 8006678:	e027      	b.n	80066ca <HAL_UARTEx_DisableFifoMode+0x66>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2224      	movs	r2, #36	@ 0x24
 8006686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80066a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066ea:	2302      	movs	r3, #2
 80066ec:	e02d      	b.n	800674a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2224      	movs	r2, #36	@ 0x24
 80066fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0201 	bic.w	r2, r2, #1
 8006714:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f850 	bl	80067d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006766:	2302      	movs	r3, #2
 8006768:	e02d      	b.n	80067c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2224      	movs	r2, #36	@ 0x24
 8006776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f812 	bl	80067d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d108      	bne.n	80067f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067f0:	e031      	b.n	8006856 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067f2:	2310      	movs	r3, #16
 80067f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067f6:	2310      	movs	r3, #16
 80067f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	0e5b      	lsrs	r3, r3, #25
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	0f5b      	lsrs	r3, r3, #29
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800681a:	7bbb      	ldrb	r3, [r7, #14]
 800681c:	7b3a      	ldrb	r2, [r7, #12]
 800681e:	4911      	ldr	r1, [pc, #68]	@ (8006864 <UARTEx_SetNbDataToProcess+0x94>)
 8006820:	5c8a      	ldrb	r2, [r1, r2]
 8006822:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006826:	7b3a      	ldrb	r2, [r7, #12]
 8006828:	490f      	ldr	r1, [pc, #60]	@ (8006868 <UARTEx_SetNbDataToProcess+0x98>)
 800682a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800682c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006830:	b29a      	uxth	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	7b7a      	ldrb	r2, [r7, #13]
 800683c:	4909      	ldr	r1, [pc, #36]	@ (8006864 <UARTEx_SetNbDataToProcess+0x94>)
 800683e:	5c8a      	ldrb	r2, [r1, r2]
 8006840:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006844:	7b7a      	ldrb	r2, [r7, #13]
 8006846:	4908      	ldr	r1, [pc, #32]	@ (8006868 <UARTEx_SetNbDataToProcess+0x98>)
 8006848:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800684a:	fb93 f3f2 	sdiv	r3, r3, r2
 800684e:	b29a      	uxth	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	080093e4 	.word	0x080093e4
 8006868:	080093ec 	.word	0x080093ec

0800686c <__cvt>:
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	ed2d 8b02 	vpush	{d8}
 8006872:	eeb0 8b40 	vmov.f64	d8, d0
 8006876:	b085      	sub	sp, #20
 8006878:	4617      	mov	r7, r2
 800687a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800687c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800687e:	ee18 2a90 	vmov	r2, s17
 8006882:	f025 0520 	bic.w	r5, r5, #32
 8006886:	2a00      	cmp	r2, #0
 8006888:	bfb6      	itet	lt
 800688a:	222d      	movlt	r2, #45	@ 0x2d
 800688c:	2200      	movge	r2, #0
 800688e:	eeb1 8b40 	vneglt.f64	d8, d0
 8006892:	2d46      	cmp	r5, #70	@ 0x46
 8006894:	460c      	mov	r4, r1
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	d004      	beq.n	80068a4 <__cvt+0x38>
 800689a:	2d45      	cmp	r5, #69	@ 0x45
 800689c:	d100      	bne.n	80068a0 <__cvt+0x34>
 800689e:	3401      	adds	r4, #1
 80068a0:	2102      	movs	r1, #2
 80068a2:	e000      	b.n	80068a6 <__cvt+0x3a>
 80068a4:	2103      	movs	r1, #3
 80068a6:	ab03      	add	r3, sp, #12
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	ab02      	add	r3, sp, #8
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	4622      	mov	r2, r4
 80068b0:	4633      	mov	r3, r6
 80068b2:	eeb0 0b48 	vmov.f64	d0, d8
 80068b6:	f000 ff27 	bl	8007708 <_dtoa_r>
 80068ba:	2d47      	cmp	r5, #71	@ 0x47
 80068bc:	d114      	bne.n	80068e8 <__cvt+0x7c>
 80068be:	07fb      	lsls	r3, r7, #31
 80068c0:	d50a      	bpl.n	80068d8 <__cvt+0x6c>
 80068c2:	1902      	adds	r2, r0, r4
 80068c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80068c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068cc:	bf08      	it	eq
 80068ce:	9203      	streq	r2, [sp, #12]
 80068d0:	2130      	movs	r1, #48	@ 0x30
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d319      	bcc.n	800690c <__cvt+0xa0>
 80068d8:	9b03      	ldr	r3, [sp, #12]
 80068da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068dc:	1a1b      	subs	r3, r3, r0
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	b005      	add	sp, #20
 80068e2:	ecbd 8b02 	vpop	{d8}
 80068e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e8:	2d46      	cmp	r5, #70	@ 0x46
 80068ea:	eb00 0204 	add.w	r2, r0, r4
 80068ee:	d1e9      	bne.n	80068c4 <__cvt+0x58>
 80068f0:	7803      	ldrb	r3, [r0, #0]
 80068f2:	2b30      	cmp	r3, #48	@ 0x30
 80068f4:	d107      	bne.n	8006906 <__cvt+0x9a>
 80068f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80068fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fe:	bf1c      	itt	ne
 8006900:	f1c4 0401 	rsbne	r4, r4, #1
 8006904:	6034      	strne	r4, [r6, #0]
 8006906:	6833      	ldr	r3, [r6, #0]
 8006908:	441a      	add	r2, r3
 800690a:	e7db      	b.n	80068c4 <__cvt+0x58>
 800690c:	1c5c      	adds	r4, r3, #1
 800690e:	9403      	str	r4, [sp, #12]
 8006910:	7019      	strb	r1, [r3, #0]
 8006912:	e7de      	b.n	80068d2 <__cvt+0x66>

08006914 <__exponent>:
 8006914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006916:	2900      	cmp	r1, #0
 8006918:	bfba      	itte	lt
 800691a:	4249      	neglt	r1, r1
 800691c:	232d      	movlt	r3, #45	@ 0x2d
 800691e:	232b      	movge	r3, #43	@ 0x2b
 8006920:	2909      	cmp	r1, #9
 8006922:	7002      	strb	r2, [r0, #0]
 8006924:	7043      	strb	r3, [r0, #1]
 8006926:	dd29      	ble.n	800697c <__exponent+0x68>
 8006928:	f10d 0307 	add.w	r3, sp, #7
 800692c:	461d      	mov	r5, r3
 800692e:	270a      	movs	r7, #10
 8006930:	461a      	mov	r2, r3
 8006932:	fbb1 f6f7 	udiv	r6, r1, r7
 8006936:	fb07 1416 	mls	r4, r7, r6, r1
 800693a:	3430      	adds	r4, #48	@ 0x30
 800693c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006940:	460c      	mov	r4, r1
 8006942:	2c63      	cmp	r4, #99	@ 0x63
 8006944:	f103 33ff 	add.w	r3, r3, #4294967295
 8006948:	4631      	mov	r1, r6
 800694a:	dcf1      	bgt.n	8006930 <__exponent+0x1c>
 800694c:	3130      	adds	r1, #48	@ 0x30
 800694e:	1e94      	subs	r4, r2, #2
 8006950:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006954:	1c41      	adds	r1, r0, #1
 8006956:	4623      	mov	r3, r4
 8006958:	42ab      	cmp	r3, r5
 800695a:	d30a      	bcc.n	8006972 <__exponent+0x5e>
 800695c:	f10d 0309 	add.w	r3, sp, #9
 8006960:	1a9b      	subs	r3, r3, r2
 8006962:	42ac      	cmp	r4, r5
 8006964:	bf88      	it	hi
 8006966:	2300      	movhi	r3, #0
 8006968:	3302      	adds	r3, #2
 800696a:	4403      	add	r3, r0
 800696c:	1a18      	subs	r0, r3, r0
 800696e:	b003      	add	sp, #12
 8006970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006972:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006976:	f801 6f01 	strb.w	r6, [r1, #1]!
 800697a:	e7ed      	b.n	8006958 <__exponent+0x44>
 800697c:	2330      	movs	r3, #48	@ 0x30
 800697e:	3130      	adds	r1, #48	@ 0x30
 8006980:	7083      	strb	r3, [r0, #2]
 8006982:	70c1      	strb	r1, [r0, #3]
 8006984:	1d03      	adds	r3, r0, #4
 8006986:	e7f1      	b.n	800696c <__exponent+0x58>

08006988 <_printf_float>:
 8006988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	b08d      	sub	sp, #52	@ 0x34
 800698e:	460c      	mov	r4, r1
 8006990:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006994:	4616      	mov	r6, r2
 8006996:	461f      	mov	r7, r3
 8006998:	4605      	mov	r5, r0
 800699a:	f000 fdb5 	bl	8007508 <_localeconv_r>
 800699e:	f8d0 b000 	ldr.w	fp, [r0]
 80069a2:	4658      	mov	r0, fp
 80069a4:	f7f9 fcec 	bl	8000380 <strlen>
 80069a8:	2300      	movs	r3, #0
 80069aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ac:	f8d8 3000 	ldr.w	r3, [r8]
 80069b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80069b4:	6822      	ldr	r2, [r4, #0]
 80069b6:	9005      	str	r0, [sp, #20]
 80069b8:	3307      	adds	r3, #7
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	f103 0108 	add.w	r1, r3, #8
 80069c2:	f8c8 1000 	str.w	r1, [r8]
 80069c6:	ed93 0b00 	vldr	d0, [r3]
 80069ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006c28 <_printf_float+0x2a0>
 80069ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80069d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80069d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80069de:	dd24      	ble.n	8006a2a <_printf_float+0xa2>
 80069e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80069e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e8:	d502      	bpl.n	80069f0 <_printf_float+0x68>
 80069ea:	232d      	movs	r3, #45	@ 0x2d
 80069ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069f0:	498f      	ldr	r1, [pc, #572]	@ (8006c30 <_printf_float+0x2a8>)
 80069f2:	4b90      	ldr	r3, [pc, #576]	@ (8006c34 <_printf_float+0x2ac>)
 80069f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80069f8:	bf8c      	ite	hi
 80069fa:	4688      	movhi	r8, r1
 80069fc:	4698      	movls	r8, r3
 80069fe:	f022 0204 	bic.w	r2, r2, #4
 8006a02:	2303      	movs	r3, #3
 8006a04:	6123      	str	r3, [r4, #16]
 8006a06:	6022      	str	r2, [r4, #0]
 8006a08:	f04f 0a00 	mov.w	sl, #0
 8006a0c:	9700      	str	r7, [sp, #0]
 8006a0e:	4633      	mov	r3, r6
 8006a10:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a12:	4621      	mov	r1, r4
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 f9d1 	bl	8006dbc <_printf_common>
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	f040 8089 	bne.w	8006b32 <_printf_float+0x1aa>
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	b00d      	add	sp, #52	@ 0x34
 8006a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2a:	eeb4 0b40 	vcmp.f64	d0, d0
 8006a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a32:	d709      	bvc.n	8006a48 <_printf_float+0xc0>
 8006a34:	ee10 3a90 	vmov	r3, s1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfbc      	itt	lt
 8006a3c:	232d      	movlt	r3, #45	@ 0x2d
 8006a3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a42:	497d      	ldr	r1, [pc, #500]	@ (8006c38 <_printf_float+0x2b0>)
 8006a44:	4b7d      	ldr	r3, [pc, #500]	@ (8006c3c <_printf_float+0x2b4>)
 8006a46:	e7d5      	b.n	80069f4 <_printf_float+0x6c>
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	1c59      	adds	r1, r3, #1
 8006a4c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006a50:	d139      	bne.n	8006ac6 <_printf_float+0x13e>
 8006a52:	2306      	movs	r3, #6
 8006a54:	6063      	str	r3, [r4, #4]
 8006a56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	6022      	str	r2, [r4, #0]
 8006a5e:	9303      	str	r3, [sp, #12]
 8006a60:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006a66:	ab09      	add	r3, sp, #36	@ 0x24
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	6861      	ldr	r1, [r4, #4]
 8006a6c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a70:	4628      	mov	r0, r5
 8006a72:	f7ff fefb 	bl	800686c <__cvt>
 8006a76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a7c:	4680      	mov	r8, r0
 8006a7e:	d129      	bne.n	8006ad4 <_printf_float+0x14c>
 8006a80:	1cc8      	adds	r0, r1, #3
 8006a82:	db02      	blt.n	8006a8a <_printf_float+0x102>
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	4299      	cmp	r1, r3
 8006a88:	dd41      	ble.n	8006b0e <_printf_float+0x186>
 8006a8a:	f1a9 0902 	sub.w	r9, r9, #2
 8006a8e:	fa5f f989 	uxtb.w	r9, r9
 8006a92:	3901      	subs	r1, #1
 8006a94:	464a      	mov	r2, r9
 8006a96:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a9c:	f7ff ff3a 	bl	8006914 <__exponent>
 8006aa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006aa2:	1813      	adds	r3, r2, r0
 8006aa4:	2a01      	cmp	r2, #1
 8006aa6:	4682      	mov	sl, r0
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	dc02      	bgt.n	8006ab2 <_printf_float+0x12a>
 8006aac:	6822      	ldr	r2, [r4, #0]
 8006aae:	07d2      	lsls	r2, r2, #31
 8006ab0:	d501      	bpl.n	8006ab6 <_printf_float+0x12e>
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	6123      	str	r3, [r4, #16]
 8006ab6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0a6      	beq.n	8006a0c <_printf_float+0x84>
 8006abe:	232d      	movs	r3, #45	@ 0x2d
 8006ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ac4:	e7a2      	b.n	8006a0c <_printf_float+0x84>
 8006ac6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006aca:	d1c4      	bne.n	8006a56 <_printf_float+0xce>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1c2      	bne.n	8006a56 <_printf_float+0xce>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e7bf      	b.n	8006a54 <_printf_float+0xcc>
 8006ad4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006ad8:	d9db      	bls.n	8006a92 <_printf_float+0x10a>
 8006ada:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006ade:	d118      	bne.n	8006b12 <_printf_float+0x18a>
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	6863      	ldr	r3, [r4, #4]
 8006ae4:	dd0b      	ble.n	8006afe <_printf_float+0x176>
 8006ae6:	6121      	str	r1, [r4, #16]
 8006ae8:	b913      	cbnz	r3, 8006af0 <_printf_float+0x168>
 8006aea:	6822      	ldr	r2, [r4, #0]
 8006aec:	07d0      	lsls	r0, r2, #31
 8006aee:	d502      	bpl.n	8006af6 <_printf_float+0x16e>
 8006af0:	3301      	adds	r3, #1
 8006af2:	440b      	add	r3, r1
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006af8:	f04f 0a00 	mov.w	sl, #0
 8006afc:	e7db      	b.n	8006ab6 <_printf_float+0x12e>
 8006afe:	b913      	cbnz	r3, 8006b06 <_printf_float+0x17e>
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	07d2      	lsls	r2, r2, #31
 8006b04:	d501      	bpl.n	8006b0a <_printf_float+0x182>
 8006b06:	3302      	adds	r3, #2
 8006b08:	e7f4      	b.n	8006af4 <_printf_float+0x16c>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e7f2      	b.n	8006af4 <_printf_float+0x16c>
 8006b0e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b14:	4299      	cmp	r1, r3
 8006b16:	db05      	blt.n	8006b24 <_printf_float+0x19c>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	6121      	str	r1, [r4, #16]
 8006b1c:	07d8      	lsls	r0, r3, #31
 8006b1e:	d5ea      	bpl.n	8006af6 <_printf_float+0x16e>
 8006b20:	1c4b      	adds	r3, r1, #1
 8006b22:	e7e7      	b.n	8006af4 <_printf_float+0x16c>
 8006b24:	2900      	cmp	r1, #0
 8006b26:	bfd4      	ite	le
 8006b28:	f1c1 0202 	rsble	r2, r1, #2
 8006b2c:	2201      	movgt	r2, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	e7e0      	b.n	8006af4 <_printf_float+0x16c>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	055a      	lsls	r2, r3, #21
 8006b36:	d407      	bmi.n	8006b48 <_printf_float+0x1c0>
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	4642      	mov	r2, r8
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	d12a      	bne.n	8006b9c <_printf_float+0x214>
 8006b46:	e76b      	b.n	8006a20 <_printf_float+0x98>
 8006b48:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006b4c:	f240 80e0 	bls.w	8006d10 <_printf_float+0x388>
 8006b50:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006b54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5c:	d133      	bne.n	8006bc6 <_printf_float+0x23e>
 8006b5e:	4a38      	ldr	r2, [pc, #224]	@ (8006c40 <_printf_float+0x2b8>)
 8006b60:	2301      	movs	r3, #1
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f43f af59 	beq.w	8006a20 <_printf_float+0x98>
 8006b6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b72:	4543      	cmp	r3, r8
 8006b74:	db02      	blt.n	8006b7c <_printf_float+0x1f4>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	07d8      	lsls	r0, r3, #31
 8006b7a:	d50f      	bpl.n	8006b9c <_printf_float+0x214>
 8006b7c:	9b05      	ldr	r3, [sp, #20]
 8006b7e:	465a      	mov	r2, fp
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b8      	blx	r7
 8006b86:	3001      	adds	r0, #1
 8006b88:	f43f af4a 	beq.w	8006a20 <_printf_float+0x98>
 8006b8c:	f04f 0900 	mov.w	r9, #0
 8006b90:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b94:	f104 0a1a 	add.w	sl, r4, #26
 8006b98:	45c8      	cmp	r8, r9
 8006b9a:	dc09      	bgt.n	8006bb0 <_printf_float+0x228>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	079b      	lsls	r3, r3, #30
 8006ba0:	f100 8107 	bmi.w	8006db2 <_printf_float+0x42a>
 8006ba4:	68e0      	ldr	r0, [r4, #12]
 8006ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba8:	4298      	cmp	r0, r3
 8006baa:	bfb8      	it	lt
 8006bac:	4618      	movlt	r0, r3
 8006bae:	e739      	b.n	8006a24 <_printf_float+0x9c>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	4652      	mov	r2, sl
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f43f af30 	beq.w	8006a20 <_printf_float+0x98>
 8006bc0:	f109 0901 	add.w	r9, r9, #1
 8006bc4:	e7e8      	b.n	8006b98 <_printf_float+0x210>
 8006bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc3b      	bgt.n	8006c44 <_printf_float+0x2bc>
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006c40 <_printf_float+0x2b8>)
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	f43f af22 	beq.w	8006a20 <_printf_float+0x98>
 8006bdc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006be0:	ea59 0303 	orrs.w	r3, r9, r3
 8006be4:	d102      	bne.n	8006bec <_printf_float+0x264>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	07d9      	lsls	r1, r3, #31
 8006bea:	d5d7      	bpl.n	8006b9c <_printf_float+0x214>
 8006bec:	9b05      	ldr	r3, [sp, #20]
 8006bee:	465a      	mov	r2, fp
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f af12 	beq.w	8006a20 <_printf_float+0x98>
 8006bfc:	f04f 0a00 	mov.w	sl, #0
 8006c00:	f104 0b1a 	add.w	fp, r4, #26
 8006c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c06:	425b      	negs	r3, r3
 8006c08:	4553      	cmp	r3, sl
 8006c0a:	dc01      	bgt.n	8006c10 <_printf_float+0x288>
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	e794      	b.n	8006b3a <_printf_float+0x1b2>
 8006c10:	2301      	movs	r3, #1
 8006c12:	465a      	mov	r2, fp
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f43f af00 	beq.w	8006a20 <_printf_float+0x98>
 8006c20:	f10a 0a01 	add.w	sl, sl, #1
 8006c24:	e7ee      	b.n	8006c04 <_printf_float+0x27c>
 8006c26:	bf00      	nop
 8006c28:	ffffffff 	.word	0xffffffff
 8006c2c:	7fefffff 	.word	0x7fefffff
 8006c30:	080093f8 	.word	0x080093f8
 8006c34:	080093f4 	.word	0x080093f4
 8006c38:	08009400 	.word	0x08009400
 8006c3c:	080093fc 	.word	0x080093fc
 8006c40:	08009404 	.word	0x08009404
 8006c44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c4a:	4553      	cmp	r3, sl
 8006c4c:	bfa8      	it	ge
 8006c4e:	4653      	movge	r3, sl
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	4699      	mov	r9, r3
 8006c54:	dc37      	bgt.n	8006cc6 <_printf_float+0x33e>
 8006c56:	2300      	movs	r3, #0
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c5e:	f104 021a 	add.w	r2, r4, #26
 8006c62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c64:	9907      	ldr	r1, [sp, #28]
 8006c66:	9306      	str	r3, [sp, #24]
 8006c68:	eba3 0309 	sub.w	r3, r3, r9
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	dc31      	bgt.n	8006cd4 <_printf_float+0x34c>
 8006c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c72:	459a      	cmp	sl, r3
 8006c74:	dc3b      	bgt.n	8006cee <_printf_float+0x366>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	07da      	lsls	r2, r3, #31
 8006c7a:	d438      	bmi.n	8006cee <_printf_float+0x366>
 8006c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7e:	ebaa 0903 	sub.w	r9, sl, r3
 8006c82:	9b06      	ldr	r3, [sp, #24]
 8006c84:	ebaa 0303 	sub.w	r3, sl, r3
 8006c88:	4599      	cmp	r9, r3
 8006c8a:	bfa8      	it	ge
 8006c8c:	4699      	movge	r9, r3
 8006c8e:	f1b9 0f00 	cmp.w	r9, #0
 8006c92:	dc34      	bgt.n	8006cfe <_printf_float+0x376>
 8006c94:	f04f 0800 	mov.w	r8, #0
 8006c98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c9c:	f104 0b1a 	add.w	fp, r4, #26
 8006ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ca6:	eba3 0309 	sub.w	r3, r3, r9
 8006caa:	4543      	cmp	r3, r8
 8006cac:	f77f af76 	ble.w	8006b9c <_printf_float+0x214>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	465a      	mov	r2, fp
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b8      	blx	r7
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f43f aeb0 	beq.w	8006a20 <_printf_float+0x98>
 8006cc0:	f108 0801 	add.w	r8, r8, #1
 8006cc4:	e7ec      	b.n	8006ca0 <_printf_float+0x318>
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d1c1      	bne.n	8006c56 <_printf_float+0x2ce>
 8006cd2:	e6a5      	b.n	8006a20 <_printf_float+0x98>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	9206      	str	r2, [sp, #24]
 8006cdc:	47b8      	blx	r7
 8006cde:	3001      	adds	r0, #1
 8006ce0:	f43f ae9e 	beq.w	8006a20 <_printf_float+0x98>
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	9a06      	ldr	r2, [sp, #24]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	9307      	str	r3, [sp, #28]
 8006cec:	e7b9      	b.n	8006c62 <_printf_float+0x2da>
 8006cee:	9b05      	ldr	r3, [sp, #20]
 8006cf0:	465a      	mov	r2, fp
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d1bf      	bne.n	8006c7c <_printf_float+0x2f4>
 8006cfc:	e690      	b.n	8006a20 <_printf_float+0x98>
 8006cfe:	9a06      	ldr	r2, [sp, #24]
 8006d00:	464b      	mov	r3, r9
 8006d02:	4442      	add	r2, r8
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d1c2      	bne.n	8006c94 <_printf_float+0x30c>
 8006d0e:	e687      	b.n	8006a20 <_printf_float+0x98>
 8006d10:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006d14:	f1b9 0f01 	cmp.w	r9, #1
 8006d18:	dc01      	bgt.n	8006d1e <_printf_float+0x396>
 8006d1a:	07db      	lsls	r3, r3, #31
 8006d1c:	d536      	bpl.n	8006d8c <_printf_float+0x404>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4642      	mov	r2, r8
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f43f ae79 	beq.w	8006a20 <_printf_float+0x98>
 8006d2e:	9b05      	ldr	r3, [sp, #20]
 8006d30:	465a      	mov	r2, fp
 8006d32:	4631      	mov	r1, r6
 8006d34:	4628      	mov	r0, r5
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f43f ae71 	beq.w	8006a20 <_printf_float+0x98>
 8006d3e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006d42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d4e:	d018      	beq.n	8006d82 <_printf_float+0x3fa>
 8006d50:	464b      	mov	r3, r9
 8006d52:	f108 0201 	add.w	r2, r8, #1
 8006d56:	4631      	mov	r1, r6
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b8      	blx	r7
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d10c      	bne.n	8006d7a <_printf_float+0x3f2>
 8006d60:	e65e      	b.n	8006a20 <_printf_float+0x98>
 8006d62:	2301      	movs	r3, #1
 8006d64:	465a      	mov	r2, fp
 8006d66:	4631      	mov	r1, r6
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b8      	blx	r7
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f43f ae57 	beq.w	8006a20 <_printf_float+0x98>
 8006d72:	f108 0801 	add.w	r8, r8, #1
 8006d76:	45c8      	cmp	r8, r9
 8006d78:	dbf3      	blt.n	8006d62 <_printf_float+0x3da>
 8006d7a:	4653      	mov	r3, sl
 8006d7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d80:	e6dc      	b.n	8006b3c <_printf_float+0x1b4>
 8006d82:	f04f 0800 	mov.w	r8, #0
 8006d86:	f104 0b1a 	add.w	fp, r4, #26
 8006d8a:	e7f4      	b.n	8006d76 <_printf_float+0x3ee>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4642      	mov	r2, r8
 8006d90:	e7e1      	b.n	8006d56 <_printf_float+0x3ce>
 8006d92:	2301      	movs	r3, #1
 8006d94:	464a      	mov	r2, r9
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f ae3f 	beq.w	8006a20 <_printf_float+0x98>
 8006da2:	f108 0801 	add.w	r8, r8, #1
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006daa:	1a5b      	subs	r3, r3, r1
 8006dac:	4543      	cmp	r3, r8
 8006dae:	dcf0      	bgt.n	8006d92 <_printf_float+0x40a>
 8006db0:	e6f8      	b.n	8006ba4 <_printf_float+0x21c>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	f104 0919 	add.w	r9, r4, #25
 8006dba:	e7f4      	b.n	8006da6 <_printf_float+0x41e>

08006dbc <_printf_common>:
 8006dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	4616      	mov	r6, r2
 8006dc2:	4698      	mov	r8, r3
 8006dc4:	688a      	ldr	r2, [r1, #8]
 8006dc6:	690b      	ldr	r3, [r1, #16]
 8006dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	bfb8      	it	lt
 8006dd0:	4613      	movlt	r3, r2
 8006dd2:	6033      	str	r3, [r6, #0]
 8006dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dd8:	4607      	mov	r7, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	b10a      	cbz	r2, 8006de2 <_printf_common+0x26>
 8006dde:	3301      	adds	r3, #1
 8006de0:	6033      	str	r3, [r6, #0]
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	0699      	lsls	r1, r3, #26
 8006de6:	bf42      	ittt	mi
 8006de8:	6833      	ldrmi	r3, [r6, #0]
 8006dea:	3302      	addmi	r3, #2
 8006dec:	6033      	strmi	r3, [r6, #0]
 8006dee:	6825      	ldr	r5, [r4, #0]
 8006df0:	f015 0506 	ands.w	r5, r5, #6
 8006df4:	d106      	bne.n	8006e04 <_printf_common+0x48>
 8006df6:	f104 0a19 	add.w	sl, r4, #25
 8006dfa:	68e3      	ldr	r3, [r4, #12]
 8006dfc:	6832      	ldr	r2, [r6, #0]
 8006dfe:	1a9b      	subs	r3, r3, r2
 8006e00:	42ab      	cmp	r3, r5
 8006e02:	dc26      	bgt.n	8006e52 <_printf_common+0x96>
 8006e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e08:	6822      	ldr	r2, [r4, #0]
 8006e0a:	3b00      	subs	r3, #0
 8006e0c:	bf18      	it	ne
 8006e0e:	2301      	movne	r3, #1
 8006e10:	0692      	lsls	r2, r2, #26
 8006e12:	d42b      	bmi.n	8006e6c <_printf_common+0xb0>
 8006e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e18:	4641      	mov	r1, r8
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	47c8      	blx	r9
 8006e1e:	3001      	adds	r0, #1
 8006e20:	d01e      	beq.n	8006e60 <_printf_common+0xa4>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	6922      	ldr	r2, [r4, #16]
 8006e26:	f003 0306 	and.w	r3, r3, #6
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	bf02      	ittt	eq
 8006e2e:	68e5      	ldreq	r5, [r4, #12]
 8006e30:	6833      	ldreq	r3, [r6, #0]
 8006e32:	1aed      	subeq	r5, r5, r3
 8006e34:	68a3      	ldr	r3, [r4, #8]
 8006e36:	bf0c      	ite	eq
 8006e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e3c:	2500      	movne	r5, #0
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	bfc4      	itt	gt
 8006e42:	1a9b      	subgt	r3, r3, r2
 8006e44:	18ed      	addgt	r5, r5, r3
 8006e46:	2600      	movs	r6, #0
 8006e48:	341a      	adds	r4, #26
 8006e4a:	42b5      	cmp	r5, r6
 8006e4c:	d11a      	bne.n	8006e84 <_printf_common+0xc8>
 8006e4e:	2000      	movs	r0, #0
 8006e50:	e008      	b.n	8006e64 <_printf_common+0xa8>
 8006e52:	2301      	movs	r3, #1
 8006e54:	4652      	mov	r2, sl
 8006e56:	4641      	mov	r1, r8
 8006e58:	4638      	mov	r0, r7
 8006e5a:	47c8      	blx	r9
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d103      	bne.n	8006e68 <_printf_common+0xac>
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e68:	3501      	adds	r5, #1
 8006e6a:	e7c6      	b.n	8006dfa <_printf_common+0x3e>
 8006e6c:	18e1      	adds	r1, r4, r3
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	2030      	movs	r0, #48	@ 0x30
 8006e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e76:	4422      	add	r2, r4
 8006e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e80:	3302      	adds	r3, #2
 8006e82:	e7c7      	b.n	8006e14 <_printf_common+0x58>
 8006e84:	2301      	movs	r3, #1
 8006e86:	4622      	mov	r2, r4
 8006e88:	4641      	mov	r1, r8
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	47c8      	blx	r9
 8006e8e:	3001      	adds	r0, #1
 8006e90:	d0e6      	beq.n	8006e60 <_printf_common+0xa4>
 8006e92:	3601      	adds	r6, #1
 8006e94:	e7d9      	b.n	8006e4a <_printf_common+0x8e>
	...

08006e98 <_printf_i>:
 8006e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e9c:	7e0f      	ldrb	r7, [r1, #24]
 8006e9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ea0:	2f78      	cmp	r7, #120	@ 0x78
 8006ea2:	4691      	mov	r9, r2
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	469a      	mov	sl, r3
 8006eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006eae:	d807      	bhi.n	8006ec0 <_printf_i+0x28>
 8006eb0:	2f62      	cmp	r7, #98	@ 0x62
 8006eb2:	d80a      	bhi.n	8006eca <_printf_i+0x32>
 8006eb4:	2f00      	cmp	r7, #0
 8006eb6:	f000 80d1 	beq.w	800705c <_printf_i+0x1c4>
 8006eba:	2f58      	cmp	r7, #88	@ 0x58
 8006ebc:	f000 80b8 	beq.w	8007030 <_printf_i+0x198>
 8006ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ec8:	e03a      	b.n	8006f40 <_printf_i+0xa8>
 8006eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ece:	2b15      	cmp	r3, #21
 8006ed0:	d8f6      	bhi.n	8006ec0 <_printf_i+0x28>
 8006ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ed8 <_printf_i+0x40>)
 8006ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ed8:	08006f31 	.word	0x08006f31
 8006edc:	08006f45 	.word	0x08006f45
 8006ee0:	08006ec1 	.word	0x08006ec1
 8006ee4:	08006ec1 	.word	0x08006ec1
 8006ee8:	08006ec1 	.word	0x08006ec1
 8006eec:	08006ec1 	.word	0x08006ec1
 8006ef0:	08006f45 	.word	0x08006f45
 8006ef4:	08006ec1 	.word	0x08006ec1
 8006ef8:	08006ec1 	.word	0x08006ec1
 8006efc:	08006ec1 	.word	0x08006ec1
 8006f00:	08006ec1 	.word	0x08006ec1
 8006f04:	08007043 	.word	0x08007043
 8006f08:	08006f6f 	.word	0x08006f6f
 8006f0c:	08006ffd 	.word	0x08006ffd
 8006f10:	08006ec1 	.word	0x08006ec1
 8006f14:	08006ec1 	.word	0x08006ec1
 8006f18:	08007065 	.word	0x08007065
 8006f1c:	08006ec1 	.word	0x08006ec1
 8006f20:	08006f6f 	.word	0x08006f6f
 8006f24:	08006ec1 	.word	0x08006ec1
 8006f28:	08006ec1 	.word	0x08006ec1
 8006f2c:	08007005 	.word	0x08007005
 8006f30:	6833      	ldr	r3, [r6, #0]
 8006f32:	1d1a      	adds	r2, r3, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6032      	str	r2, [r6, #0]
 8006f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f40:	2301      	movs	r3, #1
 8006f42:	e09c      	b.n	800707e <_printf_i+0x1e6>
 8006f44:	6833      	ldr	r3, [r6, #0]
 8006f46:	6820      	ldr	r0, [r4, #0]
 8006f48:	1d19      	adds	r1, r3, #4
 8006f4a:	6031      	str	r1, [r6, #0]
 8006f4c:	0606      	lsls	r6, r0, #24
 8006f4e:	d501      	bpl.n	8006f54 <_printf_i+0xbc>
 8006f50:	681d      	ldr	r5, [r3, #0]
 8006f52:	e003      	b.n	8006f5c <_printf_i+0xc4>
 8006f54:	0645      	lsls	r5, r0, #25
 8006f56:	d5fb      	bpl.n	8006f50 <_printf_i+0xb8>
 8006f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	da03      	bge.n	8006f68 <_printf_i+0xd0>
 8006f60:	232d      	movs	r3, #45	@ 0x2d
 8006f62:	426d      	negs	r5, r5
 8006f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f68:	4858      	ldr	r0, [pc, #352]	@ (80070cc <_printf_i+0x234>)
 8006f6a:	230a      	movs	r3, #10
 8006f6c:	e011      	b.n	8006f92 <_printf_i+0xfa>
 8006f6e:	6821      	ldr	r1, [r4, #0]
 8006f70:	6833      	ldr	r3, [r6, #0]
 8006f72:	0608      	lsls	r0, r1, #24
 8006f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f78:	d402      	bmi.n	8006f80 <_printf_i+0xe8>
 8006f7a:	0649      	lsls	r1, r1, #25
 8006f7c:	bf48      	it	mi
 8006f7e:	b2ad      	uxthmi	r5, r5
 8006f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f82:	4852      	ldr	r0, [pc, #328]	@ (80070cc <_printf_i+0x234>)
 8006f84:	6033      	str	r3, [r6, #0]
 8006f86:	bf14      	ite	ne
 8006f88:	230a      	movne	r3, #10
 8006f8a:	2308      	moveq	r3, #8
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f92:	6866      	ldr	r6, [r4, #4]
 8006f94:	60a6      	str	r6, [r4, #8]
 8006f96:	2e00      	cmp	r6, #0
 8006f98:	db05      	blt.n	8006fa6 <_printf_i+0x10e>
 8006f9a:	6821      	ldr	r1, [r4, #0]
 8006f9c:	432e      	orrs	r6, r5
 8006f9e:	f021 0104 	bic.w	r1, r1, #4
 8006fa2:	6021      	str	r1, [r4, #0]
 8006fa4:	d04b      	beq.n	800703e <_printf_i+0x1a6>
 8006fa6:	4616      	mov	r6, r2
 8006fa8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fac:	fb03 5711 	mls	r7, r3, r1, r5
 8006fb0:	5dc7      	ldrb	r7, [r0, r7]
 8006fb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fb6:	462f      	mov	r7, r5
 8006fb8:	42bb      	cmp	r3, r7
 8006fba:	460d      	mov	r5, r1
 8006fbc:	d9f4      	bls.n	8006fa8 <_printf_i+0x110>
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	d10b      	bne.n	8006fda <_printf_i+0x142>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	07df      	lsls	r7, r3, #31
 8006fc6:	d508      	bpl.n	8006fda <_printf_i+0x142>
 8006fc8:	6923      	ldr	r3, [r4, #16]
 8006fca:	6861      	ldr	r1, [r4, #4]
 8006fcc:	4299      	cmp	r1, r3
 8006fce:	bfde      	ittt	le
 8006fd0:	2330      	movle	r3, #48	@ 0x30
 8006fd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fda:	1b92      	subs	r2, r2, r6
 8006fdc:	6122      	str	r2, [r4, #16]
 8006fde:	f8cd a000 	str.w	sl, [sp]
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	aa03      	add	r2, sp, #12
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4640      	mov	r0, r8
 8006fea:	f7ff fee7 	bl	8006dbc <_printf_common>
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d14a      	bne.n	8007088 <_printf_i+0x1f0>
 8006ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff6:	b004      	add	sp, #16
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	f043 0320 	orr.w	r3, r3, #32
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	4832      	ldr	r0, [pc, #200]	@ (80070d0 <_printf_i+0x238>)
 8007006:	2778      	movs	r7, #120	@ 0x78
 8007008:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	6831      	ldr	r1, [r6, #0]
 8007010:	061f      	lsls	r7, r3, #24
 8007012:	f851 5b04 	ldr.w	r5, [r1], #4
 8007016:	d402      	bmi.n	800701e <_printf_i+0x186>
 8007018:	065f      	lsls	r7, r3, #25
 800701a:	bf48      	it	mi
 800701c:	b2ad      	uxthmi	r5, r5
 800701e:	6031      	str	r1, [r6, #0]
 8007020:	07d9      	lsls	r1, r3, #31
 8007022:	bf44      	itt	mi
 8007024:	f043 0320 	orrmi.w	r3, r3, #32
 8007028:	6023      	strmi	r3, [r4, #0]
 800702a:	b11d      	cbz	r5, 8007034 <_printf_i+0x19c>
 800702c:	2310      	movs	r3, #16
 800702e:	e7ad      	b.n	8006f8c <_printf_i+0xf4>
 8007030:	4826      	ldr	r0, [pc, #152]	@ (80070cc <_printf_i+0x234>)
 8007032:	e7e9      	b.n	8007008 <_printf_i+0x170>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	f023 0320 	bic.w	r3, r3, #32
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	e7f6      	b.n	800702c <_printf_i+0x194>
 800703e:	4616      	mov	r6, r2
 8007040:	e7bd      	b.n	8006fbe <_printf_i+0x126>
 8007042:	6833      	ldr	r3, [r6, #0]
 8007044:	6825      	ldr	r5, [r4, #0]
 8007046:	6961      	ldr	r1, [r4, #20]
 8007048:	1d18      	adds	r0, r3, #4
 800704a:	6030      	str	r0, [r6, #0]
 800704c:	062e      	lsls	r6, r5, #24
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	d501      	bpl.n	8007056 <_printf_i+0x1be>
 8007052:	6019      	str	r1, [r3, #0]
 8007054:	e002      	b.n	800705c <_printf_i+0x1c4>
 8007056:	0668      	lsls	r0, r5, #25
 8007058:	d5fb      	bpl.n	8007052 <_printf_i+0x1ba>
 800705a:	8019      	strh	r1, [r3, #0]
 800705c:	2300      	movs	r3, #0
 800705e:	6123      	str	r3, [r4, #16]
 8007060:	4616      	mov	r6, r2
 8007062:	e7bc      	b.n	8006fde <_printf_i+0x146>
 8007064:	6833      	ldr	r3, [r6, #0]
 8007066:	1d1a      	adds	r2, r3, #4
 8007068:	6032      	str	r2, [r6, #0]
 800706a:	681e      	ldr	r6, [r3, #0]
 800706c:	6862      	ldr	r2, [r4, #4]
 800706e:	2100      	movs	r1, #0
 8007070:	4630      	mov	r0, r6
 8007072:	f7f9 f935 	bl	80002e0 <memchr>
 8007076:	b108      	cbz	r0, 800707c <_printf_i+0x1e4>
 8007078:	1b80      	subs	r0, r0, r6
 800707a:	6060      	str	r0, [r4, #4]
 800707c:	6863      	ldr	r3, [r4, #4]
 800707e:	6123      	str	r3, [r4, #16]
 8007080:	2300      	movs	r3, #0
 8007082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007086:	e7aa      	b.n	8006fde <_printf_i+0x146>
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	4632      	mov	r2, r6
 800708c:	4649      	mov	r1, r9
 800708e:	4640      	mov	r0, r8
 8007090:	47d0      	blx	sl
 8007092:	3001      	adds	r0, #1
 8007094:	d0ad      	beq.n	8006ff2 <_printf_i+0x15a>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	079b      	lsls	r3, r3, #30
 800709a:	d413      	bmi.n	80070c4 <_printf_i+0x22c>
 800709c:	68e0      	ldr	r0, [r4, #12]
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	4298      	cmp	r0, r3
 80070a2:	bfb8      	it	lt
 80070a4:	4618      	movlt	r0, r3
 80070a6:	e7a6      	b.n	8006ff6 <_printf_i+0x15e>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4632      	mov	r2, r6
 80070ac:	4649      	mov	r1, r9
 80070ae:	4640      	mov	r0, r8
 80070b0:	47d0      	blx	sl
 80070b2:	3001      	adds	r0, #1
 80070b4:	d09d      	beq.n	8006ff2 <_printf_i+0x15a>
 80070b6:	3501      	adds	r5, #1
 80070b8:	68e3      	ldr	r3, [r4, #12]
 80070ba:	9903      	ldr	r1, [sp, #12]
 80070bc:	1a5b      	subs	r3, r3, r1
 80070be:	42ab      	cmp	r3, r5
 80070c0:	dcf2      	bgt.n	80070a8 <_printf_i+0x210>
 80070c2:	e7eb      	b.n	800709c <_printf_i+0x204>
 80070c4:	2500      	movs	r5, #0
 80070c6:	f104 0619 	add.w	r6, r4, #25
 80070ca:	e7f5      	b.n	80070b8 <_printf_i+0x220>
 80070cc:	08009406 	.word	0x08009406
 80070d0:	08009417 	.word	0x08009417

080070d4 <std>:
 80070d4:	2300      	movs	r3, #0
 80070d6:	b510      	push	{r4, lr}
 80070d8:	4604      	mov	r4, r0
 80070da:	e9c0 3300 	strd	r3, r3, [r0]
 80070de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070e2:	6083      	str	r3, [r0, #8]
 80070e4:	8181      	strh	r1, [r0, #12]
 80070e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80070e8:	81c2      	strh	r2, [r0, #14]
 80070ea:	6183      	str	r3, [r0, #24]
 80070ec:	4619      	mov	r1, r3
 80070ee:	2208      	movs	r2, #8
 80070f0:	305c      	adds	r0, #92	@ 0x5c
 80070f2:	f000 fa01 	bl	80074f8 <memset>
 80070f6:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <std+0x58>)
 80070f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80070fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007130 <std+0x5c>)
 80070fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007134 <std+0x60>)
 8007100:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007102:	4b0d      	ldr	r3, [pc, #52]	@ (8007138 <std+0x64>)
 8007104:	6323      	str	r3, [r4, #48]	@ 0x30
 8007106:	4b0d      	ldr	r3, [pc, #52]	@ (800713c <std+0x68>)
 8007108:	6224      	str	r4, [r4, #32]
 800710a:	429c      	cmp	r4, r3
 800710c:	d006      	beq.n	800711c <std+0x48>
 800710e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007112:	4294      	cmp	r4, r2
 8007114:	d002      	beq.n	800711c <std+0x48>
 8007116:	33d0      	adds	r3, #208	@ 0xd0
 8007118:	429c      	cmp	r4, r3
 800711a:	d105      	bne.n	8007128 <std+0x54>
 800711c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007124:	f000 ba64 	b.w	80075f0 <__retarget_lock_init_recursive>
 8007128:	bd10      	pop	{r4, pc}
 800712a:	bf00      	nop
 800712c:	08007349 	.word	0x08007349
 8007130:	0800736b 	.word	0x0800736b
 8007134:	080073a3 	.word	0x080073a3
 8007138:	080073c7 	.word	0x080073c7
 800713c:	24000304 	.word	0x24000304

08007140 <stdio_exit_handler>:
 8007140:	4a02      	ldr	r2, [pc, #8]	@ (800714c <stdio_exit_handler+0xc>)
 8007142:	4903      	ldr	r1, [pc, #12]	@ (8007150 <stdio_exit_handler+0x10>)
 8007144:	4803      	ldr	r0, [pc, #12]	@ (8007154 <stdio_exit_handler+0x14>)
 8007146:	f000 b869 	b.w	800721c <_fwalk_sglue>
 800714a:	bf00      	nop
 800714c:	2400001c 	.word	0x2400001c
 8007150:	08008e45 	.word	0x08008e45
 8007154:	2400002c 	.word	0x2400002c

08007158 <cleanup_stdio>:
 8007158:	6841      	ldr	r1, [r0, #4]
 800715a:	4b0c      	ldr	r3, [pc, #48]	@ (800718c <cleanup_stdio+0x34>)
 800715c:	4299      	cmp	r1, r3
 800715e:	b510      	push	{r4, lr}
 8007160:	4604      	mov	r4, r0
 8007162:	d001      	beq.n	8007168 <cleanup_stdio+0x10>
 8007164:	f001 fe6e 	bl	8008e44 <_fflush_r>
 8007168:	68a1      	ldr	r1, [r4, #8]
 800716a:	4b09      	ldr	r3, [pc, #36]	@ (8007190 <cleanup_stdio+0x38>)
 800716c:	4299      	cmp	r1, r3
 800716e:	d002      	beq.n	8007176 <cleanup_stdio+0x1e>
 8007170:	4620      	mov	r0, r4
 8007172:	f001 fe67 	bl	8008e44 <_fflush_r>
 8007176:	68e1      	ldr	r1, [r4, #12]
 8007178:	4b06      	ldr	r3, [pc, #24]	@ (8007194 <cleanup_stdio+0x3c>)
 800717a:	4299      	cmp	r1, r3
 800717c:	d004      	beq.n	8007188 <cleanup_stdio+0x30>
 800717e:	4620      	mov	r0, r4
 8007180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007184:	f001 be5e 	b.w	8008e44 <_fflush_r>
 8007188:	bd10      	pop	{r4, pc}
 800718a:	bf00      	nop
 800718c:	24000304 	.word	0x24000304
 8007190:	2400036c 	.word	0x2400036c
 8007194:	240003d4 	.word	0x240003d4

08007198 <global_stdio_init.part.0>:
 8007198:	b510      	push	{r4, lr}
 800719a:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <global_stdio_init.part.0+0x30>)
 800719c:	4c0b      	ldr	r4, [pc, #44]	@ (80071cc <global_stdio_init.part.0+0x34>)
 800719e:	4a0c      	ldr	r2, [pc, #48]	@ (80071d0 <global_stdio_init.part.0+0x38>)
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	4620      	mov	r0, r4
 80071a4:	2200      	movs	r2, #0
 80071a6:	2104      	movs	r1, #4
 80071a8:	f7ff ff94 	bl	80070d4 <std>
 80071ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071b0:	2201      	movs	r2, #1
 80071b2:	2109      	movs	r1, #9
 80071b4:	f7ff ff8e 	bl	80070d4 <std>
 80071b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071bc:	2202      	movs	r2, #2
 80071be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c2:	2112      	movs	r1, #18
 80071c4:	f7ff bf86 	b.w	80070d4 <std>
 80071c8:	2400043c 	.word	0x2400043c
 80071cc:	24000304 	.word	0x24000304
 80071d0:	08007141 	.word	0x08007141

080071d4 <__sfp_lock_acquire>:
 80071d4:	4801      	ldr	r0, [pc, #4]	@ (80071dc <__sfp_lock_acquire+0x8>)
 80071d6:	f000 ba0c 	b.w	80075f2 <__retarget_lock_acquire_recursive>
 80071da:	bf00      	nop
 80071dc:	24000445 	.word	0x24000445

080071e0 <__sfp_lock_release>:
 80071e0:	4801      	ldr	r0, [pc, #4]	@ (80071e8 <__sfp_lock_release+0x8>)
 80071e2:	f000 ba07 	b.w	80075f4 <__retarget_lock_release_recursive>
 80071e6:	bf00      	nop
 80071e8:	24000445 	.word	0x24000445

080071ec <__sinit>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	4604      	mov	r4, r0
 80071f0:	f7ff fff0 	bl	80071d4 <__sfp_lock_acquire>
 80071f4:	6a23      	ldr	r3, [r4, #32]
 80071f6:	b11b      	cbz	r3, 8007200 <__sinit+0x14>
 80071f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071fc:	f7ff bff0 	b.w	80071e0 <__sfp_lock_release>
 8007200:	4b04      	ldr	r3, [pc, #16]	@ (8007214 <__sinit+0x28>)
 8007202:	6223      	str	r3, [r4, #32]
 8007204:	4b04      	ldr	r3, [pc, #16]	@ (8007218 <__sinit+0x2c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1f5      	bne.n	80071f8 <__sinit+0xc>
 800720c:	f7ff ffc4 	bl	8007198 <global_stdio_init.part.0>
 8007210:	e7f2      	b.n	80071f8 <__sinit+0xc>
 8007212:	bf00      	nop
 8007214:	08007159 	.word	0x08007159
 8007218:	2400043c 	.word	0x2400043c

0800721c <_fwalk_sglue>:
 800721c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007220:	4607      	mov	r7, r0
 8007222:	4688      	mov	r8, r1
 8007224:	4614      	mov	r4, r2
 8007226:	2600      	movs	r6, #0
 8007228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800722c:	f1b9 0901 	subs.w	r9, r9, #1
 8007230:	d505      	bpl.n	800723e <_fwalk_sglue+0x22>
 8007232:	6824      	ldr	r4, [r4, #0]
 8007234:	2c00      	cmp	r4, #0
 8007236:	d1f7      	bne.n	8007228 <_fwalk_sglue+0xc>
 8007238:	4630      	mov	r0, r6
 800723a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800723e:	89ab      	ldrh	r3, [r5, #12]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d907      	bls.n	8007254 <_fwalk_sglue+0x38>
 8007244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007248:	3301      	adds	r3, #1
 800724a:	d003      	beq.n	8007254 <_fwalk_sglue+0x38>
 800724c:	4629      	mov	r1, r5
 800724e:	4638      	mov	r0, r7
 8007250:	47c0      	blx	r8
 8007252:	4306      	orrs	r6, r0
 8007254:	3568      	adds	r5, #104	@ 0x68
 8007256:	e7e9      	b.n	800722c <_fwalk_sglue+0x10>

08007258 <iprintf>:
 8007258:	b40f      	push	{r0, r1, r2, r3}
 800725a:	b507      	push	{r0, r1, r2, lr}
 800725c:	4906      	ldr	r1, [pc, #24]	@ (8007278 <iprintf+0x20>)
 800725e:	ab04      	add	r3, sp, #16
 8007260:	6808      	ldr	r0, [r1, #0]
 8007262:	f853 2b04 	ldr.w	r2, [r3], #4
 8007266:	6881      	ldr	r1, [r0, #8]
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	f001 fc4f 	bl	8008b0c <_vfiprintf_r>
 800726e:	b003      	add	sp, #12
 8007270:	f85d eb04 	ldr.w	lr, [sp], #4
 8007274:	b004      	add	sp, #16
 8007276:	4770      	bx	lr
 8007278:	24000028 	.word	0x24000028

0800727c <putchar>:
 800727c:	4b02      	ldr	r3, [pc, #8]	@ (8007288 <putchar+0xc>)
 800727e:	4601      	mov	r1, r0
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	6882      	ldr	r2, [r0, #8]
 8007284:	f001 be68 	b.w	8008f58 <_putc_r>
 8007288:	24000028 	.word	0x24000028

0800728c <_puts_r>:
 800728c:	6a03      	ldr	r3, [r0, #32]
 800728e:	b570      	push	{r4, r5, r6, lr}
 8007290:	6884      	ldr	r4, [r0, #8]
 8007292:	4605      	mov	r5, r0
 8007294:	460e      	mov	r6, r1
 8007296:	b90b      	cbnz	r3, 800729c <_puts_r+0x10>
 8007298:	f7ff ffa8 	bl	80071ec <__sinit>
 800729c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800729e:	07db      	lsls	r3, r3, #31
 80072a0:	d405      	bmi.n	80072ae <_puts_r+0x22>
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	0598      	lsls	r0, r3, #22
 80072a6:	d402      	bmi.n	80072ae <_puts_r+0x22>
 80072a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072aa:	f000 f9a2 	bl	80075f2 <__retarget_lock_acquire_recursive>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	0719      	lsls	r1, r3, #28
 80072b2:	d502      	bpl.n	80072ba <_puts_r+0x2e>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d135      	bne.n	8007326 <_puts_r+0x9a>
 80072ba:	4621      	mov	r1, r4
 80072bc:	4628      	mov	r0, r5
 80072be:	f000 f8c5 	bl	800744c <__swsetup_r>
 80072c2:	b380      	cbz	r0, 8007326 <_puts_r+0x9a>
 80072c4:	f04f 35ff 	mov.w	r5, #4294967295
 80072c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072ca:	07da      	lsls	r2, r3, #31
 80072cc:	d405      	bmi.n	80072da <_puts_r+0x4e>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	059b      	lsls	r3, r3, #22
 80072d2:	d402      	bmi.n	80072da <_puts_r+0x4e>
 80072d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072d6:	f000 f98d 	bl	80075f4 <__retarget_lock_release_recursive>
 80072da:	4628      	mov	r0, r5
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da04      	bge.n	80072ec <_puts_r+0x60>
 80072e2:	69a2      	ldr	r2, [r4, #24]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	dc17      	bgt.n	8007318 <_puts_r+0x8c>
 80072e8:	290a      	cmp	r1, #10
 80072ea:	d015      	beq.n	8007318 <_puts_r+0x8c>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	7019      	strb	r1, [r3, #0]
 80072f4:	68a3      	ldr	r3, [r4, #8]
 80072f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072fa:	3b01      	subs	r3, #1
 80072fc:	60a3      	str	r3, [r4, #8]
 80072fe:	2900      	cmp	r1, #0
 8007300:	d1ed      	bne.n	80072de <_puts_r+0x52>
 8007302:	2b00      	cmp	r3, #0
 8007304:	da11      	bge.n	800732a <_puts_r+0x9e>
 8007306:	4622      	mov	r2, r4
 8007308:	210a      	movs	r1, #10
 800730a:	4628      	mov	r0, r5
 800730c:	f000 f85f 	bl	80073ce <__swbuf_r>
 8007310:	3001      	adds	r0, #1
 8007312:	d0d7      	beq.n	80072c4 <_puts_r+0x38>
 8007314:	250a      	movs	r5, #10
 8007316:	e7d7      	b.n	80072c8 <_puts_r+0x3c>
 8007318:	4622      	mov	r2, r4
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f857 	bl	80073ce <__swbuf_r>
 8007320:	3001      	adds	r0, #1
 8007322:	d1e7      	bne.n	80072f4 <_puts_r+0x68>
 8007324:	e7ce      	b.n	80072c4 <_puts_r+0x38>
 8007326:	3e01      	subs	r6, #1
 8007328:	e7e4      	b.n	80072f4 <_puts_r+0x68>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	6022      	str	r2, [r4, #0]
 8007330:	220a      	movs	r2, #10
 8007332:	701a      	strb	r2, [r3, #0]
 8007334:	e7ee      	b.n	8007314 <_puts_r+0x88>
	...

08007338 <puts>:
 8007338:	4b02      	ldr	r3, [pc, #8]	@ (8007344 <puts+0xc>)
 800733a:	4601      	mov	r1, r0
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f7ff bfa5 	b.w	800728c <_puts_r>
 8007342:	bf00      	nop
 8007344:	24000028 	.word	0x24000028

08007348 <__sread>:
 8007348:	b510      	push	{r4, lr}
 800734a:	460c      	mov	r4, r1
 800734c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007350:	f000 f900 	bl	8007554 <_read_r>
 8007354:	2800      	cmp	r0, #0
 8007356:	bfab      	itete	ge
 8007358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800735a:	89a3      	ldrhlt	r3, [r4, #12]
 800735c:	181b      	addge	r3, r3, r0
 800735e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007362:	bfac      	ite	ge
 8007364:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007366:	81a3      	strhlt	r3, [r4, #12]
 8007368:	bd10      	pop	{r4, pc}

0800736a <__swrite>:
 800736a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736e:	461f      	mov	r7, r3
 8007370:	898b      	ldrh	r3, [r1, #12]
 8007372:	05db      	lsls	r3, r3, #23
 8007374:	4605      	mov	r5, r0
 8007376:	460c      	mov	r4, r1
 8007378:	4616      	mov	r6, r2
 800737a:	d505      	bpl.n	8007388 <__swrite+0x1e>
 800737c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007380:	2302      	movs	r3, #2
 8007382:	2200      	movs	r2, #0
 8007384:	f000 f8d4 	bl	8007530 <_lseek_r>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800738e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	4632      	mov	r2, r6
 8007396:	463b      	mov	r3, r7
 8007398:	4628      	mov	r0, r5
 800739a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800739e:	f000 b8eb 	b.w	8007578 <_write_r>

080073a2 <__sseek>:
 80073a2:	b510      	push	{r4, lr}
 80073a4:	460c      	mov	r4, r1
 80073a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073aa:	f000 f8c1 	bl	8007530 <_lseek_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	bf15      	itete	ne
 80073b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073be:	81a3      	strheq	r3, [r4, #12]
 80073c0:	bf18      	it	ne
 80073c2:	81a3      	strhne	r3, [r4, #12]
 80073c4:	bd10      	pop	{r4, pc}

080073c6 <__sclose>:
 80073c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ca:	f000 b8a1 	b.w	8007510 <_close_r>

080073ce <__swbuf_r>:
 80073ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d0:	460e      	mov	r6, r1
 80073d2:	4614      	mov	r4, r2
 80073d4:	4605      	mov	r5, r0
 80073d6:	b118      	cbz	r0, 80073e0 <__swbuf_r+0x12>
 80073d8:	6a03      	ldr	r3, [r0, #32]
 80073da:	b90b      	cbnz	r3, 80073e0 <__swbuf_r+0x12>
 80073dc:	f7ff ff06 	bl	80071ec <__sinit>
 80073e0:	69a3      	ldr	r3, [r4, #24]
 80073e2:	60a3      	str	r3, [r4, #8]
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	071a      	lsls	r2, r3, #28
 80073e8:	d501      	bpl.n	80073ee <__swbuf_r+0x20>
 80073ea:	6923      	ldr	r3, [r4, #16]
 80073ec:	b943      	cbnz	r3, 8007400 <__swbuf_r+0x32>
 80073ee:	4621      	mov	r1, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	f000 f82b 	bl	800744c <__swsetup_r>
 80073f6:	b118      	cbz	r0, 8007400 <__swbuf_r+0x32>
 80073f8:	f04f 37ff 	mov.w	r7, #4294967295
 80073fc:	4638      	mov	r0, r7
 80073fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	6922      	ldr	r2, [r4, #16]
 8007404:	1a98      	subs	r0, r3, r2
 8007406:	6963      	ldr	r3, [r4, #20]
 8007408:	b2f6      	uxtb	r6, r6
 800740a:	4283      	cmp	r3, r0
 800740c:	4637      	mov	r7, r6
 800740e:	dc05      	bgt.n	800741c <__swbuf_r+0x4e>
 8007410:	4621      	mov	r1, r4
 8007412:	4628      	mov	r0, r5
 8007414:	f001 fd16 	bl	8008e44 <_fflush_r>
 8007418:	2800      	cmp	r0, #0
 800741a:	d1ed      	bne.n	80073f8 <__swbuf_r+0x2a>
 800741c:	68a3      	ldr	r3, [r4, #8]
 800741e:	3b01      	subs	r3, #1
 8007420:	60a3      	str	r3, [r4, #8]
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	6022      	str	r2, [r4, #0]
 8007428:	701e      	strb	r6, [r3, #0]
 800742a:	6962      	ldr	r2, [r4, #20]
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	429a      	cmp	r2, r3
 8007430:	d004      	beq.n	800743c <__swbuf_r+0x6e>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	07db      	lsls	r3, r3, #31
 8007436:	d5e1      	bpl.n	80073fc <__swbuf_r+0x2e>
 8007438:	2e0a      	cmp	r6, #10
 800743a:	d1df      	bne.n	80073fc <__swbuf_r+0x2e>
 800743c:	4621      	mov	r1, r4
 800743e:	4628      	mov	r0, r5
 8007440:	f001 fd00 	bl	8008e44 <_fflush_r>
 8007444:	2800      	cmp	r0, #0
 8007446:	d0d9      	beq.n	80073fc <__swbuf_r+0x2e>
 8007448:	e7d6      	b.n	80073f8 <__swbuf_r+0x2a>
	...

0800744c <__swsetup_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4b29      	ldr	r3, [pc, #164]	@ (80074f4 <__swsetup_r+0xa8>)
 8007450:	4605      	mov	r5, r0
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	460c      	mov	r4, r1
 8007456:	b118      	cbz	r0, 8007460 <__swsetup_r+0x14>
 8007458:	6a03      	ldr	r3, [r0, #32]
 800745a:	b90b      	cbnz	r3, 8007460 <__swsetup_r+0x14>
 800745c:	f7ff fec6 	bl	80071ec <__sinit>
 8007460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007464:	0719      	lsls	r1, r3, #28
 8007466:	d422      	bmi.n	80074ae <__swsetup_r+0x62>
 8007468:	06da      	lsls	r2, r3, #27
 800746a:	d407      	bmi.n	800747c <__swsetup_r+0x30>
 800746c:	2209      	movs	r2, #9
 800746e:	602a      	str	r2, [r5, #0]
 8007470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007474:	81a3      	strh	r3, [r4, #12]
 8007476:	f04f 30ff 	mov.w	r0, #4294967295
 800747a:	e033      	b.n	80074e4 <__swsetup_r+0x98>
 800747c:	0758      	lsls	r0, r3, #29
 800747e:	d512      	bpl.n	80074a6 <__swsetup_r+0x5a>
 8007480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007482:	b141      	cbz	r1, 8007496 <__swsetup_r+0x4a>
 8007484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007488:	4299      	cmp	r1, r3
 800748a:	d002      	beq.n	8007492 <__swsetup_r+0x46>
 800748c:	4628      	mov	r0, r5
 800748e:	f000 fe99 	bl	80081c4 <_free_r>
 8007492:	2300      	movs	r3, #0
 8007494:	6363      	str	r3, [r4, #52]	@ 0x34
 8007496:	89a3      	ldrh	r3, [r4, #12]
 8007498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	2300      	movs	r3, #0
 80074a0:	6063      	str	r3, [r4, #4]
 80074a2:	6923      	ldr	r3, [r4, #16]
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f043 0308 	orr.w	r3, r3, #8
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	b94b      	cbnz	r3, 80074c6 <__swsetup_r+0x7a>
 80074b2:	89a3      	ldrh	r3, [r4, #12]
 80074b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074bc:	d003      	beq.n	80074c6 <__swsetup_r+0x7a>
 80074be:	4621      	mov	r1, r4
 80074c0:	4628      	mov	r0, r5
 80074c2:	f001 fd0d 	bl	8008ee0 <__smakebuf_r>
 80074c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ca:	f013 0201 	ands.w	r2, r3, #1
 80074ce:	d00a      	beq.n	80074e6 <__swsetup_r+0x9a>
 80074d0:	2200      	movs	r2, #0
 80074d2:	60a2      	str	r2, [r4, #8]
 80074d4:	6962      	ldr	r2, [r4, #20]
 80074d6:	4252      	negs	r2, r2
 80074d8:	61a2      	str	r2, [r4, #24]
 80074da:	6922      	ldr	r2, [r4, #16]
 80074dc:	b942      	cbnz	r2, 80074f0 <__swsetup_r+0xa4>
 80074de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074e2:	d1c5      	bne.n	8007470 <__swsetup_r+0x24>
 80074e4:	bd38      	pop	{r3, r4, r5, pc}
 80074e6:	0799      	lsls	r1, r3, #30
 80074e8:	bf58      	it	pl
 80074ea:	6962      	ldrpl	r2, [r4, #20]
 80074ec:	60a2      	str	r2, [r4, #8]
 80074ee:	e7f4      	b.n	80074da <__swsetup_r+0x8e>
 80074f0:	2000      	movs	r0, #0
 80074f2:	e7f7      	b.n	80074e4 <__swsetup_r+0x98>
 80074f4:	24000028 	.word	0x24000028

080074f8 <memset>:
 80074f8:	4402      	add	r2, r0
 80074fa:	4603      	mov	r3, r0
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d100      	bne.n	8007502 <memset+0xa>
 8007500:	4770      	bx	lr
 8007502:	f803 1b01 	strb.w	r1, [r3], #1
 8007506:	e7f9      	b.n	80074fc <memset+0x4>

08007508 <_localeconv_r>:
 8007508:	4800      	ldr	r0, [pc, #0]	@ (800750c <_localeconv_r+0x4>)
 800750a:	4770      	bx	lr
 800750c:	24000168 	.word	0x24000168

08007510 <_close_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d06      	ldr	r5, [pc, #24]	@ (800752c <_close_r+0x1c>)
 8007514:	2300      	movs	r3, #0
 8007516:	4604      	mov	r4, r0
 8007518:	4608      	mov	r0, r1
 800751a:	602b      	str	r3, [r5, #0]
 800751c:	f7f9 fe2a 	bl	8001174 <_close>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d102      	bne.n	800752a <_close_r+0x1a>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b103      	cbz	r3, 800752a <_close_r+0x1a>
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	24000440 	.word	0x24000440

08007530 <_lseek_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4d07      	ldr	r5, [pc, #28]	@ (8007550 <_lseek_r+0x20>)
 8007534:	4604      	mov	r4, r0
 8007536:	4608      	mov	r0, r1
 8007538:	4611      	mov	r1, r2
 800753a:	2200      	movs	r2, #0
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	f7f9 fe3f 	bl	80011c2 <_lseek>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_lseek_r+0x1e>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_lseek_r+0x1e>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	24000440 	.word	0x24000440

08007554 <_read_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d07      	ldr	r5, [pc, #28]	@ (8007574 <_read_r+0x20>)
 8007558:	4604      	mov	r4, r0
 800755a:	4608      	mov	r0, r1
 800755c:	4611      	mov	r1, r2
 800755e:	2200      	movs	r2, #0
 8007560:	602a      	str	r2, [r5, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	f7f9 fde9 	bl	800113a <_read>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_read_r+0x1e>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_read_r+0x1e>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	24000440 	.word	0x24000440

08007578 <_write_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d07      	ldr	r5, [pc, #28]	@ (8007598 <_write_r+0x20>)
 800757c:	4604      	mov	r4, r0
 800757e:	4608      	mov	r0, r1
 8007580:	4611      	mov	r1, r2
 8007582:	2200      	movs	r2, #0
 8007584:	602a      	str	r2, [r5, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	f7f9 fa46 	bl	8000a18 <_write>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_write_r+0x1e>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_write_r+0x1e>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	24000440 	.word	0x24000440

0800759c <__errno>:
 800759c:	4b01      	ldr	r3, [pc, #4]	@ (80075a4 <__errno+0x8>)
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	24000028 	.word	0x24000028

080075a8 <__libc_init_array>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	4d0d      	ldr	r5, [pc, #52]	@ (80075e0 <__libc_init_array+0x38>)
 80075ac:	4c0d      	ldr	r4, [pc, #52]	@ (80075e4 <__libc_init_array+0x3c>)
 80075ae:	1b64      	subs	r4, r4, r5
 80075b0:	10a4      	asrs	r4, r4, #2
 80075b2:	2600      	movs	r6, #0
 80075b4:	42a6      	cmp	r6, r4
 80075b6:	d109      	bne.n	80075cc <__libc_init_array+0x24>
 80075b8:	4d0b      	ldr	r5, [pc, #44]	@ (80075e8 <__libc_init_array+0x40>)
 80075ba:	4c0c      	ldr	r4, [pc, #48]	@ (80075ec <__libc_init_array+0x44>)
 80075bc:	f001 fdf0 	bl	80091a0 <_init>
 80075c0:	1b64      	subs	r4, r4, r5
 80075c2:	10a4      	asrs	r4, r4, #2
 80075c4:	2600      	movs	r6, #0
 80075c6:	42a6      	cmp	r6, r4
 80075c8:	d105      	bne.n	80075d6 <__libc_init_array+0x2e>
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d0:	4798      	blx	r3
 80075d2:	3601      	adds	r6, #1
 80075d4:	e7ee      	b.n	80075b4 <__libc_init_array+0xc>
 80075d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075da:	4798      	blx	r3
 80075dc:	3601      	adds	r6, #1
 80075de:	e7f2      	b.n	80075c6 <__libc_init_array+0x1e>
 80075e0:	08009774 	.word	0x08009774
 80075e4:	08009774 	.word	0x08009774
 80075e8:	08009774 	.word	0x08009774
 80075ec:	08009778 	.word	0x08009778

080075f0 <__retarget_lock_init_recursive>:
 80075f0:	4770      	bx	lr

080075f2 <__retarget_lock_acquire_recursive>:
 80075f2:	4770      	bx	lr

080075f4 <__retarget_lock_release_recursive>:
 80075f4:	4770      	bx	lr

080075f6 <quorem>:
 80075f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fa:	6903      	ldr	r3, [r0, #16]
 80075fc:	690c      	ldr	r4, [r1, #16]
 80075fe:	42a3      	cmp	r3, r4
 8007600:	4607      	mov	r7, r0
 8007602:	db7e      	blt.n	8007702 <quorem+0x10c>
 8007604:	3c01      	subs	r4, #1
 8007606:	f101 0814 	add.w	r8, r1, #20
 800760a:	00a3      	lsls	r3, r4, #2
 800760c:	f100 0514 	add.w	r5, r0, #20
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800761c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007620:	3301      	adds	r3, #1
 8007622:	429a      	cmp	r2, r3
 8007624:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007628:	fbb2 f6f3 	udiv	r6, r2, r3
 800762c:	d32e      	bcc.n	800768c <quorem+0x96>
 800762e:	f04f 0a00 	mov.w	sl, #0
 8007632:	46c4      	mov	ip, r8
 8007634:	46ae      	mov	lr, r5
 8007636:	46d3      	mov	fp, sl
 8007638:	f85c 3b04 	ldr.w	r3, [ip], #4
 800763c:	b298      	uxth	r0, r3
 800763e:	fb06 a000 	mla	r0, r6, r0, sl
 8007642:	0c02      	lsrs	r2, r0, #16
 8007644:	0c1b      	lsrs	r3, r3, #16
 8007646:	fb06 2303 	mla	r3, r6, r3, r2
 800764a:	f8de 2000 	ldr.w	r2, [lr]
 800764e:	b280      	uxth	r0, r0
 8007650:	b292      	uxth	r2, r2
 8007652:	1a12      	subs	r2, r2, r0
 8007654:	445a      	add	r2, fp
 8007656:	f8de 0000 	ldr.w	r0, [lr]
 800765a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800765e:	b29b      	uxth	r3, r3
 8007660:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007664:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007668:	b292      	uxth	r2, r2
 800766a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800766e:	45e1      	cmp	r9, ip
 8007670:	f84e 2b04 	str.w	r2, [lr], #4
 8007674:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007678:	d2de      	bcs.n	8007638 <quorem+0x42>
 800767a:	9b00      	ldr	r3, [sp, #0]
 800767c:	58eb      	ldr	r3, [r5, r3]
 800767e:	b92b      	cbnz	r3, 800768c <quorem+0x96>
 8007680:	9b01      	ldr	r3, [sp, #4]
 8007682:	3b04      	subs	r3, #4
 8007684:	429d      	cmp	r5, r3
 8007686:	461a      	mov	r2, r3
 8007688:	d32f      	bcc.n	80076ea <quorem+0xf4>
 800768a:	613c      	str	r4, [r7, #16]
 800768c:	4638      	mov	r0, r7
 800768e:	f001 f90b 	bl	80088a8 <__mcmp>
 8007692:	2800      	cmp	r0, #0
 8007694:	db25      	blt.n	80076e2 <quorem+0xec>
 8007696:	4629      	mov	r1, r5
 8007698:	2000      	movs	r0, #0
 800769a:	f858 2b04 	ldr.w	r2, [r8], #4
 800769e:	f8d1 c000 	ldr.w	ip, [r1]
 80076a2:	fa1f fe82 	uxth.w	lr, r2
 80076a6:	fa1f f38c 	uxth.w	r3, ip
 80076aa:	eba3 030e 	sub.w	r3, r3, lr
 80076ae:	4403      	add	r3, r0
 80076b0:	0c12      	lsrs	r2, r2, #16
 80076b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c0:	45c1      	cmp	r9, r8
 80076c2:	f841 3b04 	str.w	r3, [r1], #4
 80076c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076ca:	d2e6      	bcs.n	800769a <quorem+0xa4>
 80076cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d4:	b922      	cbnz	r2, 80076e0 <quorem+0xea>
 80076d6:	3b04      	subs	r3, #4
 80076d8:	429d      	cmp	r5, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	d30b      	bcc.n	80076f6 <quorem+0x100>
 80076de:	613c      	str	r4, [r7, #16]
 80076e0:	3601      	adds	r6, #1
 80076e2:	4630      	mov	r0, r6
 80076e4:	b003      	add	sp, #12
 80076e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	d1cb      	bne.n	800768a <quorem+0x94>
 80076f2:	3c01      	subs	r4, #1
 80076f4:	e7c6      	b.n	8007684 <quorem+0x8e>
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	3b04      	subs	r3, #4
 80076fa:	2a00      	cmp	r2, #0
 80076fc:	d1ef      	bne.n	80076de <quorem+0xe8>
 80076fe:	3c01      	subs	r4, #1
 8007700:	e7ea      	b.n	80076d8 <quorem+0xe2>
 8007702:	2000      	movs	r0, #0
 8007704:	e7ee      	b.n	80076e4 <quorem+0xee>
	...

08007708 <_dtoa_r>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	ed2d 8b02 	vpush	{d8}
 8007710:	69c7      	ldr	r7, [r0, #28]
 8007712:	b091      	sub	sp, #68	@ 0x44
 8007714:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007718:	ec55 4b10 	vmov	r4, r5, d0
 800771c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800771e:	9107      	str	r1, [sp, #28]
 8007720:	4681      	mov	r9, r0
 8007722:	9209      	str	r2, [sp, #36]	@ 0x24
 8007724:	930d      	str	r3, [sp, #52]	@ 0x34
 8007726:	b97f      	cbnz	r7, 8007748 <_dtoa_r+0x40>
 8007728:	2010      	movs	r0, #16
 800772a:	f000 fd95 	bl	8008258 <malloc>
 800772e:	4602      	mov	r2, r0
 8007730:	f8c9 001c 	str.w	r0, [r9, #28]
 8007734:	b920      	cbnz	r0, 8007740 <_dtoa_r+0x38>
 8007736:	4ba0      	ldr	r3, [pc, #640]	@ (80079b8 <_dtoa_r+0x2b0>)
 8007738:	21ef      	movs	r1, #239	@ 0xef
 800773a:	48a0      	ldr	r0, [pc, #640]	@ (80079bc <_dtoa_r+0x2b4>)
 800773c:	f001 fc80 	bl	8009040 <__assert_func>
 8007740:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007744:	6007      	str	r7, [r0, #0]
 8007746:	60c7      	str	r7, [r0, #12]
 8007748:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	b159      	cbz	r1, 8007768 <_dtoa_r+0x60>
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	604a      	str	r2, [r1, #4]
 8007754:	2301      	movs	r3, #1
 8007756:	4093      	lsls	r3, r2
 8007758:	608b      	str	r3, [r1, #8]
 800775a:	4648      	mov	r0, r9
 800775c:	f000 fe72 	bl	8008444 <_Bfree>
 8007760:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	1e2b      	subs	r3, r5, #0
 800776a:	bfbb      	ittet	lt
 800776c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007770:	9303      	strlt	r3, [sp, #12]
 8007772:	2300      	movge	r3, #0
 8007774:	2201      	movlt	r2, #1
 8007776:	bfac      	ite	ge
 8007778:	6033      	strge	r3, [r6, #0]
 800777a:	6032      	strlt	r2, [r6, #0]
 800777c:	4b90      	ldr	r3, [pc, #576]	@ (80079c0 <_dtoa_r+0x2b8>)
 800777e:	9e03      	ldr	r6, [sp, #12]
 8007780:	43b3      	bics	r3, r6
 8007782:	d110      	bne.n	80077a6 <_dtoa_r+0x9e>
 8007784:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007786:	f242 730f 	movw	r3, #9999	@ 0x270f
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007790:	4323      	orrs	r3, r4
 8007792:	f000 84e6 	beq.w	8008162 <_dtoa_r+0xa5a>
 8007796:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007798:	4f8a      	ldr	r7, [pc, #552]	@ (80079c4 <_dtoa_r+0x2bc>)
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 84e8 	beq.w	8008170 <_dtoa_r+0xa68>
 80077a0:	1cfb      	adds	r3, r7, #3
 80077a2:	f000 bce3 	b.w	800816c <_dtoa_r+0xa64>
 80077a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80077aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80077ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b2:	d10a      	bne.n	80077ca <_dtoa_r+0xc2>
 80077b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077b6:	2301      	movs	r3, #1
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80077bc:	b113      	cbz	r3, 80077c4 <_dtoa_r+0xbc>
 80077be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80077c0:	4b81      	ldr	r3, [pc, #516]	@ (80079c8 <_dtoa_r+0x2c0>)
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	4f81      	ldr	r7, [pc, #516]	@ (80079cc <_dtoa_r+0x2c4>)
 80077c6:	f000 bcd3 	b.w	8008170 <_dtoa_r+0xa68>
 80077ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80077cc:	a90f      	add	r1, sp, #60	@ 0x3c
 80077ce:	4648      	mov	r0, r9
 80077d0:	eeb0 0b48 	vmov.f64	d0, d8
 80077d4:	f001 f918 	bl	8008a08 <__d2b>
 80077d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80077dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077de:	9001      	str	r0, [sp, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d045      	beq.n	8007870 <_dtoa_r+0x168>
 80077e4:	eeb0 7b48 	vmov.f64	d7, d8
 80077e8:	ee18 1a90 	vmov	r1, s17
 80077ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80077f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80077f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80077f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80077fc:	2500      	movs	r5, #0
 80077fe:	ee07 1a90 	vmov	s15, r1
 8007802:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007806:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80079a0 <_dtoa_r+0x298>
 800780a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800780e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80079a8 <_dtoa_r+0x2a0>
 8007812:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007816:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80079b0 <_dtoa_r+0x2a8>
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007822:	eeb0 7b46 	vmov.f64	d7, d6
 8007826:	eea4 7b05 	vfma.f64	d7, d4, d5
 800782a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800782e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007836:	ee16 8a90 	vmov	r8, s13
 800783a:	d508      	bpl.n	800784e <_dtoa_r+0x146>
 800783c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007840:	eeb4 6b47 	vcmp.f64	d6, d7
 8007844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007848:	bf18      	it	ne
 800784a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800784e:	f1b8 0f16 	cmp.w	r8, #22
 8007852:	d82b      	bhi.n	80078ac <_dtoa_r+0x1a4>
 8007854:	495e      	ldr	r1, [pc, #376]	@ (80079d0 <_dtoa_r+0x2c8>)
 8007856:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800785a:	ed91 7b00 	vldr	d7, [r1]
 800785e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007866:	d501      	bpl.n	800786c <_dtoa_r+0x164>
 8007868:	f108 38ff 	add.w	r8, r8, #4294967295
 800786c:	2100      	movs	r1, #0
 800786e:	e01e      	b.n	80078ae <_dtoa_r+0x1a6>
 8007870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007872:	4413      	add	r3, r2
 8007874:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007878:	2920      	cmp	r1, #32
 800787a:	bfc1      	itttt	gt
 800787c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007880:	408e      	lslgt	r6, r1
 8007882:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007886:	fa24 f101 	lsrgt.w	r1, r4, r1
 800788a:	bfd6      	itet	le
 800788c:	f1c1 0120 	rsble	r1, r1, #32
 8007890:	4331      	orrgt	r1, r6
 8007892:	fa04 f101 	lslle.w	r1, r4, r1
 8007896:	ee07 1a90 	vmov	s15, r1
 800789a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800789e:	3b01      	subs	r3, #1
 80078a0:	ee17 1a90 	vmov	r1, s15
 80078a4:	2501      	movs	r5, #1
 80078a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80078aa:	e7a8      	b.n	80077fe <_dtoa_r+0xf6>
 80078ac:	2101      	movs	r1, #1
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	1e53      	subs	r3, r2, #1
 80078b2:	9306      	str	r3, [sp, #24]
 80078b4:	bf45      	ittet	mi
 80078b6:	f1c2 0301 	rsbmi	r3, r2, #1
 80078ba:	9304      	strmi	r3, [sp, #16]
 80078bc:	2300      	movpl	r3, #0
 80078be:	2300      	movmi	r3, #0
 80078c0:	bf4c      	ite	mi
 80078c2:	9306      	strmi	r3, [sp, #24]
 80078c4:	9304      	strpl	r3, [sp, #16]
 80078c6:	f1b8 0f00 	cmp.w	r8, #0
 80078ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80078cc:	db18      	blt.n	8007900 <_dtoa_r+0x1f8>
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80078d4:	4443      	add	r3, r8
 80078d6:	9306      	str	r3, [sp, #24]
 80078d8:	2300      	movs	r3, #0
 80078da:	9a07      	ldr	r2, [sp, #28]
 80078dc:	2a09      	cmp	r2, #9
 80078de:	d845      	bhi.n	800796c <_dtoa_r+0x264>
 80078e0:	2a05      	cmp	r2, #5
 80078e2:	bfc4      	itt	gt
 80078e4:	3a04      	subgt	r2, #4
 80078e6:	9207      	strgt	r2, [sp, #28]
 80078e8:	9a07      	ldr	r2, [sp, #28]
 80078ea:	f1a2 0202 	sub.w	r2, r2, #2
 80078ee:	bfcc      	ite	gt
 80078f0:	2400      	movgt	r4, #0
 80078f2:	2401      	movle	r4, #1
 80078f4:	2a03      	cmp	r2, #3
 80078f6:	d844      	bhi.n	8007982 <_dtoa_r+0x27a>
 80078f8:	e8df f002 	tbb	[pc, r2]
 80078fc:	0b173634 	.word	0x0b173634
 8007900:	9b04      	ldr	r3, [sp, #16]
 8007902:	2200      	movs	r2, #0
 8007904:	eba3 0308 	sub.w	r3, r3, r8
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	920a      	str	r2, [sp, #40]	@ 0x28
 800790c:	f1c8 0300 	rsb	r3, r8, #0
 8007910:	e7e3      	b.n	80078da <_dtoa_r+0x1d2>
 8007912:	2201      	movs	r2, #1
 8007914:	9208      	str	r2, [sp, #32]
 8007916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007918:	eb08 0b02 	add.w	fp, r8, r2
 800791c:	f10b 0a01 	add.w	sl, fp, #1
 8007920:	4652      	mov	r2, sl
 8007922:	2a01      	cmp	r2, #1
 8007924:	bfb8      	it	lt
 8007926:	2201      	movlt	r2, #1
 8007928:	e006      	b.n	8007938 <_dtoa_r+0x230>
 800792a:	2201      	movs	r2, #1
 800792c:	9208      	str	r2, [sp, #32]
 800792e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007930:	2a00      	cmp	r2, #0
 8007932:	dd29      	ble.n	8007988 <_dtoa_r+0x280>
 8007934:	4693      	mov	fp, r2
 8007936:	4692      	mov	sl, r2
 8007938:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800793c:	2100      	movs	r1, #0
 800793e:	2004      	movs	r0, #4
 8007940:	f100 0614 	add.w	r6, r0, #20
 8007944:	4296      	cmp	r6, r2
 8007946:	d926      	bls.n	8007996 <_dtoa_r+0x28e>
 8007948:	6079      	str	r1, [r7, #4]
 800794a:	4648      	mov	r0, r9
 800794c:	9305      	str	r3, [sp, #20]
 800794e:	f000 fd39 	bl	80083c4 <_Balloc>
 8007952:	9b05      	ldr	r3, [sp, #20]
 8007954:	4607      	mov	r7, r0
 8007956:	2800      	cmp	r0, #0
 8007958:	d13e      	bne.n	80079d8 <_dtoa_r+0x2d0>
 800795a:	4b1e      	ldr	r3, [pc, #120]	@ (80079d4 <_dtoa_r+0x2cc>)
 800795c:	4602      	mov	r2, r0
 800795e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007962:	e6ea      	b.n	800773a <_dtoa_r+0x32>
 8007964:	2200      	movs	r2, #0
 8007966:	e7e1      	b.n	800792c <_dtoa_r+0x224>
 8007968:	2200      	movs	r2, #0
 800796a:	e7d3      	b.n	8007914 <_dtoa_r+0x20c>
 800796c:	2401      	movs	r4, #1
 800796e:	2200      	movs	r2, #0
 8007970:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007974:	f04f 3bff 	mov.w	fp, #4294967295
 8007978:	2100      	movs	r1, #0
 800797a:	46da      	mov	sl, fp
 800797c:	2212      	movs	r2, #18
 800797e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007980:	e7da      	b.n	8007938 <_dtoa_r+0x230>
 8007982:	2201      	movs	r2, #1
 8007984:	9208      	str	r2, [sp, #32]
 8007986:	e7f5      	b.n	8007974 <_dtoa_r+0x26c>
 8007988:	f04f 0b01 	mov.w	fp, #1
 800798c:	46da      	mov	sl, fp
 800798e:	465a      	mov	r2, fp
 8007990:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007994:	e7d0      	b.n	8007938 <_dtoa_r+0x230>
 8007996:	3101      	adds	r1, #1
 8007998:	0040      	lsls	r0, r0, #1
 800799a:	e7d1      	b.n	8007940 <_dtoa_r+0x238>
 800799c:	f3af 8000 	nop.w
 80079a0:	636f4361 	.word	0x636f4361
 80079a4:	3fd287a7 	.word	0x3fd287a7
 80079a8:	8b60c8b3 	.word	0x8b60c8b3
 80079ac:	3fc68a28 	.word	0x3fc68a28
 80079b0:	509f79fb 	.word	0x509f79fb
 80079b4:	3fd34413 	.word	0x3fd34413
 80079b8:	08009435 	.word	0x08009435
 80079bc:	0800944c 	.word	0x0800944c
 80079c0:	7ff00000 	.word	0x7ff00000
 80079c4:	08009431 	.word	0x08009431
 80079c8:	08009405 	.word	0x08009405
 80079cc:	08009404 	.word	0x08009404
 80079d0:	080095a0 	.word	0x080095a0
 80079d4:	080094a4 	.word	0x080094a4
 80079d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80079dc:	f1ba 0f0e 	cmp.w	sl, #14
 80079e0:	6010      	str	r0, [r2, #0]
 80079e2:	d86e      	bhi.n	8007ac2 <_dtoa_r+0x3ba>
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	d06c      	beq.n	8007ac2 <_dtoa_r+0x3ba>
 80079e8:	f1b8 0f00 	cmp.w	r8, #0
 80079ec:	f340 80b4 	ble.w	8007b58 <_dtoa_r+0x450>
 80079f0:	4ac8      	ldr	r2, [pc, #800]	@ (8007d14 <_dtoa_r+0x60c>)
 80079f2:	f008 010f 	and.w	r1, r8, #15
 80079f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80079fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80079fe:	ed92 7b00 	vldr	d7, [r2]
 8007a02:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007a06:	f000 809b 	beq.w	8007b40 <_dtoa_r+0x438>
 8007a0a:	4ac3      	ldr	r2, [pc, #780]	@ (8007d18 <_dtoa_r+0x610>)
 8007a0c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007a10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007a14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007a18:	f001 010f 	and.w	r1, r1, #15
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	48be      	ldr	r0, [pc, #760]	@ (8007d18 <_dtoa_r+0x610>)
 8007a20:	2900      	cmp	r1, #0
 8007a22:	f040 808f 	bne.w	8007b44 <_dtoa_r+0x43c>
 8007a26:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007a2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007a2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	f000 80b3 	beq.w	8007ba4 <_dtoa_r+0x49c>
 8007a3e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007a42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4a:	f140 80ab 	bpl.w	8007ba4 <_dtoa_r+0x49c>
 8007a4e:	f1ba 0f00 	cmp.w	sl, #0
 8007a52:	f000 80a7 	beq.w	8007ba4 <_dtoa_r+0x49c>
 8007a56:	f1bb 0f00 	cmp.w	fp, #0
 8007a5a:	dd30      	ble.n	8007abe <_dtoa_r+0x3b6>
 8007a5c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007a60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a68:	f108 31ff 	add.w	r1, r8, #4294967295
 8007a6c:	9105      	str	r1, [sp, #20]
 8007a6e:	3201      	adds	r2, #1
 8007a70:	465c      	mov	r4, fp
 8007a72:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007a76:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007a7a:	ee07 2a90 	vmov	s15, r2
 8007a7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007a82:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007a86:	ee15 2a90 	vmov	r2, s11
 8007a8a:	ec51 0b15 	vmov	r0, r1, d5
 8007a8e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	f040 808a 	bne.w	8007bac <_dtoa_r+0x4a4>
 8007a98:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007a9c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007aa0:	ec41 0b17 	vmov	d7, r0, r1
 8007aa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aac:	f300 826a 	bgt.w	8007f84 <_dtoa_r+0x87c>
 8007ab0:	eeb1 7b47 	vneg.f64	d7, d7
 8007ab4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007abc:	d423      	bmi.n	8007b06 <_dtoa_r+0x3fe>
 8007abe:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ac2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	f2c0 8129 	blt.w	8007d1c <_dtoa_r+0x614>
 8007aca:	f1b8 0f0e 	cmp.w	r8, #14
 8007ace:	f300 8125 	bgt.w	8007d1c <_dtoa_r+0x614>
 8007ad2:	4b90      	ldr	r3, [pc, #576]	@ (8007d14 <_dtoa_r+0x60c>)
 8007ad4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007ad8:	ed93 6b00 	vldr	d6, [r3]
 8007adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f280 80c8 	bge.w	8007c74 <_dtoa_r+0x56c>
 8007ae4:	f1ba 0f00 	cmp.w	sl, #0
 8007ae8:	f300 80c4 	bgt.w	8007c74 <_dtoa_r+0x56c>
 8007aec:	d10b      	bne.n	8007b06 <_dtoa_r+0x3fe>
 8007aee:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007af2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007af6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007afa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b02:	f2c0 823c 	blt.w	8007f7e <_dtoa_r+0x876>
 8007b06:	2400      	movs	r4, #0
 8007b08:	4625      	mov	r5, r4
 8007b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	9305      	str	r3, [sp, #20]
 8007b10:	463e      	mov	r6, r7
 8007b12:	f04f 0800 	mov.w	r8, #0
 8007b16:	4621      	mov	r1, r4
 8007b18:	4648      	mov	r0, r9
 8007b1a:	f000 fc93 	bl	8008444 <_Bfree>
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	f000 80a2 	beq.w	8007c68 <_dtoa_r+0x560>
 8007b24:	f1b8 0f00 	cmp.w	r8, #0
 8007b28:	d005      	beq.n	8007b36 <_dtoa_r+0x42e>
 8007b2a:	45a8      	cmp	r8, r5
 8007b2c:	d003      	beq.n	8007b36 <_dtoa_r+0x42e>
 8007b2e:	4641      	mov	r1, r8
 8007b30:	4648      	mov	r0, r9
 8007b32:	f000 fc87 	bl	8008444 <_Bfree>
 8007b36:	4629      	mov	r1, r5
 8007b38:	4648      	mov	r0, r9
 8007b3a:	f000 fc83 	bl	8008444 <_Bfree>
 8007b3e:	e093      	b.n	8007c68 <_dtoa_r+0x560>
 8007b40:	2202      	movs	r2, #2
 8007b42:	e76c      	b.n	8007a1e <_dtoa_r+0x316>
 8007b44:	07cc      	lsls	r4, r1, #31
 8007b46:	d504      	bpl.n	8007b52 <_dtoa_r+0x44a>
 8007b48:	ed90 6b00 	vldr	d6, [r0]
 8007b4c:	3201      	adds	r2, #1
 8007b4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b52:	1049      	asrs	r1, r1, #1
 8007b54:	3008      	adds	r0, #8
 8007b56:	e763      	b.n	8007a20 <_dtoa_r+0x318>
 8007b58:	d022      	beq.n	8007ba0 <_dtoa_r+0x498>
 8007b5a:	f1c8 0100 	rsb	r1, r8, #0
 8007b5e:	4a6d      	ldr	r2, [pc, #436]	@ (8007d14 <_dtoa_r+0x60c>)
 8007b60:	f001 000f 	and.w	r0, r1, #15
 8007b64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007b68:	ed92 7b00 	vldr	d7, [r2]
 8007b6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007b70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b74:	4868      	ldr	r0, [pc, #416]	@ (8007d18 <_dtoa_r+0x610>)
 8007b76:	1109      	asrs	r1, r1, #4
 8007b78:	2400      	movs	r4, #0
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	b929      	cbnz	r1, 8007b8a <_dtoa_r+0x482>
 8007b7e:	2c00      	cmp	r4, #0
 8007b80:	f43f af57 	beq.w	8007a32 <_dtoa_r+0x32a>
 8007b84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b88:	e753      	b.n	8007a32 <_dtoa_r+0x32a>
 8007b8a:	07ce      	lsls	r6, r1, #31
 8007b8c:	d505      	bpl.n	8007b9a <_dtoa_r+0x492>
 8007b8e:	ed90 6b00 	vldr	d6, [r0]
 8007b92:	3201      	adds	r2, #1
 8007b94:	2401      	movs	r4, #1
 8007b96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b9a:	1049      	asrs	r1, r1, #1
 8007b9c:	3008      	adds	r0, #8
 8007b9e:	e7ed      	b.n	8007b7c <_dtoa_r+0x474>
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	e746      	b.n	8007a32 <_dtoa_r+0x32a>
 8007ba4:	f8cd 8014 	str.w	r8, [sp, #20]
 8007ba8:	4654      	mov	r4, sl
 8007baa:	e762      	b.n	8007a72 <_dtoa_r+0x36a>
 8007bac:	4a59      	ldr	r2, [pc, #356]	@ (8007d14 <_dtoa_r+0x60c>)
 8007bae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007bb2:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007bb6:	9a08      	ldr	r2, [sp, #32]
 8007bb8:	ec41 0b17 	vmov	d7, r0, r1
 8007bbc:	443c      	add	r4, r7
 8007bbe:	b34a      	cbz	r2, 8007c14 <_dtoa_r+0x50c>
 8007bc0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007bc4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007bc8:	463e      	mov	r6, r7
 8007bca:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007bce:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007bd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007bd6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007bda:	ee14 2a90 	vmov	r2, s9
 8007bde:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007be2:	3230      	adds	r2, #48	@ 0x30
 8007be4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007be8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf0:	f806 2b01 	strb.w	r2, [r6], #1
 8007bf4:	d438      	bmi.n	8007c68 <_dtoa_r+0x560>
 8007bf6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007bfa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c02:	d46e      	bmi.n	8007ce2 <_dtoa_r+0x5da>
 8007c04:	42a6      	cmp	r6, r4
 8007c06:	f43f af5a 	beq.w	8007abe <_dtoa_r+0x3b6>
 8007c0a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007c0e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007c12:	e7e0      	b.n	8007bd6 <_dtoa_r+0x4ce>
 8007c14:	4621      	mov	r1, r4
 8007c16:	463e      	mov	r6, r7
 8007c18:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007c1c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007c20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007c24:	ee14 2a90 	vmov	r2, s9
 8007c28:	3230      	adds	r2, #48	@ 0x30
 8007c2a:	f806 2b01 	strb.w	r2, [r6], #1
 8007c2e:	42a6      	cmp	r6, r4
 8007c30:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007c34:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007c38:	d119      	bne.n	8007c6e <_dtoa_r+0x566>
 8007c3a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007c3e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007c42:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4a:	dc4a      	bgt.n	8007ce2 <_dtoa_r+0x5da>
 8007c4c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007c50:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c58:	f57f af31 	bpl.w	8007abe <_dtoa_r+0x3b6>
 8007c5c:	460e      	mov	r6, r1
 8007c5e:	3901      	subs	r1, #1
 8007c60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c64:	2b30      	cmp	r3, #48	@ 0x30
 8007c66:	d0f9      	beq.n	8007c5c <_dtoa_r+0x554>
 8007c68:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007c6c:	e027      	b.n	8007cbe <_dtoa_r+0x5b6>
 8007c6e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007c72:	e7d5      	b.n	8007c20 <_dtoa_r+0x518>
 8007c74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c78:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007c7c:	463e      	mov	r6, r7
 8007c7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007c82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007c86:	ee15 3a10 	vmov	r3, s10
 8007c8a:	3330      	adds	r3, #48	@ 0x30
 8007c8c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c90:	1bf3      	subs	r3, r6, r7
 8007c92:	459a      	cmp	sl, r3
 8007c94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007c98:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007c9c:	d132      	bne.n	8007d04 <_dtoa_r+0x5fc>
 8007c9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007ca2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007caa:	dc18      	bgt.n	8007cde <_dtoa_r+0x5d6>
 8007cac:	eeb4 7b46 	vcmp.f64	d7, d6
 8007cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb4:	d103      	bne.n	8007cbe <_dtoa_r+0x5b6>
 8007cb6:	ee15 3a10 	vmov	r3, s10
 8007cba:	07db      	lsls	r3, r3, #31
 8007cbc:	d40f      	bmi.n	8007cde <_dtoa_r+0x5d6>
 8007cbe:	9901      	ldr	r1, [sp, #4]
 8007cc0:	4648      	mov	r0, r9
 8007cc2:	f000 fbbf 	bl	8008444 <_Bfree>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007cca:	7033      	strb	r3, [r6, #0]
 8007ccc:	f108 0301 	add.w	r3, r8, #1
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 824b 	beq.w	8008170 <_dtoa_r+0xa68>
 8007cda:	601e      	str	r6, [r3, #0]
 8007cdc:	e248      	b.n	8008170 <_dtoa_r+0xa68>
 8007cde:	f8cd 8014 	str.w	r8, [sp, #20]
 8007ce2:	4633      	mov	r3, r6
 8007ce4:	461e      	mov	r6, r3
 8007ce6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cea:	2a39      	cmp	r2, #57	@ 0x39
 8007cec:	d106      	bne.n	8007cfc <_dtoa_r+0x5f4>
 8007cee:	429f      	cmp	r7, r3
 8007cf0:	d1f8      	bne.n	8007ce4 <_dtoa_r+0x5dc>
 8007cf2:	9a05      	ldr	r2, [sp, #20]
 8007cf4:	3201      	adds	r2, #1
 8007cf6:	9205      	str	r2, [sp, #20]
 8007cf8:	2230      	movs	r2, #48	@ 0x30
 8007cfa:	703a      	strb	r2, [r7, #0]
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	3201      	adds	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e7b1      	b.n	8007c68 <_dtoa_r+0x560>
 8007d04:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d10:	d1b5      	bne.n	8007c7e <_dtoa_r+0x576>
 8007d12:	e7d4      	b.n	8007cbe <_dtoa_r+0x5b6>
 8007d14:	080095a0 	.word	0x080095a0
 8007d18:	08009578 	.word	0x08009578
 8007d1c:	9908      	ldr	r1, [sp, #32]
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	f000 80e9 	beq.w	8007ef6 <_dtoa_r+0x7ee>
 8007d24:	9907      	ldr	r1, [sp, #28]
 8007d26:	2901      	cmp	r1, #1
 8007d28:	f300 80cb 	bgt.w	8007ec2 <_dtoa_r+0x7ba>
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	f000 80c4 	beq.w	8007eba <_dtoa_r+0x7b2>
 8007d32:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007d36:	9e04      	ldr	r6, [sp, #16]
 8007d38:	461c      	mov	r4, r3
 8007d3a:	9305      	str	r3, [sp, #20]
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	4413      	add	r3, r2
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	9b06      	ldr	r3, [sp, #24]
 8007d44:	2101      	movs	r1, #1
 8007d46:	4413      	add	r3, r2
 8007d48:	4648      	mov	r0, r9
 8007d4a:	9306      	str	r3, [sp, #24]
 8007d4c:	f000 fc2e 	bl	80085ac <__i2b>
 8007d50:	9b05      	ldr	r3, [sp, #20]
 8007d52:	4605      	mov	r5, r0
 8007d54:	b166      	cbz	r6, 8007d70 <_dtoa_r+0x668>
 8007d56:	9a06      	ldr	r2, [sp, #24]
 8007d58:	2a00      	cmp	r2, #0
 8007d5a:	dd09      	ble.n	8007d70 <_dtoa_r+0x668>
 8007d5c:	42b2      	cmp	r2, r6
 8007d5e:	9904      	ldr	r1, [sp, #16]
 8007d60:	bfa8      	it	ge
 8007d62:	4632      	movge	r2, r6
 8007d64:	1a89      	subs	r1, r1, r2
 8007d66:	9104      	str	r1, [sp, #16]
 8007d68:	9906      	ldr	r1, [sp, #24]
 8007d6a:	1ab6      	subs	r6, r6, r2
 8007d6c:	1a8a      	subs	r2, r1, r2
 8007d6e:	9206      	str	r2, [sp, #24]
 8007d70:	b30b      	cbz	r3, 8007db6 <_dtoa_r+0x6ae>
 8007d72:	9a08      	ldr	r2, [sp, #32]
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	f000 80c5 	beq.w	8007f04 <_dtoa_r+0x7fc>
 8007d7a:	2c00      	cmp	r4, #0
 8007d7c:	f000 80bf 	beq.w	8007efe <_dtoa_r+0x7f6>
 8007d80:	4629      	mov	r1, r5
 8007d82:	4622      	mov	r2, r4
 8007d84:	4648      	mov	r0, r9
 8007d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d88:	f000 fcc8 	bl	800871c <__pow5mult>
 8007d8c:	9a01      	ldr	r2, [sp, #4]
 8007d8e:	4601      	mov	r1, r0
 8007d90:	4605      	mov	r5, r0
 8007d92:	4648      	mov	r0, r9
 8007d94:	f000 fc20 	bl	80085d8 <__multiply>
 8007d98:	9901      	ldr	r1, [sp, #4]
 8007d9a:	9005      	str	r0, [sp, #20]
 8007d9c:	4648      	mov	r0, r9
 8007d9e:	f000 fb51 	bl	8008444 <_Bfree>
 8007da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007da4:	1b1b      	subs	r3, r3, r4
 8007da6:	f000 80b0 	beq.w	8007f0a <_dtoa_r+0x802>
 8007daa:	9905      	ldr	r1, [sp, #20]
 8007dac:	461a      	mov	r2, r3
 8007dae:	4648      	mov	r0, r9
 8007db0:	f000 fcb4 	bl	800871c <__pow5mult>
 8007db4:	9001      	str	r0, [sp, #4]
 8007db6:	2101      	movs	r1, #1
 8007db8:	4648      	mov	r0, r9
 8007dba:	f000 fbf7 	bl	80085ac <__i2b>
 8007dbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 81da 	beq.w	800817c <_dtoa_r+0xa74>
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4601      	mov	r1, r0
 8007dcc:	4648      	mov	r0, r9
 8007dce:	f000 fca5 	bl	800871c <__pow5mult>
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	f300 80a0 	bgt.w	8007f1c <_dtoa_r+0x814>
 8007ddc:	9b02      	ldr	r3, [sp, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f040 8096 	bne.w	8007f10 <_dtoa_r+0x808>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007dea:	2a00      	cmp	r2, #0
 8007dec:	f040 8092 	bne.w	8007f14 <_dtoa_r+0x80c>
 8007df0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007df4:	0d12      	lsrs	r2, r2, #20
 8007df6:	0512      	lsls	r2, r2, #20
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	f000 808d 	beq.w	8007f18 <_dtoa_r+0x810>
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	3301      	adds	r3, #1
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	9b06      	ldr	r3, [sp, #24]
 8007e06:	3301      	adds	r3, #1
 8007e08:	9306      	str	r3, [sp, #24]
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 81b9 	beq.w	8008188 <_dtoa_r+0xa80>
 8007e16:	6922      	ldr	r2, [r4, #16]
 8007e18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007e1c:	6910      	ldr	r0, [r2, #16]
 8007e1e:	f000 fb79 	bl	8008514 <__hi0bits>
 8007e22:	f1c0 0020 	rsb	r0, r0, #32
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	4418      	add	r0, r3
 8007e2a:	f010 001f 	ands.w	r0, r0, #31
 8007e2e:	f000 8081 	beq.w	8007f34 <_dtoa_r+0x82c>
 8007e32:	f1c0 0220 	rsb	r2, r0, #32
 8007e36:	2a04      	cmp	r2, #4
 8007e38:	dd73      	ble.n	8007f22 <_dtoa_r+0x81a>
 8007e3a:	9b04      	ldr	r3, [sp, #16]
 8007e3c:	f1c0 001c 	rsb	r0, r0, #28
 8007e40:	4403      	add	r3, r0
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	9b06      	ldr	r3, [sp, #24]
 8007e46:	4406      	add	r6, r0
 8007e48:	4403      	add	r3, r0
 8007e4a:	9306      	str	r3, [sp, #24]
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	dd05      	ble.n	8007e5e <_dtoa_r+0x756>
 8007e52:	9901      	ldr	r1, [sp, #4]
 8007e54:	461a      	mov	r2, r3
 8007e56:	4648      	mov	r0, r9
 8007e58:	f000 fcba 	bl	80087d0 <__lshift>
 8007e5c:	9001      	str	r0, [sp, #4]
 8007e5e:	9b06      	ldr	r3, [sp, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dd05      	ble.n	8007e70 <_dtoa_r+0x768>
 8007e64:	4621      	mov	r1, r4
 8007e66:	461a      	mov	r2, r3
 8007e68:	4648      	mov	r0, r9
 8007e6a:	f000 fcb1 	bl	80087d0 <__lshift>
 8007e6e:	4604      	mov	r4, r0
 8007e70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d060      	beq.n	8007f38 <_dtoa_r+0x830>
 8007e76:	9801      	ldr	r0, [sp, #4]
 8007e78:	4621      	mov	r1, r4
 8007e7a:	f000 fd15 	bl	80088a8 <__mcmp>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	da5a      	bge.n	8007f38 <_dtoa_r+0x830>
 8007e82:	f108 33ff 	add.w	r3, r8, #4294967295
 8007e86:	9305      	str	r3, [sp, #20]
 8007e88:	9901      	ldr	r1, [sp, #4]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	220a      	movs	r2, #10
 8007e8e:	4648      	mov	r0, r9
 8007e90:	f000 fafa 	bl	8008488 <__multadd>
 8007e94:	9b08      	ldr	r3, [sp, #32]
 8007e96:	9001      	str	r0, [sp, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 8177 	beq.w	800818c <_dtoa_r+0xa84>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	220a      	movs	r2, #10
 8007ea4:	4648      	mov	r0, r9
 8007ea6:	f000 faef 	bl	8008488 <__multadd>
 8007eaa:	f1bb 0f00 	cmp.w	fp, #0
 8007eae:	4605      	mov	r5, r0
 8007eb0:	dc6e      	bgt.n	8007f90 <_dtoa_r+0x888>
 8007eb2:	9b07      	ldr	r3, [sp, #28]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	dc48      	bgt.n	8007f4a <_dtoa_r+0x842>
 8007eb8:	e06a      	b.n	8007f90 <_dtoa_r+0x888>
 8007eba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ebc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007ec0:	e739      	b.n	8007d36 <_dtoa_r+0x62e>
 8007ec2:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	db07      	blt.n	8007eda <_dtoa_r+0x7d2>
 8007eca:	f1ba 0f00 	cmp.w	sl, #0
 8007ece:	eba3 0404 	sub.w	r4, r3, r4
 8007ed2:	db0b      	blt.n	8007eec <_dtoa_r+0x7e4>
 8007ed4:	9e04      	ldr	r6, [sp, #16]
 8007ed6:	4652      	mov	r2, sl
 8007ed8:	e72f      	b.n	8007d3a <_dtoa_r+0x632>
 8007eda:	1ae2      	subs	r2, r4, r3
 8007edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ede:	9e04      	ldr	r6, [sp, #16]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ee4:	4652      	mov	r2, sl
 8007ee6:	4623      	mov	r3, r4
 8007ee8:	2400      	movs	r4, #0
 8007eea:	e726      	b.n	8007d3a <_dtoa_r+0x632>
 8007eec:	9a04      	ldr	r2, [sp, #16]
 8007eee:	eba2 060a 	sub.w	r6, r2, sl
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	e721      	b.n	8007d3a <_dtoa_r+0x632>
 8007ef6:	9e04      	ldr	r6, [sp, #16]
 8007ef8:	9d08      	ldr	r5, [sp, #32]
 8007efa:	461c      	mov	r4, r3
 8007efc:	e72a      	b.n	8007d54 <_dtoa_r+0x64c>
 8007efe:	9a01      	ldr	r2, [sp, #4]
 8007f00:	9205      	str	r2, [sp, #20]
 8007f02:	e752      	b.n	8007daa <_dtoa_r+0x6a2>
 8007f04:	9901      	ldr	r1, [sp, #4]
 8007f06:	461a      	mov	r2, r3
 8007f08:	e751      	b.n	8007dae <_dtoa_r+0x6a6>
 8007f0a:	9b05      	ldr	r3, [sp, #20]
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	e752      	b.n	8007db6 <_dtoa_r+0x6ae>
 8007f10:	2300      	movs	r3, #0
 8007f12:	e77b      	b.n	8007e0c <_dtoa_r+0x704>
 8007f14:	9b02      	ldr	r3, [sp, #8]
 8007f16:	e779      	b.n	8007e0c <_dtoa_r+0x704>
 8007f18:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007f1a:	e778      	b.n	8007e0e <_dtoa_r+0x706>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f20:	e779      	b.n	8007e16 <_dtoa_r+0x70e>
 8007f22:	d093      	beq.n	8007e4c <_dtoa_r+0x744>
 8007f24:	9b04      	ldr	r3, [sp, #16]
 8007f26:	321c      	adds	r2, #28
 8007f28:	4413      	add	r3, r2
 8007f2a:	9304      	str	r3, [sp, #16]
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	4416      	add	r6, r2
 8007f30:	4413      	add	r3, r2
 8007f32:	e78a      	b.n	8007e4a <_dtoa_r+0x742>
 8007f34:	4602      	mov	r2, r0
 8007f36:	e7f5      	b.n	8007f24 <_dtoa_r+0x81c>
 8007f38:	f1ba 0f00 	cmp.w	sl, #0
 8007f3c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007f40:	46d3      	mov	fp, sl
 8007f42:	dc21      	bgt.n	8007f88 <_dtoa_r+0x880>
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	dd1e      	ble.n	8007f88 <_dtoa_r+0x880>
 8007f4a:	f1bb 0f00 	cmp.w	fp, #0
 8007f4e:	f47f addc 	bne.w	8007b0a <_dtoa_r+0x402>
 8007f52:	4621      	mov	r1, r4
 8007f54:	465b      	mov	r3, fp
 8007f56:	2205      	movs	r2, #5
 8007f58:	4648      	mov	r0, r9
 8007f5a:	f000 fa95 	bl	8008488 <__multadd>
 8007f5e:	4601      	mov	r1, r0
 8007f60:	4604      	mov	r4, r0
 8007f62:	9801      	ldr	r0, [sp, #4]
 8007f64:	f000 fca0 	bl	80088a8 <__mcmp>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f77f adce 	ble.w	8007b0a <_dtoa_r+0x402>
 8007f6e:	463e      	mov	r6, r7
 8007f70:	2331      	movs	r3, #49	@ 0x31
 8007f72:	f806 3b01 	strb.w	r3, [r6], #1
 8007f76:	9b05      	ldr	r3, [sp, #20]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	9305      	str	r3, [sp, #20]
 8007f7c:	e5c9      	b.n	8007b12 <_dtoa_r+0x40a>
 8007f7e:	f8cd 8014 	str.w	r8, [sp, #20]
 8007f82:	4654      	mov	r4, sl
 8007f84:	4625      	mov	r5, r4
 8007f86:	e7f2      	b.n	8007f6e <_dtoa_r+0x866>
 8007f88:	9b08      	ldr	r3, [sp, #32]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 8102 	beq.w	8008194 <_dtoa_r+0xa8c>
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	dd05      	ble.n	8007fa0 <_dtoa_r+0x898>
 8007f94:	4629      	mov	r1, r5
 8007f96:	4632      	mov	r2, r6
 8007f98:	4648      	mov	r0, r9
 8007f9a:	f000 fc19 	bl	80087d0 <__lshift>
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d058      	beq.n	8008058 <_dtoa_r+0x950>
 8007fa6:	6869      	ldr	r1, [r5, #4]
 8007fa8:	4648      	mov	r0, r9
 8007faa:	f000 fa0b 	bl	80083c4 <_Balloc>
 8007fae:	4606      	mov	r6, r0
 8007fb0:	b928      	cbnz	r0, 8007fbe <_dtoa_r+0x8b6>
 8007fb2:	4b82      	ldr	r3, [pc, #520]	@ (80081bc <_dtoa_r+0xab4>)
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007fba:	f7ff bbbe 	b.w	800773a <_dtoa_r+0x32>
 8007fbe:	692a      	ldr	r2, [r5, #16]
 8007fc0:	3202      	adds	r2, #2
 8007fc2:	0092      	lsls	r2, r2, #2
 8007fc4:	f105 010c 	add.w	r1, r5, #12
 8007fc8:	300c      	adds	r0, #12
 8007fca:	f001 f82b 	bl	8009024 <memcpy>
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4648      	mov	r0, r9
 8007fd4:	f000 fbfc 	bl	80087d0 <__lshift>
 8007fd8:	1c7b      	adds	r3, r7, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	eb07 030b 	add.w	r3, r7, fp
 8007fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe2:	9b02      	ldr	r3, [sp, #8]
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	46a8      	mov	r8, r5
 8007fea:	9308      	str	r3, [sp, #32]
 8007fec:	4605      	mov	r5, r0
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	9801      	ldr	r0, [sp, #4]
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ff8:	f7ff fafd 	bl	80075f6 <quorem>
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	9002      	str	r0, [sp, #8]
 8008000:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008004:	9801      	ldr	r0, [sp, #4]
 8008006:	f000 fc4f 	bl	80088a8 <__mcmp>
 800800a:	462a      	mov	r2, r5
 800800c:	9006      	str	r0, [sp, #24]
 800800e:	4621      	mov	r1, r4
 8008010:	4648      	mov	r0, r9
 8008012:	f000 fc65 	bl	80088e0 <__mdiff>
 8008016:	68c2      	ldr	r2, [r0, #12]
 8008018:	4606      	mov	r6, r0
 800801a:	b9fa      	cbnz	r2, 800805c <_dtoa_r+0x954>
 800801c:	4601      	mov	r1, r0
 800801e:	9801      	ldr	r0, [sp, #4]
 8008020:	f000 fc42 	bl	80088a8 <__mcmp>
 8008024:	4602      	mov	r2, r0
 8008026:	4631      	mov	r1, r6
 8008028:	4648      	mov	r0, r9
 800802a:	920a      	str	r2, [sp, #40]	@ 0x28
 800802c:	f000 fa0a 	bl	8008444 <_Bfree>
 8008030:	9b07      	ldr	r3, [sp, #28]
 8008032:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008034:	9e04      	ldr	r6, [sp, #16]
 8008036:	ea42 0103 	orr.w	r1, r2, r3
 800803a:	9b08      	ldr	r3, [sp, #32]
 800803c:	4319      	orrs	r1, r3
 800803e:	d10f      	bne.n	8008060 <_dtoa_r+0x958>
 8008040:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008044:	d028      	beq.n	8008098 <_dtoa_r+0x990>
 8008046:	9b06      	ldr	r3, [sp, #24]
 8008048:	2b00      	cmp	r3, #0
 800804a:	dd02      	ble.n	8008052 <_dtoa_r+0x94a>
 800804c:	9b02      	ldr	r3, [sp, #8]
 800804e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008052:	f88b a000 	strb.w	sl, [fp]
 8008056:	e55e      	b.n	8007b16 <_dtoa_r+0x40e>
 8008058:	4628      	mov	r0, r5
 800805a:	e7bd      	b.n	8007fd8 <_dtoa_r+0x8d0>
 800805c:	2201      	movs	r2, #1
 800805e:	e7e2      	b.n	8008026 <_dtoa_r+0x91e>
 8008060:	9b06      	ldr	r3, [sp, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	db04      	blt.n	8008070 <_dtoa_r+0x968>
 8008066:	9907      	ldr	r1, [sp, #28]
 8008068:	430b      	orrs	r3, r1
 800806a:	9908      	ldr	r1, [sp, #32]
 800806c:	430b      	orrs	r3, r1
 800806e:	d120      	bne.n	80080b2 <_dtoa_r+0x9aa>
 8008070:	2a00      	cmp	r2, #0
 8008072:	ddee      	ble.n	8008052 <_dtoa_r+0x94a>
 8008074:	9901      	ldr	r1, [sp, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	4648      	mov	r0, r9
 800807a:	f000 fba9 	bl	80087d0 <__lshift>
 800807e:	4621      	mov	r1, r4
 8008080:	9001      	str	r0, [sp, #4]
 8008082:	f000 fc11 	bl	80088a8 <__mcmp>
 8008086:	2800      	cmp	r0, #0
 8008088:	dc03      	bgt.n	8008092 <_dtoa_r+0x98a>
 800808a:	d1e2      	bne.n	8008052 <_dtoa_r+0x94a>
 800808c:	f01a 0f01 	tst.w	sl, #1
 8008090:	d0df      	beq.n	8008052 <_dtoa_r+0x94a>
 8008092:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008096:	d1d9      	bne.n	800804c <_dtoa_r+0x944>
 8008098:	2339      	movs	r3, #57	@ 0x39
 800809a:	f88b 3000 	strb.w	r3, [fp]
 800809e:	4633      	mov	r3, r6
 80080a0:	461e      	mov	r6, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80080a8:	2a39      	cmp	r2, #57	@ 0x39
 80080aa:	d052      	beq.n	8008152 <_dtoa_r+0xa4a>
 80080ac:	3201      	adds	r2, #1
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	e531      	b.n	8007b16 <_dtoa_r+0x40e>
 80080b2:	2a00      	cmp	r2, #0
 80080b4:	dd07      	ble.n	80080c6 <_dtoa_r+0x9be>
 80080b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80080ba:	d0ed      	beq.n	8008098 <_dtoa_r+0x990>
 80080bc:	f10a 0301 	add.w	r3, sl, #1
 80080c0:	f88b 3000 	strb.w	r3, [fp]
 80080c4:	e527      	b.n	8007b16 <_dtoa_r+0x40e>
 80080c6:	9b04      	ldr	r3, [sp, #16]
 80080c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ca:	f803 ac01 	strb.w	sl, [r3, #-1]
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d029      	beq.n	8008126 <_dtoa_r+0xa1e>
 80080d2:	9901      	ldr	r1, [sp, #4]
 80080d4:	2300      	movs	r3, #0
 80080d6:	220a      	movs	r2, #10
 80080d8:	4648      	mov	r0, r9
 80080da:	f000 f9d5 	bl	8008488 <__multadd>
 80080de:	45a8      	cmp	r8, r5
 80080e0:	9001      	str	r0, [sp, #4]
 80080e2:	f04f 0300 	mov.w	r3, #0
 80080e6:	f04f 020a 	mov.w	r2, #10
 80080ea:	4641      	mov	r1, r8
 80080ec:	4648      	mov	r0, r9
 80080ee:	d107      	bne.n	8008100 <_dtoa_r+0x9f8>
 80080f0:	f000 f9ca 	bl	8008488 <__multadd>
 80080f4:	4680      	mov	r8, r0
 80080f6:	4605      	mov	r5, r0
 80080f8:	9b04      	ldr	r3, [sp, #16]
 80080fa:	3301      	adds	r3, #1
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	e776      	b.n	8007fee <_dtoa_r+0x8e6>
 8008100:	f000 f9c2 	bl	8008488 <__multadd>
 8008104:	4629      	mov	r1, r5
 8008106:	4680      	mov	r8, r0
 8008108:	2300      	movs	r3, #0
 800810a:	220a      	movs	r2, #10
 800810c:	4648      	mov	r0, r9
 800810e:	f000 f9bb 	bl	8008488 <__multadd>
 8008112:	4605      	mov	r5, r0
 8008114:	e7f0      	b.n	80080f8 <_dtoa_r+0x9f0>
 8008116:	f1bb 0f00 	cmp.w	fp, #0
 800811a:	bfcc      	ite	gt
 800811c:	465e      	movgt	r6, fp
 800811e:	2601      	movle	r6, #1
 8008120:	443e      	add	r6, r7
 8008122:	f04f 0800 	mov.w	r8, #0
 8008126:	9901      	ldr	r1, [sp, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	4648      	mov	r0, r9
 800812c:	f000 fb50 	bl	80087d0 <__lshift>
 8008130:	4621      	mov	r1, r4
 8008132:	9001      	str	r0, [sp, #4]
 8008134:	f000 fbb8 	bl	80088a8 <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	dcb0      	bgt.n	800809e <_dtoa_r+0x996>
 800813c:	d102      	bne.n	8008144 <_dtoa_r+0xa3c>
 800813e:	f01a 0f01 	tst.w	sl, #1
 8008142:	d1ac      	bne.n	800809e <_dtoa_r+0x996>
 8008144:	4633      	mov	r3, r6
 8008146:	461e      	mov	r6, r3
 8008148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800814c:	2a30      	cmp	r2, #48	@ 0x30
 800814e:	d0fa      	beq.n	8008146 <_dtoa_r+0xa3e>
 8008150:	e4e1      	b.n	8007b16 <_dtoa_r+0x40e>
 8008152:	429f      	cmp	r7, r3
 8008154:	d1a4      	bne.n	80080a0 <_dtoa_r+0x998>
 8008156:	9b05      	ldr	r3, [sp, #20]
 8008158:	3301      	adds	r3, #1
 800815a:	9305      	str	r3, [sp, #20]
 800815c:	2331      	movs	r3, #49	@ 0x31
 800815e:	703b      	strb	r3, [r7, #0]
 8008160:	e4d9      	b.n	8007b16 <_dtoa_r+0x40e>
 8008162:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008164:	4f16      	ldr	r7, [pc, #88]	@ (80081c0 <_dtoa_r+0xab8>)
 8008166:	b11b      	cbz	r3, 8008170 <_dtoa_r+0xa68>
 8008168:	f107 0308 	add.w	r3, r7, #8
 800816c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	4638      	mov	r0, r7
 8008172:	b011      	add	sp, #68	@ 0x44
 8008174:	ecbd 8b02 	vpop	{d8}
 8008178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	2b01      	cmp	r3, #1
 8008180:	f77f ae2c 	ble.w	8007ddc <_dtoa_r+0x6d4>
 8008184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008186:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008188:	2001      	movs	r0, #1
 800818a:	e64c      	b.n	8007e26 <_dtoa_r+0x71e>
 800818c:	f1bb 0f00 	cmp.w	fp, #0
 8008190:	f77f aed8 	ble.w	8007f44 <_dtoa_r+0x83c>
 8008194:	463e      	mov	r6, r7
 8008196:	9801      	ldr	r0, [sp, #4]
 8008198:	4621      	mov	r1, r4
 800819a:	f7ff fa2c 	bl	80075f6 <quorem>
 800819e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80081a2:	f806 ab01 	strb.w	sl, [r6], #1
 80081a6:	1bf2      	subs	r2, r6, r7
 80081a8:	4593      	cmp	fp, r2
 80081aa:	ddb4      	ble.n	8008116 <_dtoa_r+0xa0e>
 80081ac:	9901      	ldr	r1, [sp, #4]
 80081ae:	2300      	movs	r3, #0
 80081b0:	220a      	movs	r2, #10
 80081b2:	4648      	mov	r0, r9
 80081b4:	f000 f968 	bl	8008488 <__multadd>
 80081b8:	9001      	str	r0, [sp, #4]
 80081ba:	e7ec      	b.n	8008196 <_dtoa_r+0xa8e>
 80081bc:	080094a4 	.word	0x080094a4
 80081c0:	08009428 	.word	0x08009428

080081c4 <_free_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4605      	mov	r5, r0
 80081c8:	2900      	cmp	r1, #0
 80081ca:	d041      	beq.n	8008250 <_free_r+0x8c>
 80081cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d0:	1f0c      	subs	r4, r1, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfb8      	it	lt
 80081d6:	18e4      	addlt	r4, r4, r3
 80081d8:	f000 f8e8 	bl	80083ac <__malloc_lock>
 80081dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008254 <_free_r+0x90>)
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	b933      	cbnz	r3, 80081f0 <_free_r+0x2c>
 80081e2:	6063      	str	r3, [r4, #4]
 80081e4:	6014      	str	r4, [r2, #0]
 80081e6:	4628      	mov	r0, r5
 80081e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ec:	f000 b8e4 	b.w	80083b8 <__malloc_unlock>
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d908      	bls.n	8008206 <_free_r+0x42>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	1821      	adds	r1, r4, r0
 80081f8:	428b      	cmp	r3, r1
 80081fa:	bf01      	itttt	eq
 80081fc:	6819      	ldreq	r1, [r3, #0]
 80081fe:	685b      	ldreq	r3, [r3, #4]
 8008200:	1809      	addeq	r1, r1, r0
 8008202:	6021      	streq	r1, [r4, #0]
 8008204:	e7ed      	b.n	80081e2 <_free_r+0x1e>
 8008206:	461a      	mov	r2, r3
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b10b      	cbz	r3, 8008210 <_free_r+0x4c>
 800820c:	42a3      	cmp	r3, r4
 800820e:	d9fa      	bls.n	8008206 <_free_r+0x42>
 8008210:	6811      	ldr	r1, [r2, #0]
 8008212:	1850      	adds	r0, r2, r1
 8008214:	42a0      	cmp	r0, r4
 8008216:	d10b      	bne.n	8008230 <_free_r+0x6c>
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	4401      	add	r1, r0
 800821c:	1850      	adds	r0, r2, r1
 800821e:	4283      	cmp	r3, r0
 8008220:	6011      	str	r1, [r2, #0]
 8008222:	d1e0      	bne.n	80081e6 <_free_r+0x22>
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	6053      	str	r3, [r2, #4]
 800822a:	4408      	add	r0, r1
 800822c:	6010      	str	r0, [r2, #0]
 800822e:	e7da      	b.n	80081e6 <_free_r+0x22>
 8008230:	d902      	bls.n	8008238 <_free_r+0x74>
 8008232:	230c      	movs	r3, #12
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	e7d6      	b.n	80081e6 <_free_r+0x22>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	1821      	adds	r1, r4, r0
 800823c:	428b      	cmp	r3, r1
 800823e:	bf04      	itt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	6063      	str	r3, [r4, #4]
 8008246:	bf04      	itt	eq
 8008248:	1809      	addeq	r1, r1, r0
 800824a:	6021      	streq	r1, [r4, #0]
 800824c:	6054      	str	r4, [r2, #4]
 800824e:	e7ca      	b.n	80081e6 <_free_r+0x22>
 8008250:	bd38      	pop	{r3, r4, r5, pc}
 8008252:	bf00      	nop
 8008254:	2400044c 	.word	0x2400044c

08008258 <malloc>:
 8008258:	4b02      	ldr	r3, [pc, #8]	@ (8008264 <malloc+0xc>)
 800825a:	4601      	mov	r1, r0
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	f000 b825 	b.w	80082ac <_malloc_r>
 8008262:	bf00      	nop
 8008264:	24000028 	.word	0x24000028

08008268 <sbrk_aligned>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4e0f      	ldr	r6, [pc, #60]	@ (80082a8 <sbrk_aligned+0x40>)
 800826c:	460c      	mov	r4, r1
 800826e:	6831      	ldr	r1, [r6, #0]
 8008270:	4605      	mov	r5, r0
 8008272:	b911      	cbnz	r1, 800827a <sbrk_aligned+0x12>
 8008274:	f000 fec6 	bl	8009004 <_sbrk_r>
 8008278:	6030      	str	r0, [r6, #0]
 800827a:	4621      	mov	r1, r4
 800827c:	4628      	mov	r0, r5
 800827e:	f000 fec1 	bl	8009004 <_sbrk_r>
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	d103      	bne.n	800828e <sbrk_aligned+0x26>
 8008286:	f04f 34ff 	mov.w	r4, #4294967295
 800828a:	4620      	mov	r0, r4
 800828c:	bd70      	pop	{r4, r5, r6, pc}
 800828e:	1cc4      	adds	r4, r0, #3
 8008290:	f024 0403 	bic.w	r4, r4, #3
 8008294:	42a0      	cmp	r0, r4
 8008296:	d0f8      	beq.n	800828a <sbrk_aligned+0x22>
 8008298:	1a21      	subs	r1, r4, r0
 800829a:	4628      	mov	r0, r5
 800829c:	f000 feb2 	bl	8009004 <_sbrk_r>
 80082a0:	3001      	adds	r0, #1
 80082a2:	d1f2      	bne.n	800828a <sbrk_aligned+0x22>
 80082a4:	e7ef      	b.n	8008286 <sbrk_aligned+0x1e>
 80082a6:	bf00      	nop
 80082a8:	24000448 	.word	0x24000448

080082ac <_malloc_r>:
 80082ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b0:	1ccd      	adds	r5, r1, #3
 80082b2:	f025 0503 	bic.w	r5, r5, #3
 80082b6:	3508      	adds	r5, #8
 80082b8:	2d0c      	cmp	r5, #12
 80082ba:	bf38      	it	cc
 80082bc:	250c      	movcc	r5, #12
 80082be:	2d00      	cmp	r5, #0
 80082c0:	4606      	mov	r6, r0
 80082c2:	db01      	blt.n	80082c8 <_malloc_r+0x1c>
 80082c4:	42a9      	cmp	r1, r5
 80082c6:	d904      	bls.n	80082d2 <_malloc_r+0x26>
 80082c8:	230c      	movs	r3, #12
 80082ca:	6033      	str	r3, [r6, #0]
 80082cc:	2000      	movs	r0, #0
 80082ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083a8 <_malloc_r+0xfc>
 80082d6:	f000 f869 	bl	80083ac <__malloc_lock>
 80082da:	f8d8 3000 	ldr.w	r3, [r8]
 80082de:	461c      	mov	r4, r3
 80082e0:	bb44      	cbnz	r4, 8008334 <_malloc_r+0x88>
 80082e2:	4629      	mov	r1, r5
 80082e4:	4630      	mov	r0, r6
 80082e6:	f7ff ffbf 	bl	8008268 <sbrk_aligned>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	4604      	mov	r4, r0
 80082ee:	d158      	bne.n	80083a2 <_malloc_r+0xf6>
 80082f0:	f8d8 4000 	ldr.w	r4, [r8]
 80082f4:	4627      	mov	r7, r4
 80082f6:	2f00      	cmp	r7, #0
 80082f8:	d143      	bne.n	8008382 <_malloc_r+0xd6>
 80082fa:	2c00      	cmp	r4, #0
 80082fc:	d04b      	beq.n	8008396 <_malloc_r+0xea>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	4639      	mov	r1, r7
 8008302:	4630      	mov	r0, r6
 8008304:	eb04 0903 	add.w	r9, r4, r3
 8008308:	f000 fe7c 	bl	8009004 <_sbrk_r>
 800830c:	4581      	cmp	r9, r0
 800830e:	d142      	bne.n	8008396 <_malloc_r+0xea>
 8008310:	6821      	ldr	r1, [r4, #0]
 8008312:	1a6d      	subs	r5, r5, r1
 8008314:	4629      	mov	r1, r5
 8008316:	4630      	mov	r0, r6
 8008318:	f7ff ffa6 	bl	8008268 <sbrk_aligned>
 800831c:	3001      	adds	r0, #1
 800831e:	d03a      	beq.n	8008396 <_malloc_r+0xea>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	442b      	add	r3, r5
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	f8d8 3000 	ldr.w	r3, [r8]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	bb62      	cbnz	r2, 8008388 <_malloc_r+0xdc>
 800832e:	f8c8 7000 	str.w	r7, [r8]
 8008332:	e00f      	b.n	8008354 <_malloc_r+0xa8>
 8008334:	6822      	ldr	r2, [r4, #0]
 8008336:	1b52      	subs	r2, r2, r5
 8008338:	d420      	bmi.n	800837c <_malloc_r+0xd0>
 800833a:	2a0b      	cmp	r2, #11
 800833c:	d917      	bls.n	800836e <_malloc_r+0xc2>
 800833e:	1961      	adds	r1, r4, r5
 8008340:	42a3      	cmp	r3, r4
 8008342:	6025      	str	r5, [r4, #0]
 8008344:	bf18      	it	ne
 8008346:	6059      	strne	r1, [r3, #4]
 8008348:	6863      	ldr	r3, [r4, #4]
 800834a:	bf08      	it	eq
 800834c:	f8c8 1000 	streq.w	r1, [r8]
 8008350:	5162      	str	r2, [r4, r5]
 8008352:	604b      	str	r3, [r1, #4]
 8008354:	4630      	mov	r0, r6
 8008356:	f000 f82f 	bl	80083b8 <__malloc_unlock>
 800835a:	f104 000b 	add.w	r0, r4, #11
 800835e:	1d23      	adds	r3, r4, #4
 8008360:	f020 0007 	bic.w	r0, r0, #7
 8008364:	1ac2      	subs	r2, r0, r3
 8008366:	bf1c      	itt	ne
 8008368:	1a1b      	subne	r3, r3, r0
 800836a:	50a3      	strne	r3, [r4, r2]
 800836c:	e7af      	b.n	80082ce <_malloc_r+0x22>
 800836e:	6862      	ldr	r2, [r4, #4]
 8008370:	42a3      	cmp	r3, r4
 8008372:	bf0c      	ite	eq
 8008374:	f8c8 2000 	streq.w	r2, [r8]
 8008378:	605a      	strne	r2, [r3, #4]
 800837a:	e7eb      	b.n	8008354 <_malloc_r+0xa8>
 800837c:	4623      	mov	r3, r4
 800837e:	6864      	ldr	r4, [r4, #4]
 8008380:	e7ae      	b.n	80082e0 <_malloc_r+0x34>
 8008382:	463c      	mov	r4, r7
 8008384:	687f      	ldr	r7, [r7, #4]
 8008386:	e7b6      	b.n	80082f6 <_malloc_r+0x4a>
 8008388:	461a      	mov	r2, r3
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	42a3      	cmp	r3, r4
 800838e:	d1fb      	bne.n	8008388 <_malloc_r+0xdc>
 8008390:	2300      	movs	r3, #0
 8008392:	6053      	str	r3, [r2, #4]
 8008394:	e7de      	b.n	8008354 <_malloc_r+0xa8>
 8008396:	230c      	movs	r3, #12
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	4630      	mov	r0, r6
 800839c:	f000 f80c 	bl	80083b8 <__malloc_unlock>
 80083a0:	e794      	b.n	80082cc <_malloc_r+0x20>
 80083a2:	6005      	str	r5, [r0, #0]
 80083a4:	e7d6      	b.n	8008354 <_malloc_r+0xa8>
 80083a6:	bf00      	nop
 80083a8:	2400044c 	.word	0x2400044c

080083ac <__malloc_lock>:
 80083ac:	4801      	ldr	r0, [pc, #4]	@ (80083b4 <__malloc_lock+0x8>)
 80083ae:	f7ff b920 	b.w	80075f2 <__retarget_lock_acquire_recursive>
 80083b2:	bf00      	nop
 80083b4:	24000444 	.word	0x24000444

080083b8 <__malloc_unlock>:
 80083b8:	4801      	ldr	r0, [pc, #4]	@ (80083c0 <__malloc_unlock+0x8>)
 80083ba:	f7ff b91b 	b.w	80075f4 <__retarget_lock_release_recursive>
 80083be:	bf00      	nop
 80083c0:	24000444 	.word	0x24000444

080083c4 <_Balloc>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	69c6      	ldr	r6, [r0, #28]
 80083c8:	4604      	mov	r4, r0
 80083ca:	460d      	mov	r5, r1
 80083cc:	b976      	cbnz	r6, 80083ec <_Balloc+0x28>
 80083ce:	2010      	movs	r0, #16
 80083d0:	f7ff ff42 	bl	8008258 <malloc>
 80083d4:	4602      	mov	r2, r0
 80083d6:	61e0      	str	r0, [r4, #28]
 80083d8:	b920      	cbnz	r0, 80083e4 <_Balloc+0x20>
 80083da:	4b18      	ldr	r3, [pc, #96]	@ (800843c <_Balloc+0x78>)
 80083dc:	4818      	ldr	r0, [pc, #96]	@ (8008440 <_Balloc+0x7c>)
 80083de:	216b      	movs	r1, #107	@ 0x6b
 80083e0:	f000 fe2e 	bl	8009040 <__assert_func>
 80083e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083e8:	6006      	str	r6, [r0, #0]
 80083ea:	60c6      	str	r6, [r0, #12]
 80083ec:	69e6      	ldr	r6, [r4, #28]
 80083ee:	68f3      	ldr	r3, [r6, #12]
 80083f0:	b183      	cbz	r3, 8008414 <_Balloc+0x50>
 80083f2:	69e3      	ldr	r3, [r4, #28]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083fa:	b9b8      	cbnz	r0, 800842c <_Balloc+0x68>
 80083fc:	2101      	movs	r1, #1
 80083fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008402:	1d72      	adds	r2, r6, #5
 8008404:	0092      	lsls	r2, r2, #2
 8008406:	4620      	mov	r0, r4
 8008408:	f000 fe38 	bl	800907c <_calloc_r>
 800840c:	b160      	cbz	r0, 8008428 <_Balloc+0x64>
 800840e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008412:	e00e      	b.n	8008432 <_Balloc+0x6e>
 8008414:	2221      	movs	r2, #33	@ 0x21
 8008416:	2104      	movs	r1, #4
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fe2f 	bl	800907c <_calloc_r>
 800841e:	69e3      	ldr	r3, [r4, #28]
 8008420:	60f0      	str	r0, [r6, #12]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e4      	bne.n	80083f2 <_Balloc+0x2e>
 8008428:	2000      	movs	r0, #0
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	6802      	ldr	r2, [r0, #0]
 800842e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008432:	2300      	movs	r3, #0
 8008434:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008438:	e7f7      	b.n	800842a <_Balloc+0x66>
 800843a:	bf00      	nop
 800843c:	08009435 	.word	0x08009435
 8008440:	080094b5 	.word	0x080094b5

08008444 <_Bfree>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	69c6      	ldr	r6, [r0, #28]
 8008448:	4605      	mov	r5, r0
 800844a:	460c      	mov	r4, r1
 800844c:	b976      	cbnz	r6, 800846c <_Bfree+0x28>
 800844e:	2010      	movs	r0, #16
 8008450:	f7ff ff02 	bl	8008258 <malloc>
 8008454:	4602      	mov	r2, r0
 8008456:	61e8      	str	r0, [r5, #28]
 8008458:	b920      	cbnz	r0, 8008464 <_Bfree+0x20>
 800845a:	4b09      	ldr	r3, [pc, #36]	@ (8008480 <_Bfree+0x3c>)
 800845c:	4809      	ldr	r0, [pc, #36]	@ (8008484 <_Bfree+0x40>)
 800845e:	218f      	movs	r1, #143	@ 0x8f
 8008460:	f000 fdee 	bl	8009040 <__assert_func>
 8008464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008468:	6006      	str	r6, [r0, #0]
 800846a:	60c6      	str	r6, [r0, #12]
 800846c:	b13c      	cbz	r4, 800847e <_Bfree+0x3a>
 800846e:	69eb      	ldr	r3, [r5, #28]
 8008470:	6862      	ldr	r2, [r4, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008478:	6021      	str	r1, [r4, #0]
 800847a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800847e:	bd70      	pop	{r4, r5, r6, pc}
 8008480:	08009435 	.word	0x08009435
 8008484:	080094b5 	.word	0x080094b5

08008488 <__multadd>:
 8008488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848c:	690d      	ldr	r5, [r1, #16]
 800848e:	4607      	mov	r7, r0
 8008490:	460c      	mov	r4, r1
 8008492:	461e      	mov	r6, r3
 8008494:	f101 0c14 	add.w	ip, r1, #20
 8008498:	2000      	movs	r0, #0
 800849a:	f8dc 3000 	ldr.w	r3, [ip]
 800849e:	b299      	uxth	r1, r3
 80084a0:	fb02 6101 	mla	r1, r2, r1, r6
 80084a4:	0c1e      	lsrs	r6, r3, #16
 80084a6:	0c0b      	lsrs	r3, r1, #16
 80084a8:	fb02 3306 	mla	r3, r2, r6, r3
 80084ac:	b289      	uxth	r1, r1
 80084ae:	3001      	adds	r0, #1
 80084b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084b4:	4285      	cmp	r5, r0
 80084b6:	f84c 1b04 	str.w	r1, [ip], #4
 80084ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084be:	dcec      	bgt.n	800849a <__multadd+0x12>
 80084c0:	b30e      	cbz	r6, 8008506 <__multadd+0x7e>
 80084c2:	68a3      	ldr	r3, [r4, #8]
 80084c4:	42ab      	cmp	r3, r5
 80084c6:	dc19      	bgt.n	80084fc <__multadd+0x74>
 80084c8:	6861      	ldr	r1, [r4, #4]
 80084ca:	4638      	mov	r0, r7
 80084cc:	3101      	adds	r1, #1
 80084ce:	f7ff ff79 	bl	80083c4 <_Balloc>
 80084d2:	4680      	mov	r8, r0
 80084d4:	b928      	cbnz	r0, 80084e2 <__multadd+0x5a>
 80084d6:	4602      	mov	r2, r0
 80084d8:	4b0c      	ldr	r3, [pc, #48]	@ (800850c <__multadd+0x84>)
 80084da:	480d      	ldr	r0, [pc, #52]	@ (8008510 <__multadd+0x88>)
 80084dc:	21ba      	movs	r1, #186	@ 0xba
 80084de:	f000 fdaf 	bl	8009040 <__assert_func>
 80084e2:	6922      	ldr	r2, [r4, #16]
 80084e4:	3202      	adds	r2, #2
 80084e6:	f104 010c 	add.w	r1, r4, #12
 80084ea:	0092      	lsls	r2, r2, #2
 80084ec:	300c      	adds	r0, #12
 80084ee:	f000 fd99 	bl	8009024 <memcpy>
 80084f2:	4621      	mov	r1, r4
 80084f4:	4638      	mov	r0, r7
 80084f6:	f7ff ffa5 	bl	8008444 <_Bfree>
 80084fa:	4644      	mov	r4, r8
 80084fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008500:	3501      	adds	r5, #1
 8008502:	615e      	str	r6, [r3, #20]
 8008504:	6125      	str	r5, [r4, #16]
 8008506:	4620      	mov	r0, r4
 8008508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800850c:	080094a4 	.word	0x080094a4
 8008510:	080094b5 	.word	0x080094b5

08008514 <__hi0bits>:
 8008514:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008518:	4603      	mov	r3, r0
 800851a:	bf36      	itet	cc
 800851c:	0403      	lslcc	r3, r0, #16
 800851e:	2000      	movcs	r0, #0
 8008520:	2010      	movcc	r0, #16
 8008522:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008526:	bf3c      	itt	cc
 8008528:	021b      	lslcc	r3, r3, #8
 800852a:	3008      	addcc	r0, #8
 800852c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008530:	bf3c      	itt	cc
 8008532:	011b      	lslcc	r3, r3, #4
 8008534:	3004      	addcc	r0, #4
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853a:	bf3c      	itt	cc
 800853c:	009b      	lslcc	r3, r3, #2
 800853e:	3002      	addcc	r0, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	db05      	blt.n	8008550 <__hi0bits+0x3c>
 8008544:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008548:	f100 0001 	add.w	r0, r0, #1
 800854c:	bf08      	it	eq
 800854e:	2020      	moveq	r0, #32
 8008550:	4770      	bx	lr

08008552 <__lo0bits>:
 8008552:	6803      	ldr	r3, [r0, #0]
 8008554:	4602      	mov	r2, r0
 8008556:	f013 0007 	ands.w	r0, r3, #7
 800855a:	d00b      	beq.n	8008574 <__lo0bits+0x22>
 800855c:	07d9      	lsls	r1, r3, #31
 800855e:	d421      	bmi.n	80085a4 <__lo0bits+0x52>
 8008560:	0798      	lsls	r0, r3, #30
 8008562:	bf49      	itett	mi
 8008564:	085b      	lsrmi	r3, r3, #1
 8008566:	089b      	lsrpl	r3, r3, #2
 8008568:	2001      	movmi	r0, #1
 800856a:	6013      	strmi	r3, [r2, #0]
 800856c:	bf5c      	itt	pl
 800856e:	6013      	strpl	r3, [r2, #0]
 8008570:	2002      	movpl	r0, #2
 8008572:	4770      	bx	lr
 8008574:	b299      	uxth	r1, r3
 8008576:	b909      	cbnz	r1, 800857c <__lo0bits+0x2a>
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	2010      	movs	r0, #16
 800857c:	b2d9      	uxtb	r1, r3
 800857e:	b909      	cbnz	r1, 8008584 <__lo0bits+0x32>
 8008580:	3008      	adds	r0, #8
 8008582:	0a1b      	lsrs	r3, r3, #8
 8008584:	0719      	lsls	r1, r3, #28
 8008586:	bf04      	itt	eq
 8008588:	091b      	lsreq	r3, r3, #4
 800858a:	3004      	addeq	r0, #4
 800858c:	0799      	lsls	r1, r3, #30
 800858e:	bf04      	itt	eq
 8008590:	089b      	lsreq	r3, r3, #2
 8008592:	3002      	addeq	r0, #2
 8008594:	07d9      	lsls	r1, r3, #31
 8008596:	d403      	bmi.n	80085a0 <__lo0bits+0x4e>
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	f100 0001 	add.w	r0, r0, #1
 800859e:	d003      	beq.n	80085a8 <__lo0bits+0x56>
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	4770      	bx	lr
 80085a4:	2000      	movs	r0, #0
 80085a6:	4770      	bx	lr
 80085a8:	2020      	movs	r0, #32
 80085aa:	4770      	bx	lr

080085ac <__i2b>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	460c      	mov	r4, r1
 80085b0:	2101      	movs	r1, #1
 80085b2:	f7ff ff07 	bl	80083c4 <_Balloc>
 80085b6:	4602      	mov	r2, r0
 80085b8:	b928      	cbnz	r0, 80085c6 <__i2b+0x1a>
 80085ba:	4b05      	ldr	r3, [pc, #20]	@ (80085d0 <__i2b+0x24>)
 80085bc:	4805      	ldr	r0, [pc, #20]	@ (80085d4 <__i2b+0x28>)
 80085be:	f240 1145 	movw	r1, #325	@ 0x145
 80085c2:	f000 fd3d 	bl	8009040 <__assert_func>
 80085c6:	2301      	movs	r3, #1
 80085c8:	6144      	str	r4, [r0, #20]
 80085ca:	6103      	str	r3, [r0, #16]
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	bf00      	nop
 80085d0:	080094a4 	.word	0x080094a4
 80085d4:	080094b5 	.word	0x080094b5

080085d8 <__multiply>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	4617      	mov	r7, r2
 80085de:	690a      	ldr	r2, [r1, #16]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	bfa8      	it	ge
 80085e6:	463b      	movge	r3, r7
 80085e8:	4689      	mov	r9, r1
 80085ea:	bfa4      	itt	ge
 80085ec:	460f      	movge	r7, r1
 80085ee:	4699      	movge	r9, r3
 80085f0:	693d      	ldr	r5, [r7, #16]
 80085f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	eb05 060a 	add.w	r6, r5, sl
 80085fe:	42b3      	cmp	r3, r6
 8008600:	b085      	sub	sp, #20
 8008602:	bfb8      	it	lt
 8008604:	3101      	addlt	r1, #1
 8008606:	f7ff fedd 	bl	80083c4 <_Balloc>
 800860a:	b930      	cbnz	r0, 800861a <__multiply+0x42>
 800860c:	4602      	mov	r2, r0
 800860e:	4b41      	ldr	r3, [pc, #260]	@ (8008714 <__multiply+0x13c>)
 8008610:	4841      	ldr	r0, [pc, #260]	@ (8008718 <__multiply+0x140>)
 8008612:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008616:	f000 fd13 	bl	8009040 <__assert_func>
 800861a:	f100 0414 	add.w	r4, r0, #20
 800861e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008622:	4623      	mov	r3, r4
 8008624:	2200      	movs	r2, #0
 8008626:	4573      	cmp	r3, lr
 8008628:	d320      	bcc.n	800866c <__multiply+0x94>
 800862a:	f107 0814 	add.w	r8, r7, #20
 800862e:	f109 0114 	add.w	r1, r9, #20
 8008632:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008636:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800863a:	9302      	str	r3, [sp, #8]
 800863c:	1beb      	subs	r3, r5, r7
 800863e:	3b15      	subs	r3, #21
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	3304      	adds	r3, #4
 8008646:	3715      	adds	r7, #21
 8008648:	42bd      	cmp	r5, r7
 800864a:	bf38      	it	cc
 800864c:	2304      	movcc	r3, #4
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	9103      	str	r1, [sp, #12]
 8008654:	428b      	cmp	r3, r1
 8008656:	d80c      	bhi.n	8008672 <__multiply+0x9a>
 8008658:	2e00      	cmp	r6, #0
 800865a:	dd03      	ble.n	8008664 <__multiply+0x8c>
 800865c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008660:	2b00      	cmp	r3, #0
 8008662:	d055      	beq.n	8008710 <__multiply+0x138>
 8008664:	6106      	str	r6, [r0, #16]
 8008666:	b005      	add	sp, #20
 8008668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866c:	f843 2b04 	str.w	r2, [r3], #4
 8008670:	e7d9      	b.n	8008626 <__multiply+0x4e>
 8008672:	f8b1 a000 	ldrh.w	sl, [r1]
 8008676:	f1ba 0f00 	cmp.w	sl, #0
 800867a:	d01f      	beq.n	80086bc <__multiply+0xe4>
 800867c:	46c4      	mov	ip, r8
 800867e:	46a1      	mov	r9, r4
 8008680:	2700      	movs	r7, #0
 8008682:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008686:	f8d9 3000 	ldr.w	r3, [r9]
 800868a:	fa1f fb82 	uxth.w	fp, r2
 800868e:	b29b      	uxth	r3, r3
 8008690:	fb0a 330b 	mla	r3, sl, fp, r3
 8008694:	443b      	add	r3, r7
 8008696:	f8d9 7000 	ldr.w	r7, [r9]
 800869a:	0c12      	lsrs	r2, r2, #16
 800869c:	0c3f      	lsrs	r7, r7, #16
 800869e:	fb0a 7202 	mla	r2, sl, r2, r7
 80086a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086ac:	4565      	cmp	r5, ip
 80086ae:	f849 3b04 	str.w	r3, [r9], #4
 80086b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80086b6:	d8e4      	bhi.n	8008682 <__multiply+0xaa>
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	50e7      	str	r7, [r4, r3]
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80086c2:	3104      	adds	r1, #4
 80086c4:	f1b9 0f00 	cmp.w	r9, #0
 80086c8:	d020      	beq.n	800870c <__multiply+0x134>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	4647      	mov	r7, r8
 80086ce:	46a4      	mov	ip, r4
 80086d0:	f04f 0a00 	mov.w	sl, #0
 80086d4:	f8b7 b000 	ldrh.w	fp, [r7]
 80086d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80086dc:	fb09 220b 	mla	r2, r9, fp, r2
 80086e0:	4452      	add	r2, sl
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086e8:	f84c 3b04 	str.w	r3, [ip], #4
 80086ec:	f857 3b04 	ldr.w	r3, [r7], #4
 80086f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086f4:	f8bc 3000 	ldrh.w	r3, [ip]
 80086f8:	fb09 330a 	mla	r3, r9, sl, r3
 80086fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008700:	42bd      	cmp	r5, r7
 8008702:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008706:	d8e5      	bhi.n	80086d4 <__multiply+0xfc>
 8008708:	9a01      	ldr	r2, [sp, #4]
 800870a:	50a3      	str	r3, [r4, r2]
 800870c:	3404      	adds	r4, #4
 800870e:	e79f      	b.n	8008650 <__multiply+0x78>
 8008710:	3e01      	subs	r6, #1
 8008712:	e7a1      	b.n	8008658 <__multiply+0x80>
 8008714:	080094a4 	.word	0x080094a4
 8008718:	080094b5 	.word	0x080094b5

0800871c <__pow5mult>:
 800871c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008720:	4615      	mov	r5, r2
 8008722:	f012 0203 	ands.w	r2, r2, #3
 8008726:	4607      	mov	r7, r0
 8008728:	460e      	mov	r6, r1
 800872a:	d007      	beq.n	800873c <__pow5mult+0x20>
 800872c:	4c25      	ldr	r4, [pc, #148]	@ (80087c4 <__pow5mult+0xa8>)
 800872e:	3a01      	subs	r2, #1
 8008730:	2300      	movs	r3, #0
 8008732:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008736:	f7ff fea7 	bl	8008488 <__multadd>
 800873a:	4606      	mov	r6, r0
 800873c:	10ad      	asrs	r5, r5, #2
 800873e:	d03d      	beq.n	80087bc <__pow5mult+0xa0>
 8008740:	69fc      	ldr	r4, [r7, #28]
 8008742:	b97c      	cbnz	r4, 8008764 <__pow5mult+0x48>
 8008744:	2010      	movs	r0, #16
 8008746:	f7ff fd87 	bl	8008258 <malloc>
 800874a:	4602      	mov	r2, r0
 800874c:	61f8      	str	r0, [r7, #28]
 800874e:	b928      	cbnz	r0, 800875c <__pow5mult+0x40>
 8008750:	4b1d      	ldr	r3, [pc, #116]	@ (80087c8 <__pow5mult+0xac>)
 8008752:	481e      	ldr	r0, [pc, #120]	@ (80087cc <__pow5mult+0xb0>)
 8008754:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008758:	f000 fc72 	bl	8009040 <__assert_func>
 800875c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008760:	6004      	str	r4, [r0, #0]
 8008762:	60c4      	str	r4, [r0, #12]
 8008764:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008768:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800876c:	b94c      	cbnz	r4, 8008782 <__pow5mult+0x66>
 800876e:	f240 2171 	movw	r1, #625	@ 0x271
 8008772:	4638      	mov	r0, r7
 8008774:	f7ff ff1a 	bl	80085ac <__i2b>
 8008778:	2300      	movs	r3, #0
 800877a:	f8c8 0008 	str.w	r0, [r8, #8]
 800877e:	4604      	mov	r4, r0
 8008780:	6003      	str	r3, [r0, #0]
 8008782:	f04f 0900 	mov.w	r9, #0
 8008786:	07eb      	lsls	r3, r5, #31
 8008788:	d50a      	bpl.n	80087a0 <__pow5mult+0x84>
 800878a:	4631      	mov	r1, r6
 800878c:	4622      	mov	r2, r4
 800878e:	4638      	mov	r0, r7
 8008790:	f7ff ff22 	bl	80085d8 <__multiply>
 8008794:	4631      	mov	r1, r6
 8008796:	4680      	mov	r8, r0
 8008798:	4638      	mov	r0, r7
 800879a:	f7ff fe53 	bl	8008444 <_Bfree>
 800879e:	4646      	mov	r6, r8
 80087a0:	106d      	asrs	r5, r5, #1
 80087a2:	d00b      	beq.n	80087bc <__pow5mult+0xa0>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	b938      	cbnz	r0, 80087b8 <__pow5mult+0x9c>
 80087a8:	4622      	mov	r2, r4
 80087aa:	4621      	mov	r1, r4
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7ff ff13 	bl	80085d8 <__multiply>
 80087b2:	6020      	str	r0, [r4, #0]
 80087b4:	f8c0 9000 	str.w	r9, [r0]
 80087b8:	4604      	mov	r4, r0
 80087ba:	e7e4      	b.n	8008786 <__pow5mult+0x6a>
 80087bc:	4630      	mov	r0, r6
 80087be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087c2:	bf00      	nop
 80087c4:	08009568 	.word	0x08009568
 80087c8:	08009435 	.word	0x08009435
 80087cc:	080094b5 	.word	0x080094b5

080087d0 <__lshift>:
 80087d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d4:	460c      	mov	r4, r1
 80087d6:	6849      	ldr	r1, [r1, #4]
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087de:	68a3      	ldr	r3, [r4, #8]
 80087e0:	4607      	mov	r7, r0
 80087e2:	4691      	mov	r9, r2
 80087e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087e8:	f108 0601 	add.w	r6, r8, #1
 80087ec:	42b3      	cmp	r3, r6
 80087ee:	db0b      	blt.n	8008808 <__lshift+0x38>
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7ff fde7 	bl	80083c4 <_Balloc>
 80087f6:	4605      	mov	r5, r0
 80087f8:	b948      	cbnz	r0, 800880e <__lshift+0x3e>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4b28      	ldr	r3, [pc, #160]	@ (80088a0 <__lshift+0xd0>)
 80087fe:	4829      	ldr	r0, [pc, #164]	@ (80088a4 <__lshift+0xd4>)
 8008800:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008804:	f000 fc1c 	bl	8009040 <__assert_func>
 8008808:	3101      	adds	r1, #1
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	e7ee      	b.n	80087ec <__lshift+0x1c>
 800880e:	2300      	movs	r3, #0
 8008810:	f100 0114 	add.w	r1, r0, #20
 8008814:	f100 0210 	add.w	r2, r0, #16
 8008818:	4618      	mov	r0, r3
 800881a:	4553      	cmp	r3, sl
 800881c:	db33      	blt.n	8008886 <__lshift+0xb6>
 800881e:	6920      	ldr	r0, [r4, #16]
 8008820:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008824:	f104 0314 	add.w	r3, r4, #20
 8008828:	f019 091f 	ands.w	r9, r9, #31
 800882c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008830:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008834:	d02b      	beq.n	800888e <__lshift+0xbe>
 8008836:	f1c9 0e20 	rsb	lr, r9, #32
 800883a:	468a      	mov	sl, r1
 800883c:	2200      	movs	r2, #0
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	fa00 f009 	lsl.w	r0, r0, r9
 8008844:	4310      	orrs	r0, r2
 8008846:	f84a 0b04 	str.w	r0, [sl], #4
 800884a:	f853 2b04 	ldr.w	r2, [r3], #4
 800884e:	459c      	cmp	ip, r3
 8008850:	fa22 f20e 	lsr.w	r2, r2, lr
 8008854:	d8f3      	bhi.n	800883e <__lshift+0x6e>
 8008856:	ebac 0304 	sub.w	r3, ip, r4
 800885a:	3b15      	subs	r3, #21
 800885c:	f023 0303 	bic.w	r3, r3, #3
 8008860:	3304      	adds	r3, #4
 8008862:	f104 0015 	add.w	r0, r4, #21
 8008866:	4560      	cmp	r0, ip
 8008868:	bf88      	it	hi
 800886a:	2304      	movhi	r3, #4
 800886c:	50ca      	str	r2, [r1, r3]
 800886e:	b10a      	cbz	r2, 8008874 <__lshift+0xa4>
 8008870:	f108 0602 	add.w	r6, r8, #2
 8008874:	3e01      	subs	r6, #1
 8008876:	4638      	mov	r0, r7
 8008878:	612e      	str	r6, [r5, #16]
 800887a:	4621      	mov	r1, r4
 800887c:	f7ff fde2 	bl	8008444 <_Bfree>
 8008880:	4628      	mov	r0, r5
 8008882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008886:	f842 0f04 	str.w	r0, [r2, #4]!
 800888a:	3301      	adds	r3, #1
 800888c:	e7c5      	b.n	800881a <__lshift+0x4a>
 800888e:	3904      	subs	r1, #4
 8008890:	f853 2b04 	ldr.w	r2, [r3], #4
 8008894:	f841 2f04 	str.w	r2, [r1, #4]!
 8008898:	459c      	cmp	ip, r3
 800889a:	d8f9      	bhi.n	8008890 <__lshift+0xc0>
 800889c:	e7ea      	b.n	8008874 <__lshift+0xa4>
 800889e:	bf00      	nop
 80088a0:	080094a4 	.word	0x080094a4
 80088a4:	080094b5 	.word	0x080094b5

080088a8 <__mcmp>:
 80088a8:	690a      	ldr	r2, [r1, #16]
 80088aa:	4603      	mov	r3, r0
 80088ac:	6900      	ldr	r0, [r0, #16]
 80088ae:	1a80      	subs	r0, r0, r2
 80088b0:	b530      	push	{r4, r5, lr}
 80088b2:	d10e      	bne.n	80088d2 <__mcmp+0x2a>
 80088b4:	3314      	adds	r3, #20
 80088b6:	3114      	adds	r1, #20
 80088b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088c8:	4295      	cmp	r5, r2
 80088ca:	d003      	beq.n	80088d4 <__mcmp+0x2c>
 80088cc:	d205      	bcs.n	80088da <__mcmp+0x32>
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295
 80088d2:	bd30      	pop	{r4, r5, pc}
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d3f3      	bcc.n	80088c0 <__mcmp+0x18>
 80088d8:	e7fb      	b.n	80088d2 <__mcmp+0x2a>
 80088da:	2001      	movs	r0, #1
 80088dc:	e7f9      	b.n	80088d2 <__mcmp+0x2a>
	...

080088e0 <__mdiff>:
 80088e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	4689      	mov	r9, r1
 80088e6:	4606      	mov	r6, r0
 80088e8:	4611      	mov	r1, r2
 80088ea:	4648      	mov	r0, r9
 80088ec:	4614      	mov	r4, r2
 80088ee:	f7ff ffdb 	bl	80088a8 <__mcmp>
 80088f2:	1e05      	subs	r5, r0, #0
 80088f4:	d112      	bne.n	800891c <__mdiff+0x3c>
 80088f6:	4629      	mov	r1, r5
 80088f8:	4630      	mov	r0, r6
 80088fa:	f7ff fd63 	bl	80083c4 <_Balloc>
 80088fe:	4602      	mov	r2, r0
 8008900:	b928      	cbnz	r0, 800890e <__mdiff+0x2e>
 8008902:	4b3f      	ldr	r3, [pc, #252]	@ (8008a00 <__mdiff+0x120>)
 8008904:	f240 2137 	movw	r1, #567	@ 0x237
 8008908:	483e      	ldr	r0, [pc, #248]	@ (8008a04 <__mdiff+0x124>)
 800890a:	f000 fb99 	bl	8009040 <__assert_func>
 800890e:	2301      	movs	r3, #1
 8008910:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008914:	4610      	mov	r0, r2
 8008916:	b003      	add	sp, #12
 8008918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891c:	bfbc      	itt	lt
 800891e:	464b      	movlt	r3, r9
 8008920:	46a1      	movlt	r9, r4
 8008922:	4630      	mov	r0, r6
 8008924:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008928:	bfba      	itte	lt
 800892a:	461c      	movlt	r4, r3
 800892c:	2501      	movlt	r5, #1
 800892e:	2500      	movge	r5, #0
 8008930:	f7ff fd48 	bl	80083c4 <_Balloc>
 8008934:	4602      	mov	r2, r0
 8008936:	b918      	cbnz	r0, 8008940 <__mdiff+0x60>
 8008938:	4b31      	ldr	r3, [pc, #196]	@ (8008a00 <__mdiff+0x120>)
 800893a:	f240 2145 	movw	r1, #581	@ 0x245
 800893e:	e7e3      	b.n	8008908 <__mdiff+0x28>
 8008940:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008944:	6926      	ldr	r6, [r4, #16]
 8008946:	60c5      	str	r5, [r0, #12]
 8008948:	f109 0310 	add.w	r3, r9, #16
 800894c:	f109 0514 	add.w	r5, r9, #20
 8008950:	f104 0e14 	add.w	lr, r4, #20
 8008954:	f100 0b14 	add.w	fp, r0, #20
 8008958:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800895c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008960:	9301      	str	r3, [sp, #4]
 8008962:	46d9      	mov	r9, fp
 8008964:	f04f 0c00 	mov.w	ip, #0
 8008968:	9b01      	ldr	r3, [sp, #4]
 800896a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800896e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	fa1f f38a 	uxth.w	r3, sl
 8008978:	4619      	mov	r1, r3
 800897a:	b283      	uxth	r3, r0
 800897c:	1acb      	subs	r3, r1, r3
 800897e:	0c00      	lsrs	r0, r0, #16
 8008980:	4463      	add	r3, ip
 8008982:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008986:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800898a:	b29b      	uxth	r3, r3
 800898c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008990:	4576      	cmp	r6, lr
 8008992:	f849 3b04 	str.w	r3, [r9], #4
 8008996:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800899a:	d8e5      	bhi.n	8008968 <__mdiff+0x88>
 800899c:	1b33      	subs	r3, r6, r4
 800899e:	3b15      	subs	r3, #21
 80089a0:	f023 0303 	bic.w	r3, r3, #3
 80089a4:	3415      	adds	r4, #21
 80089a6:	3304      	adds	r3, #4
 80089a8:	42a6      	cmp	r6, r4
 80089aa:	bf38      	it	cc
 80089ac:	2304      	movcc	r3, #4
 80089ae:	441d      	add	r5, r3
 80089b0:	445b      	add	r3, fp
 80089b2:	461e      	mov	r6, r3
 80089b4:	462c      	mov	r4, r5
 80089b6:	4544      	cmp	r4, r8
 80089b8:	d30e      	bcc.n	80089d8 <__mdiff+0xf8>
 80089ba:	f108 0103 	add.w	r1, r8, #3
 80089be:	1b49      	subs	r1, r1, r5
 80089c0:	f021 0103 	bic.w	r1, r1, #3
 80089c4:	3d03      	subs	r5, #3
 80089c6:	45a8      	cmp	r8, r5
 80089c8:	bf38      	it	cc
 80089ca:	2100      	movcc	r1, #0
 80089cc:	440b      	add	r3, r1
 80089ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089d2:	b191      	cbz	r1, 80089fa <__mdiff+0x11a>
 80089d4:	6117      	str	r7, [r2, #16]
 80089d6:	e79d      	b.n	8008914 <__mdiff+0x34>
 80089d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80089dc:	46e6      	mov	lr, ip
 80089de:	0c08      	lsrs	r0, r1, #16
 80089e0:	fa1c fc81 	uxtah	ip, ip, r1
 80089e4:	4471      	add	r1, lr
 80089e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089ea:	b289      	uxth	r1, r1
 80089ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089f0:	f846 1b04 	str.w	r1, [r6], #4
 80089f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089f8:	e7dd      	b.n	80089b6 <__mdiff+0xd6>
 80089fa:	3f01      	subs	r7, #1
 80089fc:	e7e7      	b.n	80089ce <__mdiff+0xee>
 80089fe:	bf00      	nop
 8008a00:	080094a4 	.word	0x080094a4
 8008a04:	080094b5 	.word	0x080094b5

08008a08 <__d2b>:
 8008a08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a0c:	460f      	mov	r7, r1
 8008a0e:	2101      	movs	r1, #1
 8008a10:	ec59 8b10 	vmov	r8, r9, d0
 8008a14:	4616      	mov	r6, r2
 8008a16:	f7ff fcd5 	bl	80083c4 <_Balloc>
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	b930      	cbnz	r0, 8008a2c <__d2b+0x24>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4b23      	ldr	r3, [pc, #140]	@ (8008ab0 <__d2b+0xa8>)
 8008a22:	4824      	ldr	r0, [pc, #144]	@ (8008ab4 <__d2b+0xac>)
 8008a24:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a28:	f000 fb0a 	bl	8009040 <__assert_func>
 8008a2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a34:	b10d      	cbz	r5, 8008a3a <__d2b+0x32>
 8008a36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	f1b8 0300 	subs.w	r3, r8, #0
 8008a40:	d023      	beq.n	8008a8a <__d2b+0x82>
 8008a42:	4668      	mov	r0, sp
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	f7ff fd84 	bl	8008552 <__lo0bits>
 8008a4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a4e:	b1d0      	cbz	r0, 8008a86 <__d2b+0x7e>
 8008a50:	f1c0 0320 	rsb	r3, r0, #32
 8008a54:	fa02 f303 	lsl.w	r3, r2, r3
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	40c2      	lsrs	r2, r0
 8008a5c:	6163      	str	r3, [r4, #20]
 8008a5e:	9201      	str	r2, [sp, #4]
 8008a60:	9b01      	ldr	r3, [sp, #4]
 8008a62:	61a3      	str	r3, [r4, #24]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	bf0c      	ite	eq
 8008a68:	2201      	moveq	r2, #1
 8008a6a:	2202      	movne	r2, #2
 8008a6c:	6122      	str	r2, [r4, #16]
 8008a6e:	b1a5      	cbz	r5, 8008a9a <__d2b+0x92>
 8008a70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a74:	4405      	add	r5, r0
 8008a76:	603d      	str	r5, [r7, #0]
 8008a78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a7c:	6030      	str	r0, [r6, #0]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	b003      	add	sp, #12
 8008a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a86:	6161      	str	r1, [r4, #20]
 8008a88:	e7ea      	b.n	8008a60 <__d2b+0x58>
 8008a8a:	a801      	add	r0, sp, #4
 8008a8c:	f7ff fd61 	bl	8008552 <__lo0bits>
 8008a90:	9b01      	ldr	r3, [sp, #4]
 8008a92:	6163      	str	r3, [r4, #20]
 8008a94:	3020      	adds	r0, #32
 8008a96:	2201      	movs	r2, #1
 8008a98:	e7e8      	b.n	8008a6c <__d2b+0x64>
 8008a9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008aa2:	6038      	str	r0, [r7, #0]
 8008aa4:	6918      	ldr	r0, [r3, #16]
 8008aa6:	f7ff fd35 	bl	8008514 <__hi0bits>
 8008aaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008aae:	e7e5      	b.n	8008a7c <__d2b+0x74>
 8008ab0:	080094a4 	.word	0x080094a4
 8008ab4:	080094b5 	.word	0x080094b5

08008ab8 <__sfputc_r>:
 8008ab8:	6893      	ldr	r3, [r2, #8]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	b410      	push	{r4}
 8008ac0:	6093      	str	r3, [r2, #8]
 8008ac2:	da08      	bge.n	8008ad6 <__sfputc_r+0x1e>
 8008ac4:	6994      	ldr	r4, [r2, #24]
 8008ac6:	42a3      	cmp	r3, r4
 8008ac8:	db01      	blt.n	8008ace <__sfputc_r+0x16>
 8008aca:	290a      	cmp	r1, #10
 8008acc:	d103      	bne.n	8008ad6 <__sfputc_r+0x1e>
 8008ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ad2:	f7fe bc7c 	b.w	80073ce <__swbuf_r>
 8008ad6:	6813      	ldr	r3, [r2, #0]
 8008ad8:	1c58      	adds	r0, r3, #1
 8008ada:	6010      	str	r0, [r2, #0]
 8008adc:	7019      	strb	r1, [r3, #0]
 8008ade:	4608      	mov	r0, r1
 8008ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <__sfputs_r>:
 8008ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae8:	4606      	mov	r6, r0
 8008aea:	460f      	mov	r7, r1
 8008aec:	4614      	mov	r4, r2
 8008aee:	18d5      	adds	r5, r2, r3
 8008af0:	42ac      	cmp	r4, r5
 8008af2:	d101      	bne.n	8008af8 <__sfputs_r+0x12>
 8008af4:	2000      	movs	r0, #0
 8008af6:	e007      	b.n	8008b08 <__sfputs_r+0x22>
 8008af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afc:	463a      	mov	r2, r7
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7ff ffda 	bl	8008ab8 <__sfputc_r>
 8008b04:	1c43      	adds	r3, r0, #1
 8008b06:	d1f3      	bne.n	8008af0 <__sfputs_r+0xa>
 8008b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b0c <_vfiprintf_r>:
 8008b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b10:	460d      	mov	r5, r1
 8008b12:	b09d      	sub	sp, #116	@ 0x74
 8008b14:	4614      	mov	r4, r2
 8008b16:	4698      	mov	r8, r3
 8008b18:	4606      	mov	r6, r0
 8008b1a:	b118      	cbz	r0, 8008b24 <_vfiprintf_r+0x18>
 8008b1c:	6a03      	ldr	r3, [r0, #32]
 8008b1e:	b90b      	cbnz	r3, 8008b24 <_vfiprintf_r+0x18>
 8008b20:	f7fe fb64 	bl	80071ec <__sinit>
 8008b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b26:	07d9      	lsls	r1, r3, #31
 8008b28:	d405      	bmi.n	8008b36 <_vfiprintf_r+0x2a>
 8008b2a:	89ab      	ldrh	r3, [r5, #12]
 8008b2c:	059a      	lsls	r2, r3, #22
 8008b2e:	d402      	bmi.n	8008b36 <_vfiprintf_r+0x2a>
 8008b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b32:	f7fe fd5e 	bl	80075f2 <__retarget_lock_acquire_recursive>
 8008b36:	89ab      	ldrh	r3, [r5, #12]
 8008b38:	071b      	lsls	r3, r3, #28
 8008b3a:	d501      	bpl.n	8008b40 <_vfiprintf_r+0x34>
 8008b3c:	692b      	ldr	r3, [r5, #16]
 8008b3e:	b99b      	cbnz	r3, 8008b68 <_vfiprintf_r+0x5c>
 8008b40:	4629      	mov	r1, r5
 8008b42:	4630      	mov	r0, r6
 8008b44:	f7fe fc82 	bl	800744c <__swsetup_r>
 8008b48:	b170      	cbz	r0, 8008b68 <_vfiprintf_r+0x5c>
 8008b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b4c:	07dc      	lsls	r4, r3, #31
 8008b4e:	d504      	bpl.n	8008b5a <_vfiprintf_r+0x4e>
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	b01d      	add	sp, #116	@ 0x74
 8008b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5a:	89ab      	ldrh	r3, [r5, #12]
 8008b5c:	0598      	lsls	r0, r3, #22
 8008b5e:	d4f7      	bmi.n	8008b50 <_vfiprintf_r+0x44>
 8008b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b62:	f7fe fd47 	bl	80075f4 <__retarget_lock_release_recursive>
 8008b66:	e7f3      	b.n	8008b50 <_vfiprintf_r+0x44>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b6c:	2320      	movs	r3, #32
 8008b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b76:	2330      	movs	r3, #48	@ 0x30
 8008b78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d28 <_vfiprintf_r+0x21c>
 8008b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b80:	f04f 0901 	mov.w	r9, #1
 8008b84:	4623      	mov	r3, r4
 8008b86:	469a      	mov	sl, r3
 8008b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b8c:	b10a      	cbz	r2, 8008b92 <_vfiprintf_r+0x86>
 8008b8e:	2a25      	cmp	r2, #37	@ 0x25
 8008b90:	d1f9      	bne.n	8008b86 <_vfiprintf_r+0x7a>
 8008b92:	ebba 0b04 	subs.w	fp, sl, r4
 8008b96:	d00b      	beq.n	8008bb0 <_vfiprintf_r+0xa4>
 8008b98:	465b      	mov	r3, fp
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f7ff ffa1 	bl	8008ae6 <__sfputs_r>
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	f000 80a7 	beq.w	8008cf8 <_vfiprintf_r+0x1ec>
 8008baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bac:	445a      	add	r2, fp
 8008bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 809f 	beq.w	8008cf8 <_vfiprintf_r+0x1ec>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bc4:	f10a 0a01 	add.w	sl, sl, #1
 8008bc8:	9304      	str	r3, [sp, #16]
 8008bca:	9307      	str	r3, [sp, #28]
 8008bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bd2:	4654      	mov	r4, sl
 8008bd4:	2205      	movs	r2, #5
 8008bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bda:	4853      	ldr	r0, [pc, #332]	@ (8008d28 <_vfiprintf_r+0x21c>)
 8008bdc:	f7f7 fb80 	bl	80002e0 <memchr>
 8008be0:	9a04      	ldr	r2, [sp, #16]
 8008be2:	b9d8      	cbnz	r0, 8008c1c <_vfiprintf_r+0x110>
 8008be4:	06d1      	lsls	r1, r2, #27
 8008be6:	bf44      	itt	mi
 8008be8:	2320      	movmi	r3, #32
 8008bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bee:	0713      	lsls	r3, r2, #28
 8008bf0:	bf44      	itt	mi
 8008bf2:	232b      	movmi	r3, #43	@ 0x2b
 8008bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bfe:	d015      	beq.n	8008c2c <_vfiprintf_r+0x120>
 8008c00:	9a07      	ldr	r2, [sp, #28]
 8008c02:	4654      	mov	r4, sl
 8008c04:	2000      	movs	r0, #0
 8008c06:	f04f 0c0a 	mov.w	ip, #10
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c10:	3b30      	subs	r3, #48	@ 0x30
 8008c12:	2b09      	cmp	r3, #9
 8008c14:	d94b      	bls.n	8008cae <_vfiprintf_r+0x1a2>
 8008c16:	b1b0      	cbz	r0, 8008c46 <_vfiprintf_r+0x13a>
 8008c18:	9207      	str	r2, [sp, #28]
 8008c1a:	e014      	b.n	8008c46 <_vfiprintf_r+0x13a>
 8008c1c:	eba0 0308 	sub.w	r3, r0, r8
 8008c20:	fa09 f303 	lsl.w	r3, r9, r3
 8008c24:	4313      	orrs	r3, r2
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	46a2      	mov	sl, r4
 8008c2a:	e7d2      	b.n	8008bd2 <_vfiprintf_r+0xc6>
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	1d19      	adds	r1, r3, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	9103      	str	r1, [sp, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bfbb      	ittet	lt
 8008c38:	425b      	neglt	r3, r3
 8008c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c3e:	9307      	strge	r3, [sp, #28]
 8008c40:	9307      	strlt	r3, [sp, #28]
 8008c42:	bfb8      	it	lt
 8008c44:	9204      	strlt	r2, [sp, #16]
 8008c46:	7823      	ldrb	r3, [r4, #0]
 8008c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c4a:	d10a      	bne.n	8008c62 <_vfiprintf_r+0x156>
 8008c4c:	7863      	ldrb	r3, [r4, #1]
 8008c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c50:	d132      	bne.n	8008cb8 <_vfiprintf_r+0x1ac>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	1d1a      	adds	r2, r3, #4
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	9203      	str	r2, [sp, #12]
 8008c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c5e:	3402      	adds	r4, #2
 8008c60:	9305      	str	r3, [sp, #20]
 8008c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d38 <_vfiprintf_r+0x22c>
 8008c66:	7821      	ldrb	r1, [r4, #0]
 8008c68:	2203      	movs	r2, #3
 8008c6a:	4650      	mov	r0, sl
 8008c6c:	f7f7 fb38 	bl	80002e0 <memchr>
 8008c70:	b138      	cbz	r0, 8008c82 <_vfiprintf_r+0x176>
 8008c72:	9b04      	ldr	r3, [sp, #16]
 8008c74:	eba0 000a 	sub.w	r0, r0, sl
 8008c78:	2240      	movs	r2, #64	@ 0x40
 8008c7a:	4082      	lsls	r2, r0
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	3401      	adds	r4, #1
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c86:	4829      	ldr	r0, [pc, #164]	@ (8008d2c <_vfiprintf_r+0x220>)
 8008c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c8c:	2206      	movs	r2, #6
 8008c8e:	f7f7 fb27 	bl	80002e0 <memchr>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d03f      	beq.n	8008d16 <_vfiprintf_r+0x20a>
 8008c96:	4b26      	ldr	r3, [pc, #152]	@ (8008d30 <_vfiprintf_r+0x224>)
 8008c98:	bb1b      	cbnz	r3, 8008ce2 <_vfiprintf_r+0x1d6>
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	3307      	adds	r3, #7
 8008c9e:	f023 0307 	bic.w	r3, r3, #7
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	9303      	str	r3, [sp, #12]
 8008ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca8:	443b      	add	r3, r7
 8008caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cac:	e76a      	b.n	8008b84 <_vfiprintf_r+0x78>
 8008cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	e7a8      	b.n	8008c0a <_vfiprintf_r+0xfe>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	3401      	adds	r4, #1
 8008cbc:	9305      	str	r3, [sp, #20]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	f04f 0c0a 	mov.w	ip, #10
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cca:	3a30      	subs	r2, #48	@ 0x30
 8008ccc:	2a09      	cmp	r2, #9
 8008cce:	d903      	bls.n	8008cd8 <_vfiprintf_r+0x1cc>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0c6      	beq.n	8008c62 <_vfiprintf_r+0x156>
 8008cd4:	9105      	str	r1, [sp, #20]
 8008cd6:	e7c4      	b.n	8008c62 <_vfiprintf_r+0x156>
 8008cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cdc:	4604      	mov	r4, r0
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e7f0      	b.n	8008cc4 <_vfiprintf_r+0x1b8>
 8008ce2:	ab03      	add	r3, sp, #12
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	462a      	mov	r2, r5
 8008ce8:	4b12      	ldr	r3, [pc, #72]	@ (8008d34 <_vfiprintf_r+0x228>)
 8008cea:	a904      	add	r1, sp, #16
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7fd fe4b 	bl	8006988 <_printf_float>
 8008cf2:	4607      	mov	r7, r0
 8008cf4:	1c78      	adds	r0, r7, #1
 8008cf6:	d1d6      	bne.n	8008ca6 <_vfiprintf_r+0x19a>
 8008cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cfa:	07d9      	lsls	r1, r3, #31
 8008cfc:	d405      	bmi.n	8008d0a <_vfiprintf_r+0x1fe>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	059a      	lsls	r2, r3, #22
 8008d02:	d402      	bmi.n	8008d0a <_vfiprintf_r+0x1fe>
 8008d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d06:	f7fe fc75 	bl	80075f4 <__retarget_lock_release_recursive>
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	065b      	lsls	r3, r3, #25
 8008d0e:	f53f af1f 	bmi.w	8008b50 <_vfiprintf_r+0x44>
 8008d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d14:	e71e      	b.n	8008b54 <_vfiprintf_r+0x48>
 8008d16:	ab03      	add	r3, sp, #12
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	462a      	mov	r2, r5
 8008d1c:	4b05      	ldr	r3, [pc, #20]	@ (8008d34 <_vfiprintf_r+0x228>)
 8008d1e:	a904      	add	r1, sp, #16
 8008d20:	4630      	mov	r0, r6
 8008d22:	f7fe f8b9 	bl	8006e98 <_printf_i>
 8008d26:	e7e4      	b.n	8008cf2 <_vfiprintf_r+0x1e6>
 8008d28:	0800950e 	.word	0x0800950e
 8008d2c:	08009518 	.word	0x08009518
 8008d30:	08006989 	.word	0x08006989
 8008d34:	08008ae7 	.word	0x08008ae7
 8008d38:	08009514 	.word	0x08009514

08008d3c <__sflush_r>:
 8008d3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d44:	0716      	lsls	r6, r2, #28
 8008d46:	4605      	mov	r5, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	d454      	bmi.n	8008df6 <__sflush_r+0xba>
 8008d4c:	684b      	ldr	r3, [r1, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dc02      	bgt.n	8008d58 <__sflush_r+0x1c>
 8008d52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dd48      	ble.n	8008dea <__sflush_r+0xae>
 8008d58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d5a:	2e00      	cmp	r6, #0
 8008d5c:	d045      	beq.n	8008dea <__sflush_r+0xae>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d64:	682f      	ldr	r7, [r5, #0]
 8008d66:	6a21      	ldr	r1, [r4, #32]
 8008d68:	602b      	str	r3, [r5, #0]
 8008d6a:	d030      	beq.n	8008dce <__sflush_r+0x92>
 8008d6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d6e:	89a3      	ldrh	r3, [r4, #12]
 8008d70:	0759      	lsls	r1, r3, #29
 8008d72:	d505      	bpl.n	8008d80 <__sflush_r+0x44>
 8008d74:	6863      	ldr	r3, [r4, #4]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d7a:	b10b      	cbz	r3, 8008d80 <__sflush_r+0x44>
 8008d7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d7e:	1ad2      	subs	r2, r2, r3
 8008d80:	2300      	movs	r3, #0
 8008d82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d84:	6a21      	ldr	r1, [r4, #32]
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b0      	blx	r6
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	d106      	bne.n	8008d9e <__sflush_r+0x62>
 8008d90:	6829      	ldr	r1, [r5, #0]
 8008d92:	291d      	cmp	r1, #29
 8008d94:	d82b      	bhi.n	8008dee <__sflush_r+0xb2>
 8008d96:	4a2a      	ldr	r2, [pc, #168]	@ (8008e40 <__sflush_r+0x104>)
 8008d98:	40ca      	lsrs	r2, r1
 8008d9a:	07d6      	lsls	r6, r2, #31
 8008d9c:	d527      	bpl.n	8008dee <__sflush_r+0xb2>
 8008d9e:	2200      	movs	r2, #0
 8008da0:	6062      	str	r2, [r4, #4]
 8008da2:	04d9      	lsls	r1, r3, #19
 8008da4:	6922      	ldr	r2, [r4, #16]
 8008da6:	6022      	str	r2, [r4, #0]
 8008da8:	d504      	bpl.n	8008db4 <__sflush_r+0x78>
 8008daa:	1c42      	adds	r2, r0, #1
 8008dac:	d101      	bne.n	8008db2 <__sflush_r+0x76>
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	b903      	cbnz	r3, 8008db4 <__sflush_r+0x78>
 8008db2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008db6:	602f      	str	r7, [r5, #0]
 8008db8:	b1b9      	cbz	r1, 8008dea <__sflush_r+0xae>
 8008dba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dbe:	4299      	cmp	r1, r3
 8008dc0:	d002      	beq.n	8008dc8 <__sflush_r+0x8c>
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f7ff f9fe 	bl	80081c4 <_free_r>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dcc:	e00d      	b.n	8008dea <__sflush_r+0xae>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b0      	blx	r6
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	1c50      	adds	r0, r2, #1
 8008dd8:	d1c9      	bne.n	8008d6e <__sflush_r+0x32>
 8008dda:	682b      	ldr	r3, [r5, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0c6      	beq.n	8008d6e <__sflush_r+0x32>
 8008de0:	2b1d      	cmp	r3, #29
 8008de2:	d001      	beq.n	8008de8 <__sflush_r+0xac>
 8008de4:	2b16      	cmp	r3, #22
 8008de6:	d11e      	bne.n	8008e26 <__sflush_r+0xea>
 8008de8:	602f      	str	r7, [r5, #0]
 8008dea:	2000      	movs	r0, #0
 8008dec:	e022      	b.n	8008e34 <__sflush_r+0xf8>
 8008dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008df2:	b21b      	sxth	r3, r3
 8008df4:	e01b      	b.n	8008e2e <__sflush_r+0xf2>
 8008df6:	690f      	ldr	r7, [r1, #16]
 8008df8:	2f00      	cmp	r7, #0
 8008dfa:	d0f6      	beq.n	8008dea <__sflush_r+0xae>
 8008dfc:	0793      	lsls	r3, r2, #30
 8008dfe:	680e      	ldr	r6, [r1, #0]
 8008e00:	bf08      	it	eq
 8008e02:	694b      	ldreq	r3, [r1, #20]
 8008e04:	600f      	str	r7, [r1, #0]
 8008e06:	bf18      	it	ne
 8008e08:	2300      	movne	r3, #0
 8008e0a:	eba6 0807 	sub.w	r8, r6, r7
 8008e0e:	608b      	str	r3, [r1, #8]
 8008e10:	f1b8 0f00 	cmp.w	r8, #0
 8008e14:	dde9      	ble.n	8008dea <__sflush_r+0xae>
 8008e16:	6a21      	ldr	r1, [r4, #32]
 8008e18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e1a:	4643      	mov	r3, r8
 8008e1c:	463a      	mov	r2, r7
 8008e1e:	4628      	mov	r0, r5
 8008e20:	47b0      	blx	r6
 8008e22:	2800      	cmp	r0, #0
 8008e24:	dc08      	bgt.n	8008e38 <__sflush_r+0xfc>
 8008e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e2e:	81a3      	strh	r3, [r4, #12]
 8008e30:	f04f 30ff 	mov.w	r0, #4294967295
 8008e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e38:	4407      	add	r7, r0
 8008e3a:	eba8 0800 	sub.w	r8, r8, r0
 8008e3e:	e7e7      	b.n	8008e10 <__sflush_r+0xd4>
 8008e40:	20400001 	.word	0x20400001

08008e44 <_fflush_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	690b      	ldr	r3, [r1, #16]
 8008e48:	4605      	mov	r5, r0
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	b913      	cbnz	r3, 8008e54 <_fflush_r+0x10>
 8008e4e:	2500      	movs	r5, #0
 8008e50:	4628      	mov	r0, r5
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	b118      	cbz	r0, 8008e5e <_fflush_r+0x1a>
 8008e56:	6a03      	ldr	r3, [r0, #32]
 8008e58:	b90b      	cbnz	r3, 8008e5e <_fflush_r+0x1a>
 8008e5a:	f7fe f9c7 	bl	80071ec <__sinit>
 8008e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0f3      	beq.n	8008e4e <_fflush_r+0xa>
 8008e66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e68:	07d0      	lsls	r0, r2, #31
 8008e6a:	d404      	bmi.n	8008e76 <_fflush_r+0x32>
 8008e6c:	0599      	lsls	r1, r3, #22
 8008e6e:	d402      	bmi.n	8008e76 <_fflush_r+0x32>
 8008e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e72:	f7fe fbbe 	bl	80075f2 <__retarget_lock_acquire_recursive>
 8008e76:	4628      	mov	r0, r5
 8008e78:	4621      	mov	r1, r4
 8008e7a:	f7ff ff5f 	bl	8008d3c <__sflush_r>
 8008e7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e80:	07da      	lsls	r2, r3, #31
 8008e82:	4605      	mov	r5, r0
 8008e84:	d4e4      	bmi.n	8008e50 <_fflush_r+0xc>
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	059b      	lsls	r3, r3, #22
 8008e8a:	d4e1      	bmi.n	8008e50 <_fflush_r+0xc>
 8008e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e8e:	f7fe fbb1 	bl	80075f4 <__retarget_lock_release_recursive>
 8008e92:	e7dd      	b.n	8008e50 <_fflush_r+0xc>

08008e94 <__swhatbuf_r>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	460c      	mov	r4, r1
 8008e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9c:	2900      	cmp	r1, #0
 8008e9e:	b096      	sub	sp, #88	@ 0x58
 8008ea0:	4615      	mov	r5, r2
 8008ea2:	461e      	mov	r6, r3
 8008ea4:	da0d      	bge.n	8008ec2 <__swhatbuf_r+0x2e>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008eac:	f04f 0100 	mov.w	r1, #0
 8008eb0:	bf14      	ite	ne
 8008eb2:	2340      	movne	r3, #64	@ 0x40
 8008eb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008eb8:	2000      	movs	r0, #0
 8008eba:	6031      	str	r1, [r6, #0]
 8008ebc:	602b      	str	r3, [r5, #0]
 8008ebe:	b016      	add	sp, #88	@ 0x58
 8008ec0:	bd70      	pop	{r4, r5, r6, pc}
 8008ec2:	466a      	mov	r2, sp
 8008ec4:	f000 f87c 	bl	8008fc0 <_fstat_r>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	dbec      	blt.n	8008ea6 <__swhatbuf_r+0x12>
 8008ecc:	9901      	ldr	r1, [sp, #4]
 8008ece:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ed2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ed6:	4259      	negs	r1, r3
 8008ed8:	4159      	adcs	r1, r3
 8008eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ede:	e7eb      	b.n	8008eb8 <__swhatbuf_r+0x24>

08008ee0 <__smakebuf_r>:
 8008ee0:	898b      	ldrh	r3, [r1, #12]
 8008ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ee4:	079d      	lsls	r5, r3, #30
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	d507      	bpl.n	8008efc <__smakebuf_r+0x1c>
 8008eec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	6123      	str	r3, [r4, #16]
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	6163      	str	r3, [r4, #20]
 8008ef8:	b003      	add	sp, #12
 8008efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008efc:	ab01      	add	r3, sp, #4
 8008efe:	466a      	mov	r2, sp
 8008f00:	f7ff ffc8 	bl	8008e94 <__swhatbuf_r>
 8008f04:	9f00      	ldr	r7, [sp, #0]
 8008f06:	4605      	mov	r5, r0
 8008f08:	4639      	mov	r1, r7
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff f9ce 	bl	80082ac <_malloc_r>
 8008f10:	b948      	cbnz	r0, 8008f26 <__smakebuf_r+0x46>
 8008f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f16:	059a      	lsls	r2, r3, #22
 8008f18:	d4ee      	bmi.n	8008ef8 <__smakebuf_r+0x18>
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	f043 0302 	orr.w	r3, r3, #2
 8008f22:	81a3      	strh	r3, [r4, #12]
 8008f24:	e7e2      	b.n	8008eec <__smakebuf_r+0xc>
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	6020      	str	r0, [r4, #0]
 8008f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f36:	b15b      	cbz	r3, 8008f50 <__smakebuf_r+0x70>
 8008f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f000 f851 	bl	8008fe4 <_isatty_r>
 8008f42:	b128      	cbz	r0, 8008f50 <__smakebuf_r+0x70>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f023 0303 	bic.w	r3, r3, #3
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	431d      	orrs	r5, r3
 8008f54:	81a5      	strh	r5, [r4, #12]
 8008f56:	e7cf      	b.n	8008ef8 <__smakebuf_r+0x18>

08008f58 <_putc_r>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	4606      	mov	r6, r0
 8008f60:	b118      	cbz	r0, 8008f6a <_putc_r+0x12>
 8008f62:	6a03      	ldr	r3, [r0, #32]
 8008f64:	b90b      	cbnz	r3, 8008f6a <_putc_r+0x12>
 8008f66:	f7fe f941 	bl	80071ec <__sinit>
 8008f6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f6c:	07d8      	lsls	r0, r3, #31
 8008f6e:	d405      	bmi.n	8008f7c <_putc_r+0x24>
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	0599      	lsls	r1, r3, #22
 8008f74:	d402      	bmi.n	8008f7c <_putc_r+0x24>
 8008f76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f78:	f7fe fb3b 	bl	80075f2 <__retarget_lock_acquire_recursive>
 8008f7c:	68a3      	ldr	r3, [r4, #8]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	60a3      	str	r3, [r4, #8]
 8008f84:	da05      	bge.n	8008f92 <_putc_r+0x3a>
 8008f86:	69a2      	ldr	r2, [r4, #24]
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	db12      	blt.n	8008fb2 <_putc_r+0x5a>
 8008f8c:	b2eb      	uxtb	r3, r5
 8008f8e:	2b0a      	cmp	r3, #10
 8008f90:	d00f      	beq.n	8008fb2 <_putc_r+0x5a>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	6022      	str	r2, [r4, #0]
 8008f98:	701d      	strb	r5, [r3, #0]
 8008f9a:	b2ed      	uxtb	r5, r5
 8008f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f9e:	07da      	lsls	r2, r3, #31
 8008fa0:	d405      	bmi.n	8008fae <_putc_r+0x56>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	059b      	lsls	r3, r3, #22
 8008fa6:	d402      	bmi.n	8008fae <_putc_r+0x56>
 8008fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008faa:	f7fe fb23 	bl	80075f4 <__retarget_lock_release_recursive>
 8008fae:	4628      	mov	r0, r5
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4622      	mov	r2, r4
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7fe fa09 	bl	80073ce <__swbuf_r>
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	e7ed      	b.n	8008f9c <_putc_r+0x44>

08008fc0 <_fstat_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	@ (8008fe0 <_fstat_r+0x20>)
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	4608      	mov	r0, r1
 8008fca:	4611      	mov	r1, r2
 8008fcc:	602b      	str	r3, [r5, #0]
 8008fce:	f7f8 f8dd 	bl	800118c <_fstat>
 8008fd2:	1c43      	adds	r3, r0, #1
 8008fd4:	d102      	bne.n	8008fdc <_fstat_r+0x1c>
 8008fd6:	682b      	ldr	r3, [r5, #0]
 8008fd8:	b103      	cbz	r3, 8008fdc <_fstat_r+0x1c>
 8008fda:	6023      	str	r3, [r4, #0]
 8008fdc:	bd38      	pop	{r3, r4, r5, pc}
 8008fde:	bf00      	nop
 8008fe0:	24000440 	.word	0x24000440

08008fe4 <_isatty_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d06      	ldr	r5, [pc, #24]	@ (8009000 <_isatty_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7f8 f8dc 	bl	80011ac <_isatty>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_isatty_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_isatty_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	24000440 	.word	0x24000440

08009004 <_sbrk_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4d06      	ldr	r5, [pc, #24]	@ (8009020 <_sbrk_r+0x1c>)
 8009008:	2300      	movs	r3, #0
 800900a:	4604      	mov	r4, r0
 800900c:	4608      	mov	r0, r1
 800900e:	602b      	str	r3, [r5, #0]
 8009010:	f7f8 f8e4 	bl	80011dc <_sbrk>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_sbrk_r+0x1a>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	b103      	cbz	r3, 800901e <_sbrk_r+0x1a>
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	24000440 	.word	0x24000440

08009024 <memcpy>:
 8009024:	440a      	add	r2, r1
 8009026:	4291      	cmp	r1, r2
 8009028:	f100 33ff 	add.w	r3, r0, #4294967295
 800902c:	d100      	bne.n	8009030 <memcpy+0xc>
 800902e:	4770      	bx	lr
 8009030:	b510      	push	{r4, lr}
 8009032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800903a:	4291      	cmp	r1, r2
 800903c:	d1f9      	bne.n	8009032 <memcpy+0xe>
 800903e:	bd10      	pop	{r4, pc}

08009040 <__assert_func>:
 8009040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009042:	4614      	mov	r4, r2
 8009044:	461a      	mov	r2, r3
 8009046:	4b09      	ldr	r3, [pc, #36]	@ (800906c <__assert_func+0x2c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4605      	mov	r5, r0
 800904c:	68d8      	ldr	r0, [r3, #12]
 800904e:	b14c      	cbz	r4, 8009064 <__assert_func+0x24>
 8009050:	4b07      	ldr	r3, [pc, #28]	@ (8009070 <__assert_func+0x30>)
 8009052:	9100      	str	r1, [sp, #0]
 8009054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009058:	4906      	ldr	r1, [pc, #24]	@ (8009074 <__assert_func+0x34>)
 800905a:	462b      	mov	r3, r5
 800905c:	f000 f842 	bl	80090e4 <fiprintf>
 8009060:	f000 f852 	bl	8009108 <abort>
 8009064:	4b04      	ldr	r3, [pc, #16]	@ (8009078 <__assert_func+0x38>)
 8009066:	461c      	mov	r4, r3
 8009068:	e7f3      	b.n	8009052 <__assert_func+0x12>
 800906a:	bf00      	nop
 800906c:	24000028 	.word	0x24000028
 8009070:	08009529 	.word	0x08009529
 8009074:	08009536 	.word	0x08009536
 8009078:	08009564 	.word	0x08009564

0800907c <_calloc_r>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	fba1 5402 	umull	r5, r4, r1, r2
 8009082:	b934      	cbnz	r4, 8009092 <_calloc_r+0x16>
 8009084:	4629      	mov	r1, r5
 8009086:	f7ff f911 	bl	80082ac <_malloc_r>
 800908a:	4606      	mov	r6, r0
 800908c:	b928      	cbnz	r0, 800909a <_calloc_r+0x1e>
 800908e:	4630      	mov	r0, r6
 8009090:	bd70      	pop	{r4, r5, r6, pc}
 8009092:	220c      	movs	r2, #12
 8009094:	6002      	str	r2, [r0, #0]
 8009096:	2600      	movs	r6, #0
 8009098:	e7f9      	b.n	800908e <_calloc_r+0x12>
 800909a:	462a      	mov	r2, r5
 800909c:	4621      	mov	r1, r4
 800909e:	f7fe fa2b 	bl	80074f8 <memset>
 80090a2:	e7f4      	b.n	800908e <_calloc_r+0x12>

080090a4 <__ascii_mbtowc>:
 80090a4:	b082      	sub	sp, #8
 80090a6:	b901      	cbnz	r1, 80090aa <__ascii_mbtowc+0x6>
 80090a8:	a901      	add	r1, sp, #4
 80090aa:	b142      	cbz	r2, 80090be <__ascii_mbtowc+0x1a>
 80090ac:	b14b      	cbz	r3, 80090c2 <__ascii_mbtowc+0x1e>
 80090ae:	7813      	ldrb	r3, [r2, #0]
 80090b0:	600b      	str	r3, [r1, #0]
 80090b2:	7812      	ldrb	r2, [r2, #0]
 80090b4:	1e10      	subs	r0, r2, #0
 80090b6:	bf18      	it	ne
 80090b8:	2001      	movne	r0, #1
 80090ba:	b002      	add	sp, #8
 80090bc:	4770      	bx	lr
 80090be:	4610      	mov	r0, r2
 80090c0:	e7fb      	b.n	80090ba <__ascii_mbtowc+0x16>
 80090c2:	f06f 0001 	mvn.w	r0, #1
 80090c6:	e7f8      	b.n	80090ba <__ascii_mbtowc+0x16>

080090c8 <__ascii_wctomb>:
 80090c8:	4603      	mov	r3, r0
 80090ca:	4608      	mov	r0, r1
 80090cc:	b141      	cbz	r1, 80090e0 <__ascii_wctomb+0x18>
 80090ce:	2aff      	cmp	r2, #255	@ 0xff
 80090d0:	d904      	bls.n	80090dc <__ascii_wctomb+0x14>
 80090d2:	228a      	movs	r2, #138	@ 0x8a
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	f04f 30ff 	mov.w	r0, #4294967295
 80090da:	4770      	bx	lr
 80090dc:	700a      	strb	r2, [r1, #0]
 80090de:	2001      	movs	r0, #1
 80090e0:	4770      	bx	lr
	...

080090e4 <fiprintf>:
 80090e4:	b40e      	push	{r1, r2, r3}
 80090e6:	b503      	push	{r0, r1, lr}
 80090e8:	4601      	mov	r1, r0
 80090ea:	ab03      	add	r3, sp, #12
 80090ec:	4805      	ldr	r0, [pc, #20]	@ (8009104 <fiprintf+0x20>)
 80090ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f2:	6800      	ldr	r0, [r0, #0]
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	f7ff fd09 	bl	8008b0c <_vfiprintf_r>
 80090fa:	b002      	add	sp, #8
 80090fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009100:	b003      	add	sp, #12
 8009102:	4770      	bx	lr
 8009104:	24000028 	.word	0x24000028

08009108 <abort>:
 8009108:	b508      	push	{r3, lr}
 800910a:	2006      	movs	r0, #6
 800910c:	f000 f82c 	bl	8009168 <raise>
 8009110:	2001      	movs	r0, #1
 8009112:	f7f8 f807 	bl	8001124 <_exit>

08009116 <_raise_r>:
 8009116:	291f      	cmp	r1, #31
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4605      	mov	r5, r0
 800911c:	460c      	mov	r4, r1
 800911e:	d904      	bls.n	800912a <_raise_r+0x14>
 8009120:	2316      	movs	r3, #22
 8009122:	6003      	str	r3, [r0, #0]
 8009124:	f04f 30ff 	mov.w	r0, #4294967295
 8009128:	bd38      	pop	{r3, r4, r5, pc}
 800912a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800912c:	b112      	cbz	r2, 8009134 <_raise_r+0x1e>
 800912e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009132:	b94b      	cbnz	r3, 8009148 <_raise_r+0x32>
 8009134:	4628      	mov	r0, r5
 8009136:	f000 f831 	bl	800919c <_getpid_r>
 800913a:	4622      	mov	r2, r4
 800913c:	4601      	mov	r1, r0
 800913e:	4628      	mov	r0, r5
 8009140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009144:	f000 b818 	b.w	8009178 <_kill_r>
 8009148:	2b01      	cmp	r3, #1
 800914a:	d00a      	beq.n	8009162 <_raise_r+0x4c>
 800914c:	1c59      	adds	r1, r3, #1
 800914e:	d103      	bne.n	8009158 <_raise_r+0x42>
 8009150:	2316      	movs	r3, #22
 8009152:	6003      	str	r3, [r0, #0]
 8009154:	2001      	movs	r0, #1
 8009156:	e7e7      	b.n	8009128 <_raise_r+0x12>
 8009158:	2100      	movs	r1, #0
 800915a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800915e:	4620      	mov	r0, r4
 8009160:	4798      	blx	r3
 8009162:	2000      	movs	r0, #0
 8009164:	e7e0      	b.n	8009128 <_raise_r+0x12>
	...

08009168 <raise>:
 8009168:	4b02      	ldr	r3, [pc, #8]	@ (8009174 <raise+0xc>)
 800916a:	4601      	mov	r1, r0
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	f7ff bfd2 	b.w	8009116 <_raise_r>
 8009172:	bf00      	nop
 8009174:	24000028 	.word	0x24000028

08009178 <_kill_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d07      	ldr	r5, [pc, #28]	@ (8009198 <_kill_r+0x20>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	4611      	mov	r1, r2
 8009184:	602b      	str	r3, [r5, #0]
 8009186:	f7f7 ffbd 	bl	8001104 <_kill>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d102      	bne.n	8009194 <_kill_r+0x1c>
 800918e:	682b      	ldr	r3, [r5, #0]
 8009190:	b103      	cbz	r3, 8009194 <_kill_r+0x1c>
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	bd38      	pop	{r3, r4, r5, pc}
 8009196:	bf00      	nop
 8009198:	24000440 	.word	0x24000440

0800919c <_getpid_r>:
 800919c:	f7f7 bfaa 	b.w	80010f4 <_getpid>

080091a0 <_init>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	bf00      	nop
 80091a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a6:	bc08      	pop	{r3}
 80091a8:	469e      	mov	lr, r3
 80091aa:	4770      	bx	lr

080091ac <_fini>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr
